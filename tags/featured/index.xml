<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Featured on Vincent Demeester</title>
    <link>https://vincent.demeester.fr/tags/featured/</link>
    <description>Recent content in Featured on Vincent Demeester</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 28 Jul 2018 00:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://vincent.demeester.fr/tags/featured/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang testing â€” gotest.tools introduction</title>
      <link>https://vincent.demeester.fr/posts/2018-07-28-gotest-tools-intro/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0200</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2018-07-28-gotest-tools-intro/</guid>
      <description>I already wrote 2 previous posts about golang and testing. It&amp;rsquo;s something I care deeply about and I wanted to continue writing about it. It took me a bit more time than I thought, but getting back to it. Since the last post, Daniel Nephin and I worked (but mainly Daniel ðŸ¤—) on bootstrapping a testing helper library.
Let me introduce it to you this library : gotest.tools. As described in the godoc package comment, gotest.</description>
    </item>
    
    <item>
      <title>Golang testing â€” functional arguments for wonderful builders</title>
      <link>https://vincent.demeester.fr/posts/2017-01-01-go-testing-functionnal-builders/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2017-01-01-go-testing-functionnal-builders/</guid>
      <description>Programming is not easy; even the best programmers are incapable of writing programs that work exactly as intended every time. Therefore an important part of the software development process is testing. Writing tests for our code is a good way to ensure quality and improve reliability.   Go programs, when properly implemented, are fairly simple to test programatically. The testing built-in library and the features of the language itself offer plenty of ways to write good tests.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>featured on Vincent Demeester</title>
    <link>https://vincent.demeester.fr/tags/featured/</link>
    <description>Recent content in featured on Vincent Demeester</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 28 Jul 2018 00:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://vincent.demeester.fr/tags/featured/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang testing — gotest.tools introduction</title>
      <link>https://vincent.demeester.fr/posts/2018-07-28-gotest-tools-intro/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0200</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2018-07-28-gotest-tools-intro/</guid>
      <description>Let me introduce it to you this library : gotest.tools. As described in the godoc package comment, gotest.tools is a collection of packages to augment testing and support common patterns. It&amp;rsquo;s an enhanced and growing version of the initial helpers we (the docker/moby maintainers) wrote initially in docker/docker repository. We are using in quite some project here at Docker.
There is a bunch of packages that will all have their own post (linked here when available) :</description>
    </item>
    
    <item>
      <title>Golang testing — functional arguments for wonderful builders</title>
      <link>https://vincent.demeester.fr/posts/2017-01-01-go-testing-functionnal-builders/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2017-01-01-go-testing-functionnal-builders/</guid>
      <description>Programming is not easy; even the best programmers are incapable of writing programs that work exactly as intended every time. Therefore an important part of the software development process is testing. Writing tests for our code is a good way to ensure quality and improve reliability.   Go programs, when properly implemented, are fairly simple to test programatically. The testing built-in library and the features of the language itself offer plenty of ways to write good tests.</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Vincent Demeester</title>
    <link>http://vincent.demeester.fr/tags/golang/</link>
    <description>Recent content in Golang on Vincent Demeester</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Sat, 22 Apr 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://vincent.demeester.fr/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang testing — golden file</title>
      <link>http://vincent.demeester.fr/posts/2017-04-22-golang-testing-golden-file/</link>
      <pubDate>Sat, 22 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2017-04-22-golang-testing-golden-file/</guid>
      <description>Tests are all about maintainability and readability. You want the least visual noise possible and it should not be a hassle to maintain. When testing functions that output a long of string, in case of a command line output testing, readability and maintainance tend to be tricky to achieve. The problem  As an example let&#39;s say we want to test out the output of a command that displays a list as a table.</description>
    </item>
    
    <item>
      <title>Golang testing — functional arguments for wonderful builders</title>
      <link>http://vincent.demeester.fr/posts/2017-01-01-go-testing-functionnal-builders/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2017-01-01-go-testing-functionnal-builders/</guid>
      <description>Programming is not easy; even the best programmers are incapable of writing programs that work exactly as intended every time. Therefore an important part of the software development process is testing. Writing tests for our code is a good way to ensure quality and improve reliability.   Go programs, when properly implemented, are fairly simple to test programatically. The testing built-in library and the features of the language itself offer plenty of ways to write good tests.</description>
    </item>
    
    <item>
      <title>Migration vers hugo</title>
      <link>http://vincent.demeester.fr/posts/2015-05-09-migration-to-hugo/</link>
      <pubDate>Sat, 09 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2015-05-09-migration-to-hugo/</guid>
      <description>Et voilà, une semaine après m&#39;être remis en route sur ce blog, je fais déjà une migration &amp;gt;_&amp;lt;. Je me suis rendu compte que Jekyll m&#39;énervait un peu, et comme je suis à fond dans go en ce moment, j&#39;ai regardé du côté des générateurs de sites static et Hugo a clairement retenu mon attention. Pourquoi Hugo ?   Make the Web Fun Again  Introducing Hugo, a new idea around making website creation simple again.</description>
    </item>
    
  </channel>
</rss>
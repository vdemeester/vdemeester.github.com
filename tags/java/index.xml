<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Vincent Demeester</title>
    <link>http://vincent.demeester.fr/tags/java/</link>
    <description>Recent content in Java on Vincent Demeester</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Sat, 22 Apr 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://vincent.demeester.fr/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Golang testing — golden file</title>
      <link>http://vincent.demeester.fr/posts/2017-04-22-golang-testing-golden-file/</link>
      <pubDate>Sat, 22 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2017-04-22-golang-testing-golden-file/</guid>
      <description>&lt;p&gt;
Tests are all about &lt;b&gt;maintainability&lt;/b&gt; and &lt;b&gt;readability&lt;/b&gt;. You want the
least visual noise possible and it should not be a hassle to
maintain. When testing functions that output a long of string, in case
of a command line output testing, readability and maintainance tend to
be tricky to achieve.
&lt;/p&gt;


&lt;div id=&#34;outline-container-org2f1fc39&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org2f1fc39&#34;&gt;The problem&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org2f1fc39&#34;&gt;
&lt;p&gt;
As an example let&#39;s say we want to test out the output of a command
that displays a list as a table. The output would look like the
following:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-sh&#34;&gt;&lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;ID:&lt;/span&gt;                     &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;nodeID&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;Name:&lt;/span&gt;                   &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;defaultNodeName&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;Hostname:&lt;/span&gt;               &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;defaultNodeHostname&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;Joined&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;at:&lt;/span&gt;              &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;2009-11-10&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;23:00:00&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-13&#34;&gt;+0000&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;utc&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;Status:&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;State:&lt;/span&gt;                 &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;Ready&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;Availability:&lt;/span&gt;          &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;Active&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;Address:&lt;/span&gt;               &lt;span class=&#34;org-rainbow-identifiers-identifier-13&#34;&gt;127.0.0.1&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;Manager&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;Status:&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;Address:&lt;/span&gt;               &lt;span class=&#34;org-rainbow-identifiers-identifier-13&#34;&gt;127.0.0.1&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;Raft&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;Status:&lt;/span&gt;           &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;Reachable&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;Leader:&lt;/span&gt;                &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;No&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;Platform:&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;Operating&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-13&#34;&gt;System:&lt;/span&gt;      &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;linux&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;Architecture:&lt;/span&gt;          &lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;x86_64&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;Resources:&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;CPUs:&lt;/span&gt;                  &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;0&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;Memory:&lt;/span&gt;                &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;MiB&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;Plugins:&lt;/span&gt;
  &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;Network:&lt;/span&gt;              &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;bridge,&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;overlay&lt;/span&gt;
  &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;Volume:&lt;/span&gt;               &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;local&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;Engine&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;Version:&lt;/span&gt;         &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;1.13.0&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;Engine&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;Labels:&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;org-variable-name&#34;&gt;engine&lt;/span&gt; = &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;label&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Let&#39;s see how we would test that output, naively.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestNodeInspectPretty&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;expected&lt;/span&gt; := &lt;span class=&#34;org-string&#34;&gt;```&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;ID:                     nodeID&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Name:                   defaultNodeName&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Hostname:               defaultNodeHostname&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Joined at:              2009-11-10 23:00:00 +0000 utc&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Status:&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; State:                 Ready&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; Availability:          Active&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; Address:               127.0.0.1&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Manager Status:&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; Address:               127.0.0.1&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; Raft Status:           Reachable&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; Leader:                No&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Platform:&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; Operating System:      linux&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; Architecture:          x86_64&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Resources:&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; CPUs:                  0&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; Memory:                20 MiB&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Plugins:&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;  Network:              bridge, overlay&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;  Volume:               local&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Engine Version:         1.13.0&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Engine Labels:&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; - engine = label&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;```&lt;/span&gt;
        &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;buf&lt;/span&gt; := &lt;span class=&#34;org-builtin&#34;&gt;new&lt;/span&gt;(&lt;span class=&#34;org-type&#34;&gt;bytes.Buffer&lt;/span&gt;)
        &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;cmd&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;newInspectCommand&lt;/span&gt;(
                &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;test&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;NewFakeCli&lt;/span&gt;(&amp;amp;&lt;span class=&#34;org-type&#34;&gt;fakeClient&lt;/span&gt;{
                        &lt;span class=&#34;org-constant&#34;&gt;nodeInspectFunc&lt;/span&gt;: &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;() (&lt;span class=&#34;org-type&#34;&gt;swarm.Node&lt;/span&gt;, []&lt;span class=&#34;org-type&#34;&gt;byte&lt;/span&gt;, &lt;span class=&#34;org-type&#34;&gt;error&lt;/span&gt;) {
                                &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; *&lt;span class=&#34;org-function-name&#34;&gt;Node&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;Manager&lt;/span&gt;()), []&lt;span class=&#34;org-type&#34;&gt;byte&lt;/span&gt;{}, &lt;span class=&#34;org-constant&#34;&gt;nil&lt;/span&gt;
                        },
                }, &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;buf&lt;/span&gt;))
        &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;cmd&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;SetArgs&lt;/span&gt;([]&lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;{&lt;span class=&#34;org-string&#34;&gt;&#34;nodeID&#34;&lt;/span&gt;})
        &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;cmd&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Flags&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;Set&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;pretty&#34;&lt;/span&gt;, &lt;span class=&#34;org-string&#34;&gt;&#34;true&#34;&lt;/span&gt;)
        &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;assert&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;NilError&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;cmd&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Execute&lt;/span&gt;())
        &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;actual&lt;/span&gt; := &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;buf&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;String&lt;/span&gt;()
        &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;assert&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;EqualNormalizedString&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;assert&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;RemoveSpace&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;actual&lt;/span&gt;, &lt;span class=&#34;org-function-name&#34;&gt;string&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;expected&lt;/span&gt;))
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This might look ok as is, but a few problem are present:
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;The output is quite large and adds some noise to the test&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Lot&#39;s of value in the &lt;code&gt;expected&lt;/code&gt; string comes from default values
of our &lt;code&gt;Node&lt;/code&gt; builder.
&lt;/p&gt;

&lt;p&gt;
This means any time we change our builder default values, we would
need to update this test, &lt;i&gt;painful&lt;/i&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;If the output changes for a good reason (add a field, fix a typo,
…), this test has to be updated too.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-org0519f3e&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org0519f3e&#34;&gt;Golden files to the rescue&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org0519f3e&#34;&gt;
&lt;p&gt;
First, let&#39;s get back at what is our test about and what we actually
want to test.
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;We want to ensure, the output of the function does not change by
mistake (i.e. change that wasn&#39;t supposed to change the output)&lt;/li&gt;
&lt;li&gt;We want to have an update version of the output if that was the
purpose of our change. And we want this update to be the least
painful possible.&lt;/li&gt;
&lt;li&gt;We don&#39;t really care about the final outputs as long as it stays
the same for the same inputs (i.e. we don&#39;t test for any number of
space, or that word are valid English, or …).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This is where the concept of &lt;b&gt;golden file&lt;/b&gt; is useful. In a
nutshell, a golden file is a file where we store the output and that
will be used by the test as the expected output. This file should be
updated any time the output changes for good reason. That&#39;s that
simple 👼.
&lt;/p&gt;

&lt;p&gt;
Once again, the way go &lt;code&gt;testing&lt;/code&gt; works, introducing and using golden
files in our tests is pretty straightforward and easy to use.
&lt;/p&gt;

&lt;p&gt;
Let&#39;s write a small &lt;i&gt;golden file helper&lt;/i&gt; so that our test has no
visual noise, in a &lt;code&gt;golden&lt;/code&gt; package.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;update&lt;/span&gt; = &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;flag&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Bool&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;test.update&#34;&lt;/span&gt;, &lt;span class=&#34;org-constant&#34;&gt;false&lt;/span&gt;, &lt;span class=&#34;org-string&#34;&gt;&#34;update golden file&#34;&lt;/span&gt;)

&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Get returns the golden file content. If the `test.update` is specified, it updates the&lt;/span&gt;
&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;file with the current output and returns it.&lt;/span&gt;
&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;Get&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;actual&lt;/span&gt; []&lt;span class=&#34;org-type&#34;&gt;byte&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) []&lt;span class=&#34;org-type&#34;&gt;byte&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;golden&lt;/span&gt; := &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;filepath&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Join&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;testdata&#34;&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;filename&lt;/span&gt;)
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; *&lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;update&lt;/span&gt; {
                &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;err&lt;/span&gt; := &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;ioutil&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;WriteFile&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;golden&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;actual&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;0644&lt;/span&gt;); &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;err&lt;/span&gt; != &lt;span class=&#34;org-constant&#34;&gt;nil&lt;/span&gt; {
                        &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;err&lt;/span&gt;)
                }
        }
        &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;expected&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;err&lt;/span&gt; := &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;ioutil&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;ReadFile&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;golden&lt;/span&gt;)
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;err&lt;/span&gt; != &lt;span class=&#34;org-constant&#34;&gt;nil&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;err&lt;/span&gt;)
        }
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;expected&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;We define a &lt;i&gt;global&lt;/i&gt; flag, &lt;code&gt;-test.update&lt;/code&gt; that will &lt;i&gt;enhance&lt;/i&gt; the
&lt;code&gt;go test&lt;/code&gt; command with it (as soon as we import this &lt;code&gt;golden&lt;/code&gt; package).&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
We define a &lt;code&gt;golden.Get&lt;/code&gt; function that takes the current output
and the path of the golden file. It also takes &lt;code&gt;testing.T&lt;/code&gt; so any
failure happening here (like reading file, …) will make the test
fail (one less thing to write in the test calling this function).
&lt;/p&gt;

&lt;p&gt;
If the flag is present when running the test, it will update the
file with the actual content.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The initial test becomes.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestNodeInspectPretty&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;buf&lt;/span&gt; := &lt;span class=&#34;org-builtin&#34;&gt;new&lt;/span&gt;(&lt;span class=&#34;org-type&#34;&gt;bytes.Buffer&lt;/span&gt;)
        &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;cmd&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;newInspectCommand&lt;/span&gt;(
                &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;test&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;NewFakeCli&lt;/span&gt;(&amp;amp;&lt;span class=&#34;org-type&#34;&gt;fakeClient&lt;/span&gt;{
                        &lt;span class=&#34;org-constant&#34;&gt;nodeInspectFunc&lt;/span&gt;: &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;() (&lt;span class=&#34;org-type&#34;&gt;swarm.Node&lt;/span&gt;, []&lt;span class=&#34;org-type&#34;&gt;byte&lt;/span&gt;, &lt;span class=&#34;org-type&#34;&gt;error&lt;/span&gt;) {
                                &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; *&lt;span class=&#34;org-function-name&#34;&gt;Node&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;Manager&lt;/span&gt;()), []&lt;span class=&#34;org-type&#34;&gt;byte&lt;/span&gt;{}, &lt;span class=&#34;org-constant&#34;&gt;nil&lt;/span&gt;
                        },
                }, &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;buf&lt;/span&gt;))
        &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;cmd&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;SetArgs&lt;/span&gt;([]&lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;{&lt;span class=&#34;org-string&#34;&gt;&#34;nodeID&#34;&lt;/span&gt;})
        &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;cmd&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Flags&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;Set&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;pretty&#34;&lt;/span&gt;, &lt;span class=&#34;org-string&#34;&gt;&#34;true&#34;&lt;/span&gt;)
        &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;assert&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;NilError&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;cmd&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Execute&lt;/span&gt;())
        &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;actual&lt;/span&gt; := &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;buf&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;String&lt;/span&gt;()
        &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;expected&lt;/span&gt; := &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;golden&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Get&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;, []&lt;span class=&#34;org-function-name&#34;&gt;byte&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;actual&lt;/span&gt;), &lt;span class=&#34;org-string&#34;&gt;&#34;myfile.golden&#34;&lt;/span&gt;)
        &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;assert&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;EqualNormalizedString&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;assert&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;RemoveSpace&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;actual&lt;/span&gt;, &lt;span class=&#34;org-function-name&#34;&gt;string&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;expected&lt;/span&gt;))
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
If we change the output, the workflow becomes the following :
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;run &lt;code&gt;go test&lt;/code&gt; and make sure it&#39;s failing,&lt;/li&gt;
&lt;li&gt;Validate that the current output is correct,&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;go test -test.update&lt;/code&gt; to update the golden file(s),&lt;/li&gt;
&lt;li&gt;re-run &lt;code&gt;go test&lt;/code&gt; to make sure it&#39;s now green,&lt;/li&gt;
&lt;li&gt;you are done 👼.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
With this simple trick, our test now &lt;b&gt;contains less noise&lt;/b&gt; and is
way more &lt;b&gt;maintainable&lt;/b&gt; (you just have a command to run to update
the expected content).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Golang testing — functional arguments for wonderful builders</title>
      <link>http://vincent.demeester.fr/posts/2017-01-01-go-testing-functionnal-builders/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2017-01-01-go-testing-functionnal-builders/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;
Programming is not easy; even the best programmers are incapable of
writing programs that work exactly as intended every time. Therefore
an important part of the software development process is
testing. Writing tests for our code is a good way to ensure quality
and improve reliability.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Go programs, when properly implemented, are fairly simple to test
programatically. The &lt;code&gt;testing&lt;/code&gt; built-in library and the features of
the language itself offer plenty of ways to write good tests. As this
is a subject I particularly like, I&#39;m gonna write a bunch of articles
about it, that, &lt;i&gt;hopefully&lt;/i&gt; do not get old or boring.
&lt;/p&gt;

&lt;p&gt;
I&#39;m not going to start by introducing how &lt;code&gt;testing&lt;/code&gt; works, it&#39;s
already widely described in &lt;a href=&#34;https://golang.org/pkg/testing/&#34;&gt;the &lt;code&gt;testing&lt;/code&gt; godoc&lt;/a&gt;, &lt;a href=&#34;https://blog.golang.org/examples&#34;&gt;some&lt;/a&gt; &lt;a href=&#34;https://www.golang-book.com/books/intro/12&#34;&gt;articles&lt;/a&gt; and
&lt;a href=&#34;https://jonathanmh.com/golang-unit-testing-for-absolute-beginners/&#34;&gt;blogs&lt;/a&gt;. I&#39;m going to jump ahead on a more advanced techinque to write
tests, the &lt;code&gt;builders&lt;/code&gt; for tests.
&lt;/p&gt;

&lt;p&gt;
One of the most important characteristic of a &lt;b&gt;unit test&lt;/b&gt; (and any
type of test really) is &lt;b&gt;readability&lt;/b&gt;. This means it should be &lt;i&gt;easy
to read&lt;/i&gt; but most importantly it should &lt;b&gt;clearly show the intent of
the test&lt;/b&gt;. The setup (and cleanup) of the tests should be as small as
possible to avoid the noise. And as we are going to see below, &lt;code&gt;go&lt;/code&gt;
makes it pretty easy to do so.
&lt;/p&gt;

&lt;div id=&#34;outline-container-org1afcfe7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org1afcfe7&#34;&gt;Builders in tests&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org1afcfe7&#34;&gt;
&lt;p&gt;
Sometimes, your need to create data structure for your test that
might take a lot of line and introduce noise. In &lt;code&gt;golang&lt;/code&gt; we don&#39;t
have method overload or even &lt;i&gt;constructors&lt;/i&gt; as some other language
have. This means most of the time, we end up building our data using
directly the struct expression, as below.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt; := &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;{
        &lt;span class=&#34;org-constant&#34;&gt;Name&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;carthage&#34;&lt;/span&gt;,
        &lt;span class=&#34;org-constant&#34;&gt;Hostname&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;carthage.sbr.pm&#34;&lt;/span&gt;,
        &lt;span class=&#34;org-constant&#34;&gt;Platform&lt;/span&gt;: &lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x86_64&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;:           &lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;,
        },
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Let&#39;s imagine we have a &lt;code&gt;Validate&lt;/code&gt; function that make sure the
specified &lt;code&gt;Node&lt;/code&gt; is supported on our structure. We would write some
tests that ensure that.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateLinuxIsSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&amp;amp;&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Name&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;carthage&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;Hostname&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;carthage.sbr.pm&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;Platform&lt;/span&gt;: &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                        &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x86_64&#34;&lt;/span&gt;,
                        &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;:           &lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;,
                },
        })
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; !&lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;linux should be supported, it was not&#34;&lt;/span&gt;)
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateDarwinIsNotSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&amp;amp;&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Name&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;babylon&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;Hostname&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;babylon.sbr.pm&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;Platform&lt;/span&gt;: &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                        &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x86_64&#34;&lt;/span&gt;,
                        &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;:           &lt;span class=&#34;org-string&#34;&gt;&#34;darwin&#34;&lt;/span&gt;,
                },
        })
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;darwin should not be supported, it was&#34;&lt;/span&gt;)
        }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This is quickly hard to read, there is too much noise on that
test. We setup a whole &lt;code&gt;Node&lt;/code&gt; struct, but the only thing we really
intend to test is the &lt;code&gt;Platform.OS&lt;/code&gt; part. The rest is just required
fields for the function to correctly compile and run.
&lt;/p&gt;

&lt;p&gt;
This is where test builders (and builders in general) comes into
play. In &lt;a href=&#34;http://www.growing-object-oriented-software.com/&#34;&gt;Growing Object-Oriented Software Guided by Tests&lt;/a&gt;, the
Chapter 22 &#34;Constructing Complex Test Data&#34; is exactly about that
and guide us through the why and the how of these builders. The
examples in the book are in &lt;code&gt;java&lt;/code&gt; and uses wisely the
object-oriented nature of the language. Here is an example from the
book.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-java&#34;&gt;&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;I just want an order from a customer that has no post code&lt;/span&gt;
&lt;span class=&#34;org-type&#34;&gt;Order&lt;/span&gt; &lt;span class=&#34;org-variable-name&#34;&gt;order&lt;/span&gt; = &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;anOrder&lt;/span&gt;()
    .&lt;span class=&#34;org-rainbow-identifiers-identifier-7&#34;&gt;from&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-13&#34;&gt;aCustomer&lt;/span&gt;().&lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;with&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-13&#34;&gt;anAddress&lt;/span&gt;().&lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;withNotPostCode&lt;/span&gt;()))
    .&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;build&lt;/span&gt;()
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
These builders helps &lt;b&gt;keep tests expressive&lt;/b&gt;, as it&#39;s pretty obvious
when reading it, what we want to test. They remove the &lt;b&gt;visual
noise&lt;/b&gt; you have when building an object (or a &lt;code&gt;struct{}&lt;/code&gt; in Go) and
allows you to put sane default. They also make &lt;b&gt;tests resilient to
change&lt;/b&gt;. If the structure changes, only the builder has to be
updated, not the tests depending on it. They also make default case
really simple to write, and special cases not much more complicated.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-orgff90129&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgff90129&#34;&gt;Builder in Go&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgff90129&#34;&gt;
&lt;p&gt;
The naive way to create builders in &lt;code&gt;go&lt;/code&gt; could be to create a
&lt;code&gt;builder&lt;/code&gt; struct that have methods to construct the final struct and
a &lt;code&gt;build&lt;/code&gt; method. Let&#39;s see how it looks.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;() *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &amp;amp;&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;node&lt;/span&gt;: &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;{
                        &lt;span class=&#34;org-constant&#34;&gt;Name&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;node&#34;&lt;/span&gt;,
                        &lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Other defaults&lt;/span&gt;
                },
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt; &lt;span class=&#34;org-keyword&#34;&gt;struct&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt; *&lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;Node&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt;) &lt;span class=&#34;org-function-name&#34;&gt;Build&lt;/span&gt;() *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt;) &lt;span class=&#34;org-function-name&#34;&gt;Hostname&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;hostname&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;Hostname&lt;/span&gt; = &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;hostname&lt;/span&gt;
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt;) &lt;span class=&#34;org-function-name&#34;&gt;Name&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;Name&lt;/span&gt; = &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;name&lt;/span&gt;
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt;) &lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;) *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;Platform&lt;/span&gt; = &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt;
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This looks decent, and using it is pretty straightforward. At least
it make building the &lt;code&gt;struct&lt;/code&gt; more expressive, less noisy and
resilient to change. We can update the previous test as follow.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateLinuxIsSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(&amp;amp;&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x86_64&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;:           &lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;,
        }).&lt;span class=&#34;org-function-name&#34;&gt;Build&lt;/span&gt;())
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; !&lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;linux should be supported, it was not&#34;&lt;/span&gt;)
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateDarwinIsNotSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(&amp;amp;&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x86_64&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;:           &lt;span class=&#34;org-string&#34;&gt;&#34;darwin&#34;&lt;/span&gt;,
        }).&lt;span class=&#34;org-function-name&#34;&gt;Build&lt;/span&gt;())
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;darwin should not be supported, it was&#34;&lt;/span&gt;)
        }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
There is room for improvement :
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;There is still some noise, mainly &lt;code&gt;build()&lt;/code&gt; and the platform
&lt;code&gt;struct&lt;/code&gt;, as it still shows too much.&lt;/li&gt;
&lt;li&gt;It&#39;s not that extensible yet. If you want to update the &lt;code&gt;Node&lt;/code&gt; a
certain way that the builder is not written for, you have to
update the builder.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;NodeBuilder&lt;/code&gt; struct feels a little empty, it&#39;s just there to
hold on the &lt;code&gt;Node&lt;/code&gt; being constructed until it is &lt;code&gt;build&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
One improvement we could make is to have a &lt;code&gt;Platform&lt;/code&gt; builder, even
if it&#39;s a small struct here. Let&#39;s do that in the same way we did
with &lt;code&gt;Node&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;APlatform&lt;/span&gt;() *&lt;span class=&#34;org-type&#34;&gt;PlatformBuilder&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &amp;amp;&lt;span class=&#34;org-type&#34;&gt;PlatformBuilder&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;platform&lt;/span&gt;: &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                        &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x64_86&#34;&lt;/span&gt;,
                        &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;,
                },
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;PlatformBuilder&lt;/span&gt; &lt;span class=&#34;org-keyword&#34;&gt;struct&lt;/span&gt;{
        &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt; *&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;Platform&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;PlatformBuilder&lt;/span&gt;) &lt;span class=&#34;org-function-name&#34;&gt;Build&lt;/span&gt;() *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;PlatformBuilder&lt;/span&gt;) &lt;span class=&#34;org-function-name&#34;&gt;OS&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) *&lt;span class=&#34;org-type&#34;&gt;PlatformBuilder&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;OS&lt;/span&gt; = &lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;os&lt;/span&gt;
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And our tests becomes 🐻.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateLinuxIsSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(
                &lt;span class=&#34;org-function-name&#34;&gt;APlatform&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;OS&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;).&lt;span class=&#34;org-function-name&#34;&gt;Build&lt;/span&gt;()
        ).&lt;span class=&#34;org-function-name&#34;&gt;Build&lt;/span&gt;())
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; !&lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;linux should be supported, it was not&#34;&lt;/span&gt;)
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateDarwinIsNotSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(
                &lt;span class=&#34;org-function-name&#34;&gt;APlatform&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;OS&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;darwin&#34;&lt;/span&gt;).&lt;span class=&#34;org-function-name&#34;&gt;Build&lt;/span&gt;()
        ).&lt;span class=&#34;org-function-name&#34;&gt;Build&lt;/span&gt;())
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;darwin should not be supported, it was&#34;&lt;/span&gt;)
        }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
It does not really improve the visual noise as there is now quite a
few duplication : several &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;APlatform&lt;/code&gt; inside &lt;code&gt;Platform&lt;/code&gt;, …
It is a small improvement on readability but not that much compared
to the previous one. This is were the Go language features comes
into play.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-org28e3042&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org28e3042&#34;&gt;Functional arguments to the rescue&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org28e3042&#34;&gt;
&lt;p&gt;
Go has two interesting feature that are going to be useful here.
&lt;/p&gt;

&lt;p&gt;
First, a function in Go is a type on its own and thus is considered
a &lt;i&gt;first class citizen&lt;/i&gt;. It means it&#39;s possible to pass a function
as argument, or define a variable that holds it.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;ApplyTo&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(&lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;fn&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;s&lt;/span&gt;)
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;world&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;fmt&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Sprintf&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;%s, world!&#34;&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;s&lt;/span&gt;)
}

&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Usage&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;a&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;ApplyTo&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;hello&#34;&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;world&lt;/span&gt;)
&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;a == &#34;hello, world!&#34;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The second feature that comes into play here, is the possiblity to
have &lt;i&gt;variadic&lt;/i&gt; functions. A variadic function is a function that
takes a variable number of arguments (from &lt;code&gt;0&lt;/code&gt; to any number of
argument).
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;Print&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;strs&lt;/span&gt; ...&lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;_&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;s&lt;/span&gt; := &lt;span class=&#34;org-keyword&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;strs&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;fmt&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Println&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;s&lt;/span&gt;)
        }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
As we are going to see below, combining these two feature makes our
builders pretty easy to write and to use with simple case, while
staying very customizable, even outside of the builder. This is
really well described in a talk from Dave Cheney : &lt;a href=&#34;https://www.youtube.com/watch?v=24lFtGHWxAQ&amp;amp;index=15&amp;amp;list=PLMW8Xq7bXrG58Qk-9QSy2HRh2WVeIrs7e&#34;&gt;Functional
options for friendly APIs&lt;/a&gt; (&lt;a href=&#34;https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis&#34;&gt;transcription&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
Let&#39;s apply that to our new builders.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;nodeBuilders&lt;/span&gt; ...&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(*&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;)) *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt; := &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Name&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;node&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Other defaults&lt;/span&gt;
        }

        &lt;span class=&#34;org-keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;_&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;build&lt;/span&gt; := &lt;span class=&#34;org-keyword&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;nodeBuilders&lt;/span&gt; {
                &lt;span class=&#34;org-function-name&#34;&gt;build&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt;)
        }

        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;APlatform&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;platformBuilders&lt;/span&gt; ...&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(*&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;)) *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt; := &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x64_86&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;,
        }

        &lt;span class=&#34;org-keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;_&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;build&lt;/span&gt; := &lt;span class=&#34;org-keyword&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;platformBuilders&lt;/span&gt; {
                &lt;span class=&#34;org-function-name&#34;&gt;build&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt;)
        }

        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And that is it for the actual builder code. It is &lt;b&gt;small&lt;/b&gt; and
simple, there is &lt;b&gt;no more &lt;code&gt;NodeBuilder&lt;/code&gt;&lt;/b&gt; struct, and this is highly
extensible. Let&#39;s see how to use it.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;a default node&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;node1&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;()
&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;a node with a specific Hostname&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node2&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;(&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;Hostname&lt;/span&gt; = &lt;span class=&#34;org-string&#34;&gt;&#34;custom-hostname&#34;&lt;/span&gt;
})
&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;a node with a specific name and platform&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;node3&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;(&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;Name&lt;/span&gt; = &lt;span class=&#34;org-string&#34;&gt;&#34;custom-name&#34;&lt;/span&gt;
}, &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;Platform&lt;/span&gt; = &lt;span class=&#34;org-function-name&#34;&gt;APlatform&lt;/span&gt;(&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;) {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;OS&lt;/span&gt; = &lt;span class=&#34;org-string&#34;&gt;&#34;darwin&#34;&lt;/span&gt;
        })
})
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The last step is to define some &lt;i&gt;function builder&lt;/i&gt; for common or
widely used customization, to make this &lt;b&gt;expressive&lt;/b&gt;. And let
complex, &lt;i&gt;one-time&lt;/i&gt; function builder in the end of the user. Now our
tests looks like.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateLinuxIsSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;WithAPlatform&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;Linux&lt;/span&gt;)))
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; !&lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;linux should be supported, it was not&#34;&lt;/span&gt;)
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateDarwinIsNotSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;WithAPlatform&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;Darwin&lt;/span&gt;)))
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;darwin should not be supported, it was&#34;&lt;/span&gt;)
        }
}

&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Function builders&lt;/span&gt;
&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;WithAPlatform&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;builders&lt;/span&gt; ...&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(*&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;)) &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;) {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;) {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;Platform&lt;/span&gt; = &lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;builders&lt;/span&gt;...)
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;Linux&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;OS&lt;/span&gt; = &lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;Darwin&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;OS&lt;/span&gt; = &lt;span class=&#34;org-string&#34;&gt;&#34;darwin&#34;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The intent is now clear. It&#39;s readable and still resilient to
change. The code &lt;code&gt;Node(WithPlatform(Linux))&lt;/code&gt; is easy to understand
for a human. It makes what are the &lt;i&gt;tested&lt;/i&gt; characteristics of
&lt;code&gt;struct&lt;/code&gt; pretty clear. It&#39;s easy to combine multiple builders as the
&lt;code&gt;WithPlatform&lt;/code&gt; function shows 👼. It&#39;s also easy to create a
&lt;i&gt;function builder&lt;/i&gt;, even in a different package (as long as the ways
to modify the struct are exported) and complex or &lt;i&gt;on-off&lt;/i&gt; builder
can be embedded in the function call (&lt;code&gt;Node(func(n *Node) { // …
  })&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
In summary, using these types of builder have several advantages :
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;tests are &lt;b&gt;easy to read&lt;/b&gt;, and reduce the visual noise&lt;/li&gt;
&lt;li&gt;tests are &lt;b&gt;resilient to change&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;builders are &lt;b&gt;easy to compose&lt;/b&gt; and very extensible&lt;/li&gt;
&lt;li&gt;builders could even be &lt;b&gt;shared&lt;/b&gt; with production code as there is
nothing tied to &lt;code&gt;testing&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Maven Release Gitflow</title>
      <link>http://vincent.demeester.fr/posts/2012-07-23-maven-release-gitflow/</link>
      <pubDate>Mon, 23 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2012-07-23-maven-release-gitflow/</guid>
      <description>

&lt;p&gt;I like a lot the &lt;a href=&#34;http://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;gitflow&lt;/a&gt; way of managing project.
When working on maven project, there is few great plugins that helps to get
the work done. One of them is &lt;a href=&#34;http://maven.apache.org/plugins/maven-release-plugin&#34;&gt;maven-release-plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Inspired on this &lt;a href=&#34;https://gist.github.com/1043970&#34;&gt;gist&lt;/a&gt;, I&amp;rsquo;ve come with
a cool way of doing things (let say we want to release a 0.1 version of an
artifact) :&lt;/p&gt;

&lt;h1 id=&#34;prepare-the-pom-xml&#34;&gt;Prepare the pom.xml.&lt;/h1&gt;

&lt;p&gt;It needs &lt;code&gt;&amp;lt;scm&amp;gt;&lt;/code&gt; entries, &lt;code&gt;&amp;lt;distributionManagement&amp;gt;&lt;/code&gt; entries
(to know where to deploy the release artifact) and few options for the
maven-release-plugin :&lt;/p&gt;


&lt;project&gt;

    &lt;!-- […] --&gt;
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;!-- […] --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-release-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.3.2&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;tagNameFormat&gt;v@{project.version}&lt;/tagNameFormat&gt;
                    &lt;pushChanges&gt;false&lt;/pushChanges&gt;
                    &lt;localCheckout&gt;true&lt;/localCheckout&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;!-- […] --&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
    &lt;!-- […] --&gt;

&lt;/project&gt;


&lt;p&gt;Few explanation here :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tagNameFormat&lt;/code&gt; is here to change the default tag name (which is &lt;code&gt;${project.artifactId}-${project.version}&lt;/code&gt;) to a better one.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pushChanges&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt; tells  maven-release-plugin not to push
changes (this will become useful)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;localCheckout&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; tells maven-release-plugin to clone from
local repository (not distant). This is especially useful here because we
didn&amp;rsquo;t push anything (so not setting this option would result in a failure).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;the-real-stuff&#34;&gt;The real stuff&lt;/h1&gt;

&lt;p&gt;First create a release branch from develop.&lt;/p&gt;


$ git checkout -b release/v0.1 develop


&lt;p&gt;Then run the maven release stuff.&lt;/p&gt;


$ mvn release:prepare               # change the pom, commit and tag version, and
                                    # re-change pom (by incrementing SNAPSHOT version)
$ mvn release:perform               # get the tagged version, compile and deploy


&lt;p&gt;And the real fun begins.&lt;/p&gt;


$ git checkout develop              # get back to the develop branch
$ git merge --no-ff release/v0.1    # merge the version back into develop
$ git checkout master               # go to the master branch
$ git merge --no-ff release/v0.1~1  # merge the version back into master but
                                    # the tagged version instead of the release/v0.1 HEAD
$ git branch -D release/v0.1        # Removing the release branch
$ git push --all &amp;&amp; git push --tags # Finally push everything


&lt;p&gt;The real magic here is the &lt;code&gt;git merge --no-ff release/v0.1~1&lt;/code&gt; which will
merge into master the commit before the HEAD of the branch &lt;code&gt;release/v0.1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next step would be to create a helper script that automates this and
verify that the &lt;code&gt;pom.xml&lt;/code&gt; has the right configuration options.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit 17:58&lt;/strong&gt; : You can take a look &lt;a href=&#34;https://github.com/vdemeester/java-config/blob/master/bin/mvn-release-flow&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>News</title>
      <link>http://vincent.demeester.fr/posts/2012-07-21-news/</link>
      <pubDate>Sat, 21 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2012-07-21-news/</guid>
      <description>&lt;p&gt;Je suis resté assez longtemps silencieux, à cause du boulot entre autre. Je
vais donc remédier un peu à ça en publiant un petit post &lt;em&gt;news&lt;/em&gt; :-).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Je suis fan de cyclisme. Mon vélo de course est ma seconde paire de jambes.
Enfin, le mot juste serait plutôt était. Il y a quelques semaines, en
rentrant du boulot, j&amp;rsquo;ai sentis un grosse vibration, puis plus moyen de
tourner les pédales. Intrigué, j&amp;rsquo;ai jeté un coup d&amp;rsquo;œil au vélo, et &lt;em&gt;oh rage
oh désespoir&lt;/em&gt; j&amp;rsquo;ai découvert que la &lt;em&gt;fourche arrière&lt;/em&gt; du vélo c&amp;rsquo;était tout
simplement fendue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;http://vincent.demeester.fr/images/2012/velo_casse.jpg&#34; alt=&#34;Fourche arrière du vélo&#34; title=&#34;Fourche arrière du vélo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Il ne me restait plus que mes yeux pour pleurer et mes jambes pour faire les
  7kms qui restait à effectuer jusqu&amp;rsquo;à mon appartement.&lt;/p&gt;

&lt;p&gt;Bien entendu ce n&amp;rsquo;est que matériel mais ce vélo avait une grande importance
  sentimentale : il avait mon âge et appartenait à mon père quand j&amp;rsquo;étais
  petit.&lt;/p&gt;

&lt;p&gt;Maintenant il ne reste plus qu&amp;rsquo;à sortir la carte bleue pour m&amp;rsquo;en procurer un
  nouveau…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Je suis actuellement en vacances pour deux petites semaines (ouf !). Cela me
permet, entre autre, de me réentrainer à monter des cols (vu que je suis
dans les Alpes) ; parce qu&amp;rsquo;à Bordeaux, c&amp;rsquo;est assez difficile d&amp;rsquo;en trouver.
Par contre il me reste beaucoup de boulot pour retrouver ma forme d&amp;rsquo;il
y a une dizaine d&amp;rsquo;année et de monter facilement le &lt;em&gt;Grand Colombier&lt;/em&gt; !&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Je joue pas mal avec &lt;a href=&#34;http://vaadin.com&#34;&gt;Vaadin&lt;/a&gt; en ce moment,
principalement pour le boulot. J&amp;rsquo;annonce donc deux petits projets en cours :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://vdemeester.github.com/vaadin-container-utils&#34;&gt;vaadin-container-utils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;librarie utilitaire pour la création de Container vaadin.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vdemeester.github.com/vaadin-composite-layout&#34;&gt;vaadin-composite-layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;un composant vaadin hautement flexible (mais je suis mauvais pour les
noms).&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Et &amp;ldquo;c&amp;rsquo;est tout pour le moment&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
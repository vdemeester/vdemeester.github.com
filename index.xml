<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vincent Demeester</title>
    <link>https://vincent.demeester.fr/</link>
    <description>Recent content on Vincent Demeester</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 18 Sep 2018 00:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://vincent.demeester.fr/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang testing — gotest.tools icmd</title>
      <link>https://vincent.demeester.fr/posts/2018-09-18-gotest-tools-icmd/</link>
      <pubDate>Tue, 18 Sep 2018 00:00:00 +0200</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2018-09-18-gotest-tools-icmd/</guid>
      <description>

&lt;p&gt;Let&amp;rsquo;s continue the &lt;a href=&#34;https://gotest.tools&#34;&gt;&lt;code&gt;gotest.tools&lt;/code&gt;&lt;/a&gt; serie, this time with the &lt;code&gt;icmd&lt;/code&gt; package.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Package icmd executes binaries and provides convenient assertions for testing the results.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;After filesystem operations (seen in &lt;a href=&#34;https://vincent.demeester.fr/posts/2018-09-14-gotest-tools-fs/&#34;&gt;&lt;code&gt;fs&lt;/code&gt;&lt;/a&gt;), antoher common use-case in tests is to
&lt;strong&gt;execute a command&lt;/strong&gt;. The reasons can be you&amp;rsquo;re testing the &lt;code&gt;cli&lt;/code&gt; you&amp;rsquo;re currently writing
or you need to setup something using a command line. A classic execution in a test might
lookup like the following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;echo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stout&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stdout&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Env&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;env&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Fatal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Fatalf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;expected: foo, got %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The package &lt;code&gt;icmd&lt;/code&gt; is there to ease your pain (as usual 😉) — we used &lt;em&gt;the name &lt;code&gt;icmd&lt;/code&gt;&lt;/em&gt;
instead of &lt;code&gt;cmd&lt;/code&gt; because it&amp;rsquo;s a pretty common identifier in Go source code, thus would be
really easy to &lt;em&gt;shadow&lt;/em&gt; — and have some really weird problems going on.&lt;/p&gt;

&lt;p&gt;The usual &lt;code&gt;icmd&lt;/code&gt; workflow is the following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Describe the command you want to execute using : type &lt;code&gt;Cmd&lt;/code&gt;, function &lt;code&gt;Command&lt;/code&gt; and
&lt;code&gt;CmdOp&lt;/code&gt; operators.&lt;/li&gt;
&lt;li&gt;Run it using : function &lt;code&gt;RunCmd&lt;/code&gt; or &lt;code&gt;RunCommand&lt;/code&gt; (that does 1. for you). You can also
use &lt;code&gt;StartCmd&lt;/code&gt; and &lt;code&gt;WaitOnCmd&lt;/code&gt; if you want more control on the execution workflow.&lt;/li&gt;
&lt;li&gt;Check the result using the &lt;code&gt;Assert&lt;/code&gt;, &lt;code&gt;Equal&lt;/code&gt; or &lt;code&gt;Compare&lt;/code&gt; methods attached to the
&lt;code&gt;Result&lt;/code&gt; struct that the command execution return.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;create-and-run-a-command&#34;&gt;Create and run a command&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s first dig how to create commands. In this part, the assumption here is that the
command is successful, so we&amp;rsquo;ll have &lt;code&gt;.Assert(t, icmd.Success)&lt;/code&gt; for now — we&amp;rsquo;ll learn more
about &lt;code&gt;Assert&lt;/code&gt; in the next section 👼.&lt;/p&gt;

&lt;p&gt;The simplest way to create and run a command is using &lt;code&gt;RunCommand&lt;/code&gt;, it has the same
signature as &lt;code&gt;os/exec.Command&lt;/code&gt;. A simple command execution goes as below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RunCommand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;echo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sucess&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sometimes, you need to customize the command a bit more, like adding some environment
variable. In those case, you are going to use &lt;code&gt;RunCmd&lt;/code&gt;, it takes a &lt;code&gt;Cmd&lt;/code&gt; and operators.
Let&amp;rsquo;s look at those functions.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;RunCmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cmd&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmdOperators&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CmdOp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;command&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;args&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cmd&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Cmd&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Command&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Timeout&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Duration&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Stdin&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Stdout&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Writer&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Dir&lt;/span&gt;     &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Env&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As we&amp;rsquo;ve seen &lt;a href=&#34;https://vincent.demeester.fr/posts/2017-01-01-go-testing-functionnal-builders/&#34;&gt;multiple&lt;/a&gt; &lt;a href=&#34;https://vincent.demeester.fr/posts/2018-08-16-gotest-tools-assertions/&#34;&gt;times&lt;/a&gt; &lt;a href=&#34;https://vincent.demeester.fr/posts/2018-09-14-gotest-tools-fs/&#34;&gt;before&lt;/a&gt;, it uses the &lt;em&gt;powerful&lt;/em&gt; functional arguments. At the
time I wrote this post, the &lt;code&gt;icmd&lt;/code&gt; package doesn&amp;rsquo;t contains too much &lt;code&gt;CmdOp&lt;/code&gt;&amp;nbsp;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-1&#34;&gt;&lt;a href=&#34;#fn:fn-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, so I&amp;rsquo;ll
propose two version for each example : one with &lt;code&gt;CmdOpt&lt;/code&gt; present in &lt;a href=&#34;https://github.com/gotestyourself/gotest.tools/pull/122&#34;&gt;this PR&lt;/a&gt; and one
without them.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// With
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RunCmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;sh&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;echo $FOO&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WithEnv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;FOO=bar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;BAR=baz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/tmp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WithTimeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Success&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Without
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RunCmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Cmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;sh&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;-c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;echo $FOO&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;FOO=bar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;BAR=baz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/tmp&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Success&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As usual, the intent is clear, it&amp;rsquo;s simple to read and composable (with &lt;code&gt;CmdOp&lt;/code&gt;&amp;rsquo;s).&lt;/p&gt;

&lt;h2 id=&#34;assertions&#34;&gt;Assertions&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s dig into the assertion part of &lt;code&gt;icmd&lt;/code&gt;. Running a command returns a struct
&lt;code&gt;Result&lt;/code&gt;. It has the following methods :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Assert&lt;/code&gt; compares the Result against the Expected struct, and fails the test if any of
the expectations are not met.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Compare&lt;/code&gt; compares the result to Expected and return an error if they do not match.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Equal&lt;/code&gt; compares the result to Expected. If the result doesn&amp;rsquo;t match expected
returns a formatted failure message with the command, stdout, stderr, exit code, and any
failed expectations. It returns an &lt;code&gt;assert.Comparison&lt;/code&gt; struct, that can be used by other
&lt;code&gt;gotest.tools&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Combined&lt;/code&gt; returns the stdout and stderr combined into a single string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stderr&lt;/code&gt; returns the stderr of the process as a string.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stdout&lt;/code&gt; returns the stdout of the process as a string.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When you have a result, you, most likely want to do two things :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;assert&lt;/em&gt; that the command succeed or failed with some specific values (exit code,
stderr, stdout)&lt;/li&gt;
&lt;li&gt;use the output — most likely &lt;code&gt;stdout&lt;/code&gt; but maybe &lt;code&gt;stderr&lt;/code&gt; — in the rest of the test.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As seen above, &lt;em&gt;asserting&lt;/em&gt; the command result is using the &lt;code&gt;Expected&lt;/code&gt; struct.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Expected&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;ExitCode&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;// the exit code the command returned
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;Timeout&lt;/span&gt;  &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// did it timeout ?
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;Error&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// error returned by the execution (os/exe)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;Out&lt;/span&gt;      &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// content of stdout
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;Err&lt;/span&gt;      &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// content of stderr
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Success&lt;/code&gt; is a constant that defines a success — it&amp;rsquo;s an exit code of &lt;code&gt;0&lt;/code&gt;, didn&amp;rsquo;t timeout,
no error. There is also the &lt;code&gt;None&lt;/code&gt; constant, that should be used for &lt;code&gt;Out&lt;/code&gt; or &lt;code&gt;Err&lt;/code&gt;, to
specify that we don&amp;rsquo;t want any content for those standard outputs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RunCmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/does/not/exist&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Expected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;ExitCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#34;cat: /does/not/exist: No such file or directory&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// In case of success, we may want to do something with the result
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RunCommand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/does/exist&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Success&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Read the output line by line
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scanner&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bufio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NewScanner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NewReader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scanner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// Do something with it
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the &lt;code&gt;Result&lt;/code&gt; doesn&amp;rsquo;t map the &lt;code&gt;Expected&lt;/code&gt;, a test failure will happen with a useful
message that will contains the executed command and what differs between the result and
the expectation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RunCommand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Expected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;ExitCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;101&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;Out&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#34;Something else&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;Err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;nx&#34;&gt;None&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Command:  binary arg1
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ExitCode: 99 (timeout)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Error:    exit code 99
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Stdout:   the output
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Stderr:   the stderr
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Failures:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// ExitCode was 99 expected 101
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Expected command to finish, but it hit the timeout
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Expected stdout to contain &amp;#34;Something else&amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Expected stderr to contain &amp;#34;[NOTHING]&amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;…&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, we listed &lt;code&gt;Equal&lt;/code&gt; above, that returns a &lt;code&gt;Comparison&lt;/code&gt; struct. This means we can
use it easily with the &lt;code&gt;assert&lt;/code&gt; package. As written in a &lt;a href=&#34;https://vincent.demeester.fr/posts/2018-08-16-gotest-tools-assertions/&#34;&gt;previous post (about the &lt;code&gt;assert&lt;/code&gt;
package)&lt;/a&gt;, I tend prefer to use &lt;code&gt;cmp.Comparison&lt;/code&gt;. Let&amp;rsquo;s convert the above examples using
&lt;code&gt;assert&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RunCmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/does/not/exist&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Equal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Expected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;ExitCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;      &lt;span class=&#34;s&#34;&gt;&amp;#34;cat: /does/not/exist: No such file or directory&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// In case of success, we may want to do something with the result
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RunCommand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;cat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;/does/exist&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Equal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;icmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Success&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Read the output line by line
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;scanner&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bufio&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NewScanner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;strings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NewReader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Stdout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;scanner&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Scan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// Do something with it
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion…&lt;/h2&gt;

&lt;p&gt;… that&amp;rsquo;s a wrap. The &lt;code&gt;icmd&lt;/code&gt; package allows to easily run command and describe what result
are expected of the execution, with the least noise possible. We &lt;strong&gt;use this package heavily&lt;/strong&gt;
on several &lt;code&gt;docker/*&lt;/code&gt; projects (the engine, the cli)…&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fn-1&#34;&gt;The &lt;code&gt;icmd&lt;/code&gt; package is one of the oldest &lt;code&gt;gotest.tools&lt;/code&gt; package, that comes from the &lt;a href=&#34;https://github.com/docker/docker&#34;&gt;&lt;code&gt;docker/docker&lt;/code&gt;&lt;/a&gt; initialy. We introduced these &lt;code&gt;CmdOp&lt;/code&gt; but implementations were in &lt;code&gt;docker/docker&lt;/code&gt; at first and we never really updated them.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Golang testing — gotest.tools fs</title>
      <link>https://vincent.demeester.fr/posts/2018-09-14-gotest-tools-fs/</link>
      <pubDate>Fri, 14 Sep 2018 00:00:00 +0200</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2018-09-14-gotest-tools-fs/</guid>
      <description>

&lt;p&gt;Let&amp;rsquo;s continue the &lt;a href=&#34;https://gotest.tools&#34;&gt;&lt;code&gt;gotest.tools&lt;/code&gt;&lt;/a&gt; serie, this time with the &lt;code&gt;fs&lt;/code&gt; package.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Package fs provides tools for creating temporary files, and testing the contents and structure of a directory.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This package is heavily using functional arguments (as we saw in &lt;a href=&#34;https://vincent.demeester.fr/posts/2017-01-01-go-testing-functionnal-builders/&#34;&gt;functional arguments for
wonderful builders&lt;/a&gt;). Functional arguments is, in a nutshell, a combinaison of two Go
features : &lt;em&gt;variadic&lt;/em&gt; functions (&lt;code&gt;...&lt;/code&gt; operation in a function signature) and the fact
that &lt;code&gt;func&lt;/code&gt; are &lt;em&gt;first class citizen&lt;/em&gt;. This looks more or less like that.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MyFn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ops&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Config&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Config&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// with default values
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;op&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ops&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;op&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Calling it
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;conf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MyFn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;withFoo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;withBar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;baz&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;fs&lt;/code&gt; package has too &lt;strong&gt;main&lt;/strong&gt; purpose :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;create folders and files required for testing in a simple manner&lt;/li&gt;
&lt;li&gt;compare two folders structure (and content)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;create-folder-structures&#34;&gt;Create folder structures&lt;/h2&gt;

&lt;p&gt;Sometimes, you need to create folder structures (and files) in tests. Doing &lt;code&gt;i/o&lt;/code&gt; work
takes time so try to limit the number of tests that needs to do that, especially in unit
tests. Doing it in tests adds a bit of boilerplate that could be avoid. As stated &lt;a href=&#34;https://vincent.demeester.fr/posts/2017-01-01-go-testing-functionnal-builders/&#34;&gt;before&lt;/a&gt; :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;One of the most important characteristic of a unit test (and any type of test really) is
&lt;strong&gt;readability&lt;/strong&gt;. This means it should be easy to read but most importantly it should &lt;strong&gt;clearly
show the intent&lt;/strong&gt; of the test. The setup (and cleanup) of the tests should be as small as
possible to avoid the noise.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a test you usually end up using &lt;code&gt;ioutil&lt;/code&gt; function to create what you need. This looks
somewhat like the following.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ioutil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TempDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// or using `assert.Assert`
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Fatal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Mkdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filepath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FileMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;0755&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Fatal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ioutil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WriteFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;filepath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FileMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;0777&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Fatal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;RemoveAll&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;clean&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;up&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;at&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;the&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;fs&lt;/code&gt; package intends to help reduce the noise and comes with a bunch function to create
folder structure :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;two main function &lt;code&gt;NewFile&lt;/code&gt; and &lt;code&gt;NewDir&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;a bunch of &lt;em&gt;operators&lt;/em&gt; : &lt;code&gt;WithFile&lt;/code&gt;, &lt;code&gt;WithDir&lt;/code&gt;, …&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NewDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TestingT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;prefix&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ops&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PathOp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Dir&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// …
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;NewFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TestingT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;prefix&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ops&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PathOp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// …
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;With*&lt;/code&gt; function are all satisfying the &lt;code&gt;PathOp&lt;/code&gt; interface, making &lt;code&gt;NewFile&lt;/code&gt; and
&lt;code&gt;NewDir&lt;/code&gt; extremely composable. Let&amp;rsquo;s first see how our above example would look like using
the &lt;code&gt;fs&lt;/code&gt; package, and then, we&amp;rsquo;ll look a bit more at the main &lt;code&gt;PathOp&lt;/code&gt; function…&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;dir&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;NewDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WithDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WithFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WithContent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;content&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WithMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FileMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;0777&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))),&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;dir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Remove&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s clean and simple to read. The intent is well described and there is not that much of
noise. &lt;code&gt;fs&lt;/code&gt; functions tends to have &lt;em&gt;sane&lt;/em&gt; and &lt;em&gt;safe&lt;/em&gt; defaults value (for &lt;code&gt;os.FileMode&lt;/code&gt;
for example). Let&amp;rsquo;s list the main, useful, &lt;code&gt;PathOp&lt;/code&gt; provided by &lt;code&gt;gotest.tools/fs&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WithDir&lt;/code&gt; creates a sub-directory in the directory at path.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WithFile&lt;/code&gt; creates a file in the directory at path with content.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WithSymlink&lt;/code&gt; creates a symlink in the directory which links to target. Target must be a
path relative to the directory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WithHardlink&lt;/code&gt; creates a link in the directory which links to target. Target must be a
path relative to the directory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WithContent&lt;/code&gt; and &lt;code&gt;WWithBytes&lt;/code&gt; write content to a file at Path (from a &lt;code&gt;string&lt;/code&gt; or a
&lt;code&gt;[]byte&lt;/code&gt; slice).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WithMode&lt;/code&gt; sets the file mode on the directory or file at path.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;WithTimestamps&lt;/code&gt; sets the access and modification times of the file system object at
path.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FromDir&lt;/code&gt; copies the directory tree from the source path into the new Dir. This is
pretty useful when you have a huge folder structure already present in you &lt;code&gt;testdata&lt;/code&gt;
folder or elsewhere.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AsUser&lt;/code&gt; changes ownership of the file system object at Path.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Also, note that &lt;code&gt;PathOp&lt;/code&gt; being an function type, you can provide your own implementation
for specific use-cases. Your function just has to satisfy &lt;code&gt;PathOp&lt;/code&gt; signature.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PathOp&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;compare-folder-structures&#34;&gt;Compare folder structures&lt;/h2&gt;

&lt;p&gt;Sometimes, the code you&amp;rsquo;re testing is creating a folder structure, and you would like to
be able to tests that, with the given arguments, it creates the specified structure. &lt;code&gt;fs&lt;/code&gt;
allows you to do that too.&lt;/p&gt;

&lt;p&gt;The package provides a &lt;code&gt;Equal&lt;/code&gt; function, which returns a &lt;code&gt;Comparison&lt;/code&gt;, that the &lt;a href=&#34;https://vincent.demeester.fr/posts/2018-08-16-gotest-tools-assertions/&#34;&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt;
package understand. It works by comparing a &lt;code&gt;Manifest&lt;/code&gt; type provided by the test and a
&lt;code&gt;Manifest&lt;/code&gt; representation of the specified folder.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Equal compares a directory to the expected structured described by a manifest and returns
success if they match. If they do not match the failure message will contain all the
differences between the directory structure and the expected structure defined by the
Manifest.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A &lt;code&gt;Manifest&lt;/code&gt; stores the expected structure and properties of files and directories in a
filesystem. You can create a &lt;code&gt;Manifest&lt;/code&gt; using either the functions &lt;code&gt;Expected&lt;/code&gt; or
&lt;code&gt;ManifestFromDir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re going to focus on the &lt;code&gt;Expected&lt;/code&gt; function, as &lt;code&gt;ManifestFromDir&lt;/code&gt; does pretty much
what you would expected : it takes the specified path, and returns a &lt;code&gt;Manifest&lt;/code&gt; that
represent this folder.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Expected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;TestingT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ops&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;PathOp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Manifest&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Expected&lt;/code&gt; is close to &lt;code&gt;NewDir&lt;/code&gt; function : it takes the same &lt;code&gt;PathOp&lt;/code&gt; functional
arguments. This makes creating a &lt;code&gt;Manifest&lt;/code&gt; straightforward, as it&amp;rsquo;s working the same. Any
function that satisfy &lt;code&gt;PathOp&lt;/code&gt; can be used for &lt;code&gt;Manifest&lt;/code&gt; the exact same way you&amp;rsquo;re using
them on &lt;code&gt;fs.NewDir&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is a few additional functions that are only useful with &lt;code&gt;Manifest&lt;/code&gt; :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;MatchAnyFileContent&lt;/code&gt; updates a Manifest so that the file at path may contain any content.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MatchAnyFileMode&lt;/code&gt; updates a Manifest so that the resource at path will match any file mode.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MatchContentIgnoreCarriageReturn&lt;/code&gt; ignores cariage return discrepancies.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MatchExtraFiles&lt;/code&gt; updates a Manifest to allow a directory to contain unspecified files.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;operationWhichCreatesFiles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Expected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WithFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WithBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;golden&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;one.golden&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WithMode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mo&#34;&gt;0600&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WithDir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;data&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WithFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;config&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MatchAnyFileContent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Equal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;expected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The following example compares the result of &lt;code&gt;operationWhichCreatesFiles&lt;/code&gt; to the expected
&lt;code&gt;Manifest&lt;/code&gt;. As you can see it also integrates well with other part of the &lt;code&gt;gotest.tools&lt;/code&gt;
library, with the &lt;a href=&#34;https://vincent.demeester.fr/posts/2018-09-06-gotest-tools-golden/&#34;&gt;&lt;code&gt;golden&lt;/code&gt; package&lt;/a&gt; in this example.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion…&lt;/h2&gt;

&lt;p&gt;… that&amp;rsquo;s a wrap. In my opinion, this is one the most useful package provided by
&lt;code&gt;gotest.tools&lt;/code&gt; after &lt;code&gt;assert&lt;/code&gt;. It allows to create simple or complex folder structure
without the noise that usually comes with it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang testing — gotest.tools golden</title>
      <link>https://vincent.demeester.fr/posts/2018-09-06-gotest-tools-golden/</link>
      <pubDate>Thu, 06 Sep 2018 00:00:00 +0200</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2018-09-06-gotest-tools-golden/</guid>
      <description>

&lt;p&gt;Let&amp;rsquo;s continue the &lt;a href=&#34;https://gotest.tools&#34;&gt;&lt;code&gt;gotest.tools&lt;/code&gt;&lt;/a&gt; serie, this time with the &lt;code&gt;golden&lt;/code&gt; package. This is a
&lt;a href=&#34;https://vincent.demeester.fr/posts/2017-04-22-golang-testing-golden-file/&#34;&gt;&lt;em&gt;quick follow-up&lt;/em&gt; on a previous &lt;code&gt;golden&lt;/code&gt; post&lt;/a&gt;, but focused on the &lt;code&gt;gotest.tools&lt;/code&gt;
implementation. I&amp;rsquo;m gonna be quicker, please read that one if &lt;code&gt;golden&lt;/code&gt; files is a new
concept for you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Package &lt;code&gt;golden&lt;/code&gt; provides tools for comparing large mutli-line strings.&lt;/p&gt;

&lt;p&gt;Golden files are files in the &lt;code&gt;./testdata/&lt;/code&gt; subdirectory of the package under test.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the previous article, we described the problem, and how to fix it by writing a small
helper. Well, that small helper is in &lt;code&gt;gotest.tools/golden&lt;/code&gt; now, and it has a tiny bit
more features.&lt;/p&gt;

&lt;p&gt;One of the difference between the &lt;code&gt;gotest.tools&lt;/code&gt; implementation and the previous post is
the flag name. In &lt;code&gt;gotest.tools/golden&lt;/code&gt;, the flag is &lt;code&gt;-test.update-golden&lt;/code&gt; (was just
&lt;code&gt;-test.update&lt;/code&gt; before). Just as before, if the &lt;code&gt;-test.update-golden&lt;/code&gt; flag is set then the
actual content is written to the golden file, before reading it and comparing.&lt;/p&gt;

&lt;p&gt;There is two ways to use the &lt;code&gt;golden&lt;/code&gt; package:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;on it&amp;rsquo;s own, using &lt;code&gt;golden.Assert&lt;/code&gt; or &lt;code&gt;golden.AssertBytes&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;as a &lt;code&gt;cmp.Comparison&lt;/code&gt;, with &lt;code&gt;golden.String&lt;/code&gt; or &lt;code&gt;golden.Bytes&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;assert-and-assertbytes&#34;&gt;&lt;code&gt;Assert&lt;/code&gt; and &lt;code&gt;AssertBytes&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Using &lt;code&gt;Assert&lt;/code&gt; functions should be straightforward. Both &lt;code&gt;Assert&lt;/code&gt; function compares the
actual content to the expected content in the golden file and returns whether the
assertion was successful (true) or not (false).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Assert&lt;/code&gt; uses string. Note that this one &lt;strong&gt;removes carriage return&lt;/strong&gt; before comparing to
depend as less as possible of the system (&lt;code&gt;\n&lt;/code&gt; vs &lt;code&gt;\r\n&lt;/code&gt; 😅)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AssertBytes&lt;/code&gt; uses raw data (in the form of &lt;code&gt;[]byte&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;golden&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo-content.golden&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Could also be used to check some binary format
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;golden&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;AssertBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo-content.golden&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;bytes-and-string&#34;&gt;&lt;code&gt;Bytes&lt;/code&gt; and &lt;code&gt;String&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;As written in a &lt;a href=&#34;https://vincent.demeester.fr/posts/2018-08-16-gotest-tools-assertions/&#34;&gt;previous post (about the &lt;code&gt;assert&lt;/code&gt; package)&lt;/a&gt;, I prefer to use &lt;code&gt;cmp.Comparison&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;All those helper functions have a equivalent function in the &lt;code&gt;cmp&lt;/code&gt; package that returns a
&lt;code&gt;Comparison&lt;/code&gt;. I, personally, prefer to use &lt;code&gt;assert.Check&lt;/code&gt; or &lt;code&gt;assert.Assert&lt;/code&gt; in
combination with &lt;code&gt;cmp.Comparison&lt;/code&gt; as it allows me to write all my assertions the same way,
with built-ins comparison or with my own — i.e. &lt;code&gt;assert.Assert(t, is.Equal(…), &amp;quot;message&amp;quot;&lt;/code&gt;
or &lt;code&gt;assert.Assert(t, stackIsUp(c, time…), &amp;quot;another message&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;golden&lt;/code&gt; package gives us that too, in the form of &lt;code&gt;Bytes&lt;/code&gt; and &lt;code&gt;String&lt;/code&gt;. Using the
&lt;code&gt;assert.Check&lt;/code&gt; or &lt;code&gt;assert.Assert&lt;/code&gt; functions with those is equivalent to their &lt;em&gt;helper&lt;/em&gt;
counter-part &lt;code&gt;golden.Assert&lt;/code&gt; and &lt;code&gt;golden.AssertBytes&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;golden&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo-content.golden&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Could also be used to check some binary format
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;golden&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Bytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo-content.golden&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion…&lt;/h2&gt;

&lt;p&gt;… that&amp;rsquo;s a wrap. As for &lt;a href=&#34;https://vincent.demeester.fr/posts/2018-09-01-gotest-tools-skip/&#34;&gt;&lt;code&gt;skip&lt;/code&gt;&lt;/a&gt;, this is a small package, so the post was going to be
quick. &lt;code&gt;golden&lt;/code&gt; package just solve a specific problem (read &lt;a href=&#34;https://vincent.demeester.fr/posts/2017-04-22-golang-testing-golden-file/&#34;&gt;Golang testing — golden file&lt;/a&gt;)
in a simple way.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang testing — gotest.tools skip</title>
      <link>https://vincent.demeester.fr/posts/2018-09-01-gotest-tools-skip/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0200</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2018-09-01-gotest-tools-skip/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s continue the &lt;a href=&#34;https://gotest.tools&#34;&gt;&lt;code&gt;gotest.tools&lt;/code&gt;&lt;/a&gt; serie, this time with the &lt;code&gt;skip&lt;/code&gt; package. This is a
really simple one so this should be quick.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;skip&lt;/code&gt; provides functions for skipping a test and printing the source code of the
condition used to skip the test.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The package consists of only one function : &lt;code&gt;If&lt;/code&gt;. The idea comes mainly from
&lt;a href=&#34;https://github.com/docker/docker&#34;&gt;&lt;code&gt;docker/docker&lt;/code&gt;&lt;/a&gt; integration test suite, where we wanted to skip some test (or test suites)
given different context. By context I mean things like the system we are running on
(&lt;code&gt;Windows&lt;/code&gt;, &lt;code&gt;Linux&lt;/code&gt;, …) or the capabilities of the running kernel or node (is &lt;code&gt;apparmor&lt;/code&gt;
available or not on the current machine).&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;If&lt;/code&gt; method takes a &lt;code&gt;testing.T&lt;/code&gt; pointer and either a boolean, a function that
returns a boolean, &lt;strong&gt;or&lt;/strong&gt; an expression.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// boolean
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   --- SKIP: TestName (0.00s)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//           skip.go:19: MissingFeature
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MissingFeature&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;skip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;If&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MissingFeature&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// function
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   --- SKIP: TestName (0.00s)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//           skip.go:19: !IsExperimentalDaemon(dockerClient): daemon is not experimental
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;skip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;If&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;IsExperimentalDaemon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;dockerClient&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;daemon is not experimental&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// expression
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//   --- SKIP: TestName (0.00s)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//           skip.go:19: apiVersion &amp;lt; version(&amp;#34;v1.24&amp;#34;)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;skip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;If&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;apiVersion&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;v1.24&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is few elements to note though :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This package (as other parts of the &lt;code&gt;gotest.tools&lt;/code&gt; packages), will try to look at source
files to display the expression used (same goes for &lt;code&gt;assert&lt;/code&gt;). This is usually not a
problem because you run tests where the source code is. &lt;strong&gt;However&lt;/strong&gt;, in the cases you
generate a test binary to be executed later (à-la &lt;code&gt;kubernetes&lt;/code&gt; or other projects), this
can display a weird error message if the sources are not available… You shouldn&amp;rsquo;t be
worried too much about it, but it&amp;rsquo;s better if you know :)&lt;/li&gt;
&lt;li&gt;The main reason to use &lt;code&gt;skip.If&lt;/code&gt; is mainly for new contributors to get in quickly,
&lt;strong&gt;reducing potential friction of them running the tests on their environment&lt;/strong&gt;. The more
the tests are written in a way they explicitely declare their requirements (and skipped
if the environment does not meet those), the easier it makes contributors run your
tests. &lt;strong&gt;But&lt;/strong&gt;, this also means, you should try to measure the skipped tests on your
continuous integration system to make sure you run all of them eventually… otherwise
it&amp;rsquo;s dead code. &lt;em&gt;But more on that in later posts 😉&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s all for today folks, told you that was going to be quick.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang testing — gotest.tools assertions</title>
      <link>https://vincent.demeester.fr/posts/2018-08-16-gotest-tools-assertions/</link>
      <pubDate>Thu, 16 Aug 2018 00:00:00 +0200</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2018-08-16-gotest-tools-assertions/</guid>
      <description>

&lt;p&gt;Let&amp;rsquo;s take a closer look at &lt;a href=&#34;https://gotest.tools&#34;&gt;&lt;code&gt;gotest.tools&lt;/code&gt;&lt;/a&gt; assertions packages. This is mainly about &lt;code&gt;assert&lt;/code&gt;, &lt;code&gt;assert/cmp&lt;/code&gt; and
&lt;code&gt;assert/opt&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Package assert provides assertions for comparing expected values to actual values. When assertion fails a helpful error
message is printed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There is two main functions (&lt;code&gt;Assert&lt;/code&gt; and &lt;code&gt;Check&lt;/code&gt;) and some helpers (like &lt;code&gt;NilError&lt;/code&gt;, …). They all take a &lt;code&gt;*testing.T&lt;/code&gt; as
a first argument, pretty common across testing Go libraries. Let&amp;rsquo;s dive into those !&lt;/p&gt;

&lt;h2 id=&#34;assert-and-check&#34;&gt;&lt;code&gt;Assert&lt;/code&gt; and &lt;code&gt;Check&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Both those functions accept a &lt;code&gt;Comparison&lt;/code&gt; (we&amp;rsquo;ll check what it is later on) and fail the test when that comparison
fails. The one difference is that &lt;code&gt;Assert&lt;/code&gt; will end the test execution at immediately whereas &lt;code&gt;Check&lt;/code&gt; will fail the test
and proceed with the rest of the test case. This is similar to &lt;code&gt;FailNow&lt;/code&gt; and &lt;code&gt;Fail&lt;/code&gt; from the standard library
&lt;code&gt;testing&lt;/code&gt;. Both have their use cases.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll Use &lt;code&gt;Assert&lt;/code&gt; for the rest of the section but any example here would work with &lt;code&gt;Check&lt;/code&gt; too. When we said
&lt;code&gt;Comparison&lt;/code&gt; above, it&amp;rsquo;s mainly the &lt;a href=&#34;https://godoc.org/gotest.tools/assert#BoolOrComparison&#34;&gt;BoolOrComparison&lt;/a&gt; interface — it can either be a boolean expression, or a
&lt;a href=&#34;https://godoc.org/gotest.tools/assert/cmp#Comparison&#34;&gt;cmp.Comparison&lt;/a&gt; type. &lt;code&gt;Assert&lt;/code&gt; and &lt;code&gt;Check&lt;/code&gt; code will be &lt;em&gt;smart&lt;/em&gt; enough to detect which one it is.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ok&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;IsBar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So far not anything extra-ordinary. Let&amp;rsquo;s first look at some more &lt;em&gt;helper&lt;/em&gt; functions in the &lt;code&gt;assert&lt;/code&gt; package and quickly
dive a bit deeper with &lt;code&gt;Comparison&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;more-assert-helpers&#34;&gt;More &lt;code&gt;assert&lt;/code&gt; helpers&lt;/h2&gt;

&lt;p&gt;The additional helper functions are the following&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Equal&lt;/code&gt; uses the &lt;code&gt;==&lt;/code&gt; operator to assert two values are equal.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DeepEqual&lt;/code&gt; uses &lt;code&gt;google/go-cmp&lt;/code&gt; to assert two values are equal (it&amp;rsquo;s &lt;em&gt;close&lt;/em&gt; to &lt;code&gt;reflect.DeepEqual&lt;/code&gt; but not
quite). We&amp;rsquo;ll detail a bit more the &lt;em&gt;options&lt;/em&gt; part of this function with &lt;code&gt;cmp.DeepEqual&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Error&lt;/code&gt; fails if the error is &lt;code&gt;nil&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; the error message is not the expected one.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ErrorContains&lt;/code&gt; fails if the error is &lt;code&gt;nil&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; the error message does not contain the expected substring.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ErrorType&lt;/code&gt; fails if the error is &lt;code&gt;nil&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; the error type is not the expected type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;NilError&lt;/code&gt; fails if the error is not &lt;code&gt;nil&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All those helper functions have a equivalent function in the &lt;code&gt;cmp&lt;/code&gt; package that returns a &lt;code&gt;Comparison&lt;/code&gt;. I, personally,
prefer to use &lt;code&gt;assert.Check&lt;/code&gt; or &lt;code&gt;assert.Assert&lt;/code&gt; in combination with &lt;code&gt;cmp.Comparison&lt;/code&gt; as it allows me to write all my
assertions the same way, with built-ins comparison or with my own — i.e. &lt;code&gt;assert.Assert(t, is.Equal(…), &amp;quot;message&amp;quot;&lt;/code&gt; or
&lt;code&gt;assert.Assert(t, stackIsUp(c, time…), &amp;quot;another message&amp;quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;cmp-dot-comparison&#34;&gt;&lt;code&gt;cmp.Comparison&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;This is where it get really interesting, &lt;code&gt;gotest.tools&lt;/code&gt; tries to make it as easy as possible for you to create
appropriate comparison — making you test readable as much as possible.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look a bit at the &lt;code&gt;cmp.Comparison&lt;/code&gt; type.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Comparison&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It&amp;rsquo;s just a function that returns a &lt;code&gt;cmp.Result&lt;/code&gt;, so let&amp;rsquo;s look at &lt;code&gt;cmp.Result&lt;/code&gt; definition.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Success&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Result is an &lt;code&gt;interface&lt;/code&gt;, thus any &lt;em&gt;struct&lt;/em&gt; that provide a function &lt;code&gt;Success&lt;/code&gt; that returns a &lt;code&gt;bool&lt;/code&gt; can be used as a
comparison result, making it really easy to use in your code. There is also existing type of result to make it even
quicker to write your own comparison.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ResultSuccess&lt;/code&gt; is a constant which is returned to indicate success.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ResultFailure&lt;/code&gt; and &lt;code&gt;ResultFailureTemplate&lt;/code&gt; return a failed Result with a failure message.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ResultFromError&lt;/code&gt; returns &lt;code&gt;ResultSuccess&lt;/code&gt; if &lt;code&gt;err&lt;/code&gt; is nil. Otherwise &lt;code&gt;ResultFailure&lt;/code&gt; is returned with the error
message as the failure message. It works a bit like the &lt;code&gt;errors.Wrap&lt;/code&gt; function of the &lt;a href=&#34;https://github.com/pkg/errors&#34;&gt;&lt;code&gt;github.com/pkgs/errors&lt;/code&gt;&lt;/a&gt;
package.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;code&gt;cmp&lt;/code&gt; package comes with a few defined comparison that, we think, should cover a high number of use-cases. Let&amp;rsquo;s
look at them.&lt;/p&gt;

&lt;h3 id=&#34;equality-with-equal-and-deepequal&#34;&gt;Equality with &lt;code&gt;Equal&lt;/code&gt; and &lt;code&gt;DeepEqual&lt;/code&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Equal uses the == operator to assert two values are equal and fails the test if they are not equal.&lt;/p&gt;

&lt;p&gt;If the comparison fails Equal will use the variable names for x and y as part of the failure message to identify the
actual and expected values.&lt;/p&gt;

&lt;p&gt;If either x or y are a multi-line string the failure message will include a unified diff of the two values. If the
values only differ by whitespace the unified diff will be augmented by replacing whitespace characters with visible
characters to identify the whitespace difference.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On the other hand…&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DeepEqual uses google/go-cmp (&lt;a href=&#34;http://bit.do/go-cmp&#34;&gt;http://bit.do/go-cmp&lt;/a&gt;) to assert two values are equal and fails the test if they are not
equal.&lt;/p&gt;

&lt;p&gt;Package &lt;a href=&#34;https://godoc.org/gotest.tools/assert/opt&#34;&gt;https://godoc.org/gotest.tools/assert/opt&lt;/a&gt; provides some additional commonly used Options.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using one or the other is as simple as : if you wrote your &lt;code&gt;if&lt;/code&gt; with &lt;code&gt;==&lt;/code&gt; then use &lt;code&gt;Equal&lt;/code&gt;, otherwise use &lt;code&gt;DeepEqual&lt;/code&gt;.
&lt;code&gt;DeepEqual&lt;/code&gt; (and usually &lt;code&gt;reflect.DeepEqual&lt;/code&gt;) is used when you want to compare anything more complex than primitive
types. One advantage of using &lt;code&gt;cmp.DeepEqual&lt;/code&gt; over &lt;code&gt;reflect.DeepEqual&lt;/code&gt; (in an if), is that you get a well crafted
message that shows the diff between the expected and the actual structs compared – and you can pass options to it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DeepEqual&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// Will print something like
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// --- result
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// +++ exp
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// {[]string}[0]:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//         -: &amp;#34;a&amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//         +: &amp;#34;b&amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// {[]string}[1]:
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//         -: &amp;#34;b&amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;//         +: &amp;#34;a&amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;someType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;with&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;someType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;with&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// the following will succeed as foo and bar are _DeepEqual_
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;DeepEqual&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When using &lt;code&gt;DeepEqual&lt;/code&gt;, you may end up with really weird behavior(s). You may want to ignore some fields, or consider
&lt;code&gt;nil&lt;/code&gt; slice or map the same as empty ones ; or more common, your &lt;em&gt;struct&lt;/em&gt; contains some unexported fields that you
cannot use when comparing (as they are not exported 😓). In those case, you can use &lt;code&gt;go-cmp&lt;/code&gt; options.&lt;/p&gt;

&lt;p&gt;Some existing one are :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/google/go-cmp/cmp/cmpopts#EquateEmpty&#34;&gt;&lt;code&gt;EquateEmpty&lt;/code&gt;&lt;/a&gt; returns a Comparer option that determines all maps and slices with a length of zero to be equal,
regardless of whether they are nil.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/google/go-cmp/cmp/cmpopts#IgnoreFields&#34;&gt;&lt;code&gt;IgnoreFields&lt;/code&gt;&lt;/a&gt; returns an Option that ignores exported fields of the given names on a single struct type. The struct
type is specified by passing in a value of that type.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/google/go-cmp/cmp/cmpopts#IgnoreUnexported&#34;&gt;&lt;code&gt;IgnoreUnexported&lt;/code&gt;&lt;/a&gt; returns an Option that only ignores the immediate unexported fields of a struct, including anonymous
fields of unexported types.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/google/go-cmp/cmp/cmpopts#SortSlices&#34;&gt;&lt;code&gt;SortSlices&lt;/code&gt;&lt;/a&gt; returns a Transformer option that sorts all &lt;code&gt;[]V&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;… and &lt;a href=&#34;https://godoc.org/github.com/google/go-cmp/cmp/cmpopts&#34;&gt;more&lt;/a&gt; 👼&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;gotest.tools&lt;/code&gt; also defines some &lt;strong&gt;and&lt;/strong&gt; you can define yours ! As an example, &lt;code&gt;gotest.tools&lt;/code&gt; defines &lt;code&gt;TimeWithThreshold&lt;/code&gt;
and &lt;code&gt;DurationWithThreshold&lt;/code&gt; that allows to not fails if the time (or duration) is not exactly the same but in the
specified threshold we specified. Here is the code for &lt;code&gt;DurationWithThreshold&lt;/code&gt; for inspiration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// DurationWithThreshold returns a gocmp.Comparer for comparing time.Duration. The
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// Comparer returns true if the difference between the two Duration values is
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// within the threshold and neither value is zero.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;DurationWithThreshold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;threshold&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gocmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Option&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gocmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Comparer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;cmpDuration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;threshold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmpDuration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;threshold&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Duration&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;delta&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;delta&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;threshold&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;delta&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;threshold&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another good example for those options is when you want to skip some field. In &lt;a href=&#34;https://github.com/docker/docker&#34;&gt;&lt;code&gt;docker/docker&lt;/code&gt;&lt;/a&gt; we want to be able to
easily check for equality between two service specs, but those might have different &lt;code&gt;CreatedAt&lt;/code&gt; and &lt;code&gt;UpdatedAt&lt;/code&gt; values
that we usually don&amp;rsquo;t care about – what we want is to make sure it happens in the past 20 seconds. You can easily define
an option for that.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmpServiceOpts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Option&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;kd&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;threshold&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Second&lt;/span&gt;

	&lt;span class=&#34;c1&#34;&gt;// Apply withinThreshold only for the following fields
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;metaTimeFields&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Meta.CreatedAt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Meta.UpdatedAt&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// have a 20s threshold for the time value that will be passed
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;nx&#34;&gt;withinThreshold&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Comparer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;delta&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;delta&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;threshold&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;delta&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;threshold&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;

	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FilterPath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;metaTimeFields&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;withinThreshold&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I recommend you look at the &lt;a href=&#34;https://godoc.org/gotest.tools/assert/opt&#34;&gt;gotest.tools/assert/opt&lt;/a&gt; documentation to see which one are defined and how to use them.&lt;/p&gt;

&lt;h3 id=&#34;errors-with-error-errorcontains-and-errortype&#34;&gt;Errors with &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;ErrorContains&lt;/code&gt; and &lt;code&gt;ErrorType&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Checking for errors is &lt;strong&gt;very common&lt;/strong&gt; in Go, having &lt;code&gt;Comparison&lt;/code&gt; function for it was a requirement.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Error&lt;/code&gt; fails if the error is &lt;code&gt;nil&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; the error message is not the expected one.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ErrorContains&lt;/code&gt; fails if the error is &lt;code&gt;nil&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; the error message does not contain the expected substring.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ErrorType&lt;/code&gt; fails if the error is &lt;code&gt;nil&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; the error type is not the expected type.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;rsquo;s first look at the most used : &lt;code&gt;Error&lt;/code&gt; and &lt;code&gt;ErrorContains&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// will fail with : expected an error, got nil
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;message in a bottle&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;errors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Wrap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;errors&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;New&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;other&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;wrapped&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// will fail with : expected error &amp;#34;other&amp;#34;, got &amp;#34;wrapped: other&amp;#34;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;other&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// will succeed
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ErrorContains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;other&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see &lt;code&gt;ErrorContains&lt;/code&gt; is especially useful when working with &lt;em&gt;wrapped&lt;/em&gt; errors.
Now let&amp;rsquo;s look at &lt;code&gt;ErrorType&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// will fail with : error is nil, not StubError
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ErrorType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;StubError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}))&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;StubError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// will succeed
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ErrorType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;StubError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Note that it also work with a function returning an error
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ErrorType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;StubError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;bonus-with-panics&#34;&gt;Bonus with &lt;code&gt;Panics&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Sometimes, a code is supposed to &lt;em&gt;panic&lt;/em&gt;, see &lt;a href=&#34;https://golang.org/doc/effective_go.html#panic&#34;&gt;Effective Go (#Panic)&lt;/a&gt; for more information. And thus, you may want to make
sure you&amp;rsquo;re code panics in such cases. It&amp;rsquo;s always a bit tricky to test a code that panic as you have to use a deferred
function to recover the panic — but then if the panic doesn&amp;rsquo;t happen how do you fail the test ?&lt;/p&gt;

&lt;p&gt;This is where &lt;code&gt;Panics&lt;/code&gt; comes handy.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;shouldPanic&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;shouldPanic&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nb&#34;&gt;panic&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;booooooooooh&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;// don&amp;#39;t worry, be happy
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// will fail with : did not panic
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Panics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// will succeed
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Panics&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;miscellaneous-with-contains-len-and-nil&#34;&gt;Miscellaneous with &lt;code&gt;Contains&lt;/code&gt;, &lt;code&gt;Len&lt;/code&gt; and &lt;code&gt;Nil&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;Those last three &lt;em&gt;built-in&lt;/em&gt; &lt;code&gt;Comparison&lt;/code&gt; are pretty straightforward.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Contains&lt;/code&gt; succeeds if item is in collection. Collection may be a string, map, slice, or array.&lt;/p&gt;

&lt;p&gt;If collection is a string, item must also be a string, and is compared using &lt;code&gt;strings.Contains()&lt;/code&gt;. If collection is a
Map, contains will succeed if item is a key in the map. If collection is a slice or array, item is compared to each
item in the sequence using &lt;code&gt;=reflect.DeepEqual()=&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Len&lt;/code&gt; succeeds if the sequence has the expected length.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Nil&lt;/code&gt; succeeds if obj is a nil interface, pointer, or function.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Contains works on string, map, slice or arrays
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;foobar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Contains&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Len also works on string, map, slice or arrays
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;foobar&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;c&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// Nil
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MyStruc&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Nil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But let&amp;rsquo;s not waste more time and let&amp;rsquo;s see how to write our own &lt;code&gt;Comparison&lt;/code&gt; !&lt;/p&gt;

&lt;h3 id=&#34;write-your-own-comparison&#34;&gt;Write your own &lt;code&gt;Comparison&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;One of the main aspect of &lt;code&gt;gotest.tools/assert&lt;/code&gt; is to make it easy for developer to write as less boilerplate code as
possible while writing tests. Writing your own &lt;code&gt;Comparison&lt;/code&gt; allows you to write a well named function that will be easy
to read and that can be re-used across your tests.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s look back at the &lt;code&gt;cmp.Comparison&lt;/code&gt; and &lt;code&gt;cmp.Result&lt;/code&gt; types.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Comparison&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;Success&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A &lt;code&gt;Comparison&lt;/code&gt; for &lt;code&gt;assert.Check&lt;/code&gt; or &lt;code&gt;assert.Check&lt;/code&gt; is a function that return a &lt;code&gt;Result&lt;/code&gt;, it&amp;rsquo;s pretty straightforward to
implement, especially with &lt;code&gt;cmp.ResultSuccess&lt;/code&gt; and &lt;code&gt;cmp.ResultFailure(…)&lt;/code&gt; (as seen previously).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;regexPattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Comparison&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;re&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;regexp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MustCompile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;re&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;MatchString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ResultSuccess&lt;/span&gt;
		&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cmp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ResultFailure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
			&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%q did not match pattern %q&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// To use it
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;assert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Check&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;regexPattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;12345.34&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;`\d+.\d\d`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, it&amp;rsquo;s pretty easy to implement, and you can do quite a lot in there easily. If a function call returns an
error inside of your &lt;code&gt;Comparison&lt;/code&gt; function, you can use &lt;code&gt;cmp.ResultFromError&lt;/code&gt; for example. Having something like
&lt;code&gt;assert.Check(t, isMyServerUp(&amp;quot;:8080&amp;quot;))&lt;/code&gt; is way more readable than a 30-line of code to check it.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion…&lt;/h2&gt;

&lt;p&gt;… and that&amp;rsquo;s a wrap. We only looked at the &lt;code&gt;assert&lt;/code&gt; package of &lt;a href=&#34;https://gotest.tools&#34;&gt;&lt;code&gt;gotest.tools&lt;/code&gt;&lt;/a&gt; so far, but it&amp;rsquo;s already quite a bit to process.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ve seen :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the main functions provided by this package : &lt;code&gt;assert.Assert&lt;/code&gt; and &lt;code&gt;assert.Check&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;some helper functions like &lt;code&gt;assert.NilError&lt;/code&gt;, …&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;assert/cmp&lt;/code&gt;, and &lt;code&gt;assert/opt&lt;/code&gt; sub-package that allows you to write more custom &lt;code&gt;Comparison&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next time, we&amp;rsquo;ll look at the &lt;code&gt;skip&lt;/code&gt; package, that is a really simple wrapper on top of &lt;code&gt;testing.Skip&lt;/code&gt; function.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang testing — gotest.tools introduction</title>
      <link>https://vincent.demeester.fr/posts/2018-07-28-gotest-tools-intro/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0200</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2018-07-28-gotest-tools-intro/</guid>
      <description>&lt;p&gt;I already wrote 2 previous posts about golang and testing. It&amp;rsquo;s something I care deeply about and I wanted to continue
writing about it. It took me a bit more time than I thought, but getting back to it. Since the &lt;a href=&#34;http://vincent.demeester.fr/posts/2017-04-22-golang-testing-golden-file/&#34;&gt;last post&lt;/a&gt;, Daniel Nephin
and I worked (but mainly Daniel 🤗) on bootstrapping a testing helper library.&lt;/p&gt;

&lt;p&gt;Let me introduce it to you this library : &lt;a href=&#34;https://gotest.tools&#34;&gt;&lt;code&gt;gotest.tools&lt;/code&gt;&lt;/a&gt;. As described in the &lt;a href=&#34;https://godoc.org/gotest.tools&#34;&gt;godoc&lt;/a&gt; package comment, &lt;code&gt;gotest.tools&lt;/code&gt; is a
collection of packages to augment &lt;code&gt;testing&lt;/code&gt; and support common patterns. It&amp;rsquo;s an enhanced and growing version of the
initial helpers we (the docker/moby maintainers) wrote initially in &lt;a href=&#34;https://github.com/docker/docker&#34;&gt;&lt;code&gt;docker/docker&lt;/code&gt;&lt;/a&gt; repository. We are using in quite some
project here at &lt;a href=&#34;https://github.com&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is a bunch of packages that will all have their own post (linked here when available) :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://vincent.demeester.fr/posts/2018-08-16-gotest-tools-assertions/&#34;&gt;&lt;code&gt;assert&lt;/code&gt;&lt;/a&gt; (with &lt;code&gt;assert/cmp&lt;/code&gt; and &lt;code&gt;assert/opt&lt;/code&gt;) that provides assertions for comparing expected values to actual values.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;env&lt;/code&gt; that provides functions to test code that read environment variable or the current working directory.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vincent.demeester.fr/posts/2018-09-14-gotest-tools-fs/&#34;&gt;&lt;code&gt;fs&lt;/code&gt;&lt;/a&gt; that provides tools for creating temporary files, and testing the contents and structure of a directory.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vincent.demeester.fr/posts/2018-09-06-gotest-tools-golden/&#34;&gt;&lt;code&gt;golden&lt;/code&gt;&lt;/a&gt; that provides tools for comparing large multi-line strings.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vincent.demeester.fr/posts/2018-09-18-gotest-tools-icmd/&#34;&gt;&lt;code&gt;icmd&lt;/code&gt;&lt;/a&gt; that executes binaries and provides convenient assertions for testing the results.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;poll&lt;/code&gt; that provides tools for testing asynchronous code.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://vincent.demeester.fr/posts/2018-09-01-gotest-tools-skip/&#34;&gt;&lt;code&gt;skip&lt;/code&gt;&lt;/a&gt; that provides functions for skipping a test and printing the source code of the condition used to skip the test.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is also experimental package, using the &lt;code&gt;x&lt;/code&gt; notation (as the golang team uses, for example with &lt;code&gt;golang.org/x/sync&lt;/code&gt;) :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x/subtest&lt;/code&gt; that provides a &lt;code&gt;TestContext&lt;/code&gt; to subtests which handles cleanup and provides a &lt;code&gt;testing.TB&lt;/code&gt; and &lt;code&gt;context.Context&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is already some good &lt;code&gt;testing&lt;/code&gt; helpers in the Go ecosystem : &lt;a href=&#34;https://github.com/stretchr/testify&#34;&gt;&lt;code&gt;testify&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;http://labix.org/gocheck&#34;&gt;&lt;code&gt;gocheck&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/onsi/ginkgo&#34;&gt;&lt;code&gt;ginkgo&lt;/code&gt;&lt;/a&gt; and a lot more — so
why create a new one ? There is multiple reason for it, most of them can be seen in the following &lt;a href=&#34;https://github.com/gotestyourself/gotest.tools/issues/49#issuecomment-362436026&#34;&gt;GitHub issue&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/dnephin/&#34;&gt;Daniel&lt;/a&gt; also wrote a very useful converter if your code base is currently using &lt;code&gt;testify&lt;/code&gt; : &lt;code&gt;gty-migrate-from-testify&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;$ go get -u gotest.tools/assert/cmd/gty-migrate-from-testify
&lt;span class=&#34;c1&#34;&gt;# […]
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ go list &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	 -f &lt;span class=&#34;s1&#34;&gt;&amp;#39;{{.ImportPath}} {{if .XTestGoFiles}}{{&amp;#34;\n&amp;#34;}}{{.ImportPath}}_test{{end}}&amp;#39;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;	 ./... &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; xargs gty-migrate-from-testify&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the next post, let&amp;rsquo;s dig into the assertion part of the library, package &lt;code&gt;assert&lt;/code&gt; 👼.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Golang testing — golden file</title>
      <link>https://vincent.demeester.fr/posts/2017-04-22-golang-testing-golden-file/</link>
      <pubDate>Sat, 22 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2017-04-22-golang-testing-golden-file/</guid>
      <description>&lt;p&gt;
Tests are all about &lt;b&gt;maintainability&lt;/b&gt; and &lt;b&gt;readability&lt;/b&gt;. You want the
least visual noise possible and it should not be a hassle to
maintain. When testing functions that output a long of string, in case
of a command line output testing, readability and maintainance tend to
be tricky to achieve.
&lt;/p&gt;


&lt;div id=&#34;outline-container-org2f1fc39&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org2f1fc39&#34;&gt;The problem&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org2f1fc39&#34;&gt;
&lt;p&gt;
As an example let&#39;s say we want to test out the output of a command
that displays a list as a table. The output would look like the
following:
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-sh&#34;&gt;&lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;ID:&lt;/span&gt;                     &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;nodeID&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;Name:&lt;/span&gt;                   &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;defaultNodeName&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;Hostname:&lt;/span&gt;               &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;defaultNodeHostname&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;Joined&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;at:&lt;/span&gt;              &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;2009-11-10&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;23:00:00&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-13&#34;&gt;+0000&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;utc&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;Status:&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;State:&lt;/span&gt;                 &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;Ready&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;Availability:&lt;/span&gt;          &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;Active&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;Address:&lt;/span&gt;               &lt;span class=&#34;org-rainbow-identifiers-identifier-13&#34;&gt;127.0.0.1&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;Manager&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;Status:&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;Address:&lt;/span&gt;               &lt;span class=&#34;org-rainbow-identifiers-identifier-13&#34;&gt;127.0.0.1&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;Raft&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;Status:&lt;/span&gt;           &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;Reachable&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;Leader:&lt;/span&gt;                &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;No&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;Platform:&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;Operating&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-13&#34;&gt;System:&lt;/span&gt;      &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;linux&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;Architecture:&lt;/span&gt;          &lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;x86_64&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;Resources:&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;CPUs:&lt;/span&gt;                  &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;0&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;Memory:&lt;/span&gt;                &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;20&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;MiB&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;Plugins:&lt;/span&gt;
  &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;Network:&lt;/span&gt;              &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;bridge,&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;overlay&lt;/span&gt;
  &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;Volume:&lt;/span&gt;               &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;local&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;Engine&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;Version:&lt;/span&gt;         &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;1.13.0&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;Engine&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;Labels:&lt;/span&gt;
 &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;org-variable-name&#34;&gt;engine&lt;/span&gt; = &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;label&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Let&#39;s see how we would test that output, naively.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestNodeInspectPretty&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;expected&lt;/span&gt; := &lt;span class=&#34;org-string&#34;&gt;```&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;ID:                     nodeID&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Name:                   defaultNodeName&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Hostname:               defaultNodeHostname&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Joined at:              2009-11-10 23:00:00 +0000 utc&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Status:&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; State:                 Ready&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; Availability:          Active&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; Address:               127.0.0.1&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Manager Status:&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; Address:               127.0.0.1&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; Raft Status:           Reachable&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; Leader:                No&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Platform:&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; Operating System:      linux&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; Architecture:          x86_64&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Resources:&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; CPUs:                  0&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; Memory:                20 MiB&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Plugins:&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;  Network:              bridge, overlay&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;  Volume:               local&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Engine Version:         1.13.0&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;Engine Labels:&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt; - engine = label&lt;/span&gt;
&lt;span class=&#34;org-string&#34;&gt;```&lt;/span&gt;
        &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;buf&lt;/span&gt; := &lt;span class=&#34;org-builtin&#34;&gt;new&lt;/span&gt;(&lt;span class=&#34;org-type&#34;&gt;bytes.Buffer&lt;/span&gt;)
        &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;cmd&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;newInspectCommand&lt;/span&gt;(
                &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;test&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;NewFakeCli&lt;/span&gt;(&amp;amp;&lt;span class=&#34;org-type&#34;&gt;fakeClient&lt;/span&gt;{
                        &lt;span class=&#34;org-constant&#34;&gt;nodeInspectFunc&lt;/span&gt;: &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;() (&lt;span class=&#34;org-type&#34;&gt;swarm.Node&lt;/span&gt;, []&lt;span class=&#34;org-type&#34;&gt;byte&lt;/span&gt;, &lt;span class=&#34;org-type&#34;&gt;error&lt;/span&gt;) {
                                &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; *&lt;span class=&#34;org-function-name&#34;&gt;Node&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;Manager&lt;/span&gt;()), []&lt;span class=&#34;org-type&#34;&gt;byte&lt;/span&gt;{}, &lt;span class=&#34;org-constant&#34;&gt;nil&lt;/span&gt;
                        },
                }, &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;buf&lt;/span&gt;))
        &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;cmd&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;SetArgs&lt;/span&gt;([]&lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;{&lt;span class=&#34;org-string&#34;&gt;&#34;nodeID&#34;&lt;/span&gt;})
        &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;cmd&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Flags&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;Set&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;pretty&#34;&lt;/span&gt;, &lt;span class=&#34;org-string&#34;&gt;&#34;true&#34;&lt;/span&gt;)
        &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;assert&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;NilError&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;cmd&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Execute&lt;/span&gt;())
        &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;actual&lt;/span&gt; := &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;buf&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;String&lt;/span&gt;()
        &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;assert&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;EqualNormalizedString&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;assert&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;RemoveSpace&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;actual&lt;/span&gt;, &lt;span class=&#34;org-function-name&#34;&gt;string&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;expected&lt;/span&gt;))
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This might look ok as is, but a few problem are present:
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;The output is quite large and adds some noise to the test&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
Lot&#39;s of value in the &lt;code&gt;expected&lt;/code&gt; string comes from default values
of our &lt;code&gt;Node&lt;/code&gt; builder.
&lt;/p&gt;

&lt;p&gt;
This means any time we change our builder default values, we would
need to update this test, &lt;i&gt;painful&lt;/i&gt;.
&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;If the output changes for a good reason (add a field, fix a typo,
…), this test has to be updated too.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-org0519f3e&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org0519f3e&#34;&gt;Golden files to the rescue&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org0519f3e&#34;&gt;
&lt;p&gt;
First, let&#39;s get back at what is our test about and what we actually
want to test.
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;We want to ensure, the output of the function does not change by
mistake (i.e. change that wasn&#39;t supposed to change the output)&lt;/li&gt;
&lt;li&gt;We want to have an update version of the output if that was the
purpose of our change. And we want this update to be the least
painful possible.&lt;/li&gt;
&lt;li&gt;We don&#39;t really care about the final outputs as long as it stays
the same for the same inputs (i.e. we don&#39;t test for any number of
space, or that word are valid English, or …).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This is where the concept of &lt;b&gt;golden file&lt;/b&gt; is useful. In a
nutshell, a golden file is a file where we store the output and that
will be used by the test as the expected output. This file should be
updated any time the output changes for good reason. That&#39;s that
simple 👼.
&lt;/p&gt;

&lt;p&gt;
Once again, the way go &lt;code&gt;testing&lt;/code&gt; works, introducing and using golden
files in our tests is pretty straightforward and easy to use.
&lt;/p&gt;

&lt;p&gt;
Let&#39;s write a small &lt;i&gt;golden file helper&lt;/i&gt; so that our test has no
visual noise, in a &lt;code&gt;golden&lt;/code&gt; package.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;update&lt;/span&gt; = &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;flag&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Bool&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;test.update&#34;&lt;/span&gt;, &lt;span class=&#34;org-constant&#34;&gt;false&lt;/span&gt;, &lt;span class=&#34;org-string&#34;&gt;&#34;update golden file&#34;&lt;/span&gt;)

&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Get returns the golden file content. If the `test.update` is specified, it updates the&lt;/span&gt;
&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;file with the current output and returns it.&lt;/span&gt;
&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;Get&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;actual&lt;/span&gt; []&lt;span class=&#34;org-type&#34;&gt;byte&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) []&lt;span class=&#34;org-type&#34;&gt;byte&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;golden&lt;/span&gt; := &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;filepath&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Join&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;testdata&#34;&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;filename&lt;/span&gt;)
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; *&lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;update&lt;/span&gt; {
                &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;err&lt;/span&gt; := &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;ioutil&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;WriteFile&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;golden&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;actual&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;0644&lt;/span&gt;); &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;err&lt;/span&gt; != &lt;span class=&#34;org-constant&#34;&gt;nil&lt;/span&gt; {
                        &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;err&lt;/span&gt;)
                }
        }
        &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;expected&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;err&lt;/span&gt; := &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;ioutil&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;ReadFile&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;golden&lt;/span&gt;)
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;err&lt;/span&gt; != &lt;span class=&#34;org-constant&#34;&gt;nil&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;err&lt;/span&gt;)
        }
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;expected&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;We define a &lt;i&gt;global&lt;/i&gt; flag, &lt;code&gt;-test.update&lt;/code&gt; that will &lt;i&gt;enhance&lt;/i&gt; the
&lt;code&gt;go test&lt;/code&gt; command with it (as soon as we import this &lt;code&gt;golden&lt;/code&gt; package).&lt;/li&gt;
&lt;li&gt;&lt;p&gt;
We define a &lt;code&gt;golden.Get&lt;/code&gt; function that takes the current output
and the path of the golden file. It also takes &lt;code&gt;testing.T&lt;/code&gt; so any
failure happening here (like reading file, …) will make the test
fail (one less thing to write in the test calling this function).
&lt;/p&gt;

&lt;p&gt;
If the flag is present when running the test, it will update the
file with the actual content.
&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
The initial test becomes.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestNodeInspectPretty&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;buf&lt;/span&gt; := &lt;span class=&#34;org-builtin&#34;&gt;new&lt;/span&gt;(&lt;span class=&#34;org-type&#34;&gt;bytes.Buffer&lt;/span&gt;)
        &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;cmd&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;newInspectCommand&lt;/span&gt;(
                &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;test&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;NewFakeCli&lt;/span&gt;(&amp;amp;&lt;span class=&#34;org-type&#34;&gt;fakeClient&lt;/span&gt;{
                        &lt;span class=&#34;org-constant&#34;&gt;nodeInspectFunc&lt;/span&gt;: &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;() (&lt;span class=&#34;org-type&#34;&gt;swarm.Node&lt;/span&gt;, []&lt;span class=&#34;org-type&#34;&gt;byte&lt;/span&gt;, &lt;span class=&#34;org-type&#34;&gt;error&lt;/span&gt;) {
                                &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; *&lt;span class=&#34;org-function-name&#34;&gt;Node&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;Manager&lt;/span&gt;()), []&lt;span class=&#34;org-type&#34;&gt;byte&lt;/span&gt;{}, &lt;span class=&#34;org-constant&#34;&gt;nil&lt;/span&gt;
                        },
                }, &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;buf&lt;/span&gt;))
        &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;cmd&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;SetArgs&lt;/span&gt;([]&lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;{&lt;span class=&#34;org-string&#34;&gt;&#34;nodeID&#34;&lt;/span&gt;})
        &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;cmd&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Flags&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;Set&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;pretty&#34;&lt;/span&gt;, &lt;span class=&#34;org-string&#34;&gt;&#34;true&#34;&lt;/span&gt;)
        &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;assert&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;NilError&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;cmd&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Execute&lt;/span&gt;())
        &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;actual&lt;/span&gt; := &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;buf&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;String&lt;/span&gt;()
        &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;expected&lt;/span&gt; := &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;golden&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Get&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;, []&lt;span class=&#34;org-function-name&#34;&gt;byte&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;actual&lt;/span&gt;), &lt;span class=&#34;org-string&#34;&gt;&#34;myfile.golden&#34;&lt;/span&gt;)
        &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;assert&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;EqualNormalizedString&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;assert&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;RemoveSpace&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;actual&lt;/span&gt;, &lt;span class=&#34;org-function-name&#34;&gt;string&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;expected&lt;/span&gt;))
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
If we change the output, the workflow becomes the following :
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;run &lt;code&gt;go test&lt;/code&gt; and make sure it&#39;s failing,&lt;/li&gt;
&lt;li&gt;Validate that the current output is correct,&lt;/li&gt;
&lt;li&gt;run &lt;code&gt;go test -test.update&lt;/code&gt; to update the golden file(s),&lt;/li&gt;
&lt;li&gt;re-run &lt;code&gt;go test&lt;/code&gt; to make sure it&#39;s now green,&lt;/li&gt;
&lt;li&gt;you are done 👼.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
With this simple trick, our test now &lt;b&gt;contains less noise&lt;/b&gt; and is
way more &lt;b&gt;maintainable&lt;/b&gt; (you just have a command to run to update
the expected content).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Golang testing — functional arguments for wonderful builders</title>
      <link>https://vincent.demeester.fr/posts/2017-01-01-go-testing-functionnal-builders/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2017-01-01-go-testing-functionnal-builders/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;
Programming is not easy; even the best programmers are incapable of
writing programs that work exactly as intended every time. Therefore
an important part of the software development process is
testing. Writing tests for our code is a good way to ensure quality
and improve reliability.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Go programs, when properly implemented, are fairly simple to test
programatically. The &lt;code&gt;testing&lt;/code&gt; built-in library and the features of
the language itself offer plenty of ways to write good tests. As this
is a subject I particularly like, I&#39;m gonna write a bunch of articles
about it, that, &lt;i&gt;hopefully&lt;/i&gt; do not get old or boring.
&lt;/p&gt;

&lt;p&gt;
I&#39;m not going to start by introducing how &lt;code&gt;testing&lt;/code&gt; works, it&#39;s
already widely described in &lt;a href=&#34;https://golang.org/pkg/testing/&#34;&gt;the &lt;code&gt;testing&lt;/code&gt; godoc&lt;/a&gt;, &lt;a href=&#34;https://blog.golang.org/examples&#34;&gt;some&lt;/a&gt; &lt;a href=&#34;https://www.golang-book.com/books/intro/12&#34;&gt;articles&lt;/a&gt; and
&lt;a href=&#34;https://jonathanmh.com/golang-unit-testing-for-absolute-beginners/&#34;&gt;blogs&lt;/a&gt;. I&#39;m going to jump ahead on a more advanced techinque to write
tests, the &lt;code&gt;builders&lt;/code&gt; for tests.
&lt;/p&gt;

&lt;p&gt;
One of the most important characteristic of a &lt;b&gt;unit test&lt;/b&gt; (and any
type of test really) is &lt;b&gt;readability&lt;/b&gt;. This means it should be &lt;i&gt;easy
to read&lt;/i&gt; but most importantly it should &lt;b&gt;clearly show the intent of
the test&lt;/b&gt;. The setup (and cleanup) of the tests should be as small as
possible to avoid the noise. And as we are going to see below, &lt;code&gt;go&lt;/code&gt;
makes it pretty easy to do so.
&lt;/p&gt;

&lt;div id=&#34;outline-container-org1afcfe7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org1afcfe7&#34;&gt;Builders in tests&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org1afcfe7&#34;&gt;
&lt;p&gt;
Sometimes, your need to create data structure for your test that
might take a lot of line and introduce noise. In &lt;code&gt;golang&lt;/code&gt; we don&#39;t
have method overload or even &lt;i&gt;constructors&lt;/i&gt; as some other language
have. This means most of the time, we end up building our data using
directly the struct expression, as below.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt; := &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;{
        &lt;span class=&#34;org-constant&#34;&gt;Name&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;carthage&#34;&lt;/span&gt;,
        &lt;span class=&#34;org-constant&#34;&gt;Hostname&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;carthage.sbr.pm&#34;&lt;/span&gt;,
        &lt;span class=&#34;org-constant&#34;&gt;Platform&lt;/span&gt;: &lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x86_64&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;:           &lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;,
        },
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Let&#39;s imagine we have a &lt;code&gt;Validate&lt;/code&gt; function that make sure the
specified &lt;code&gt;Node&lt;/code&gt; is supported on our structure. We would write some
tests that ensure that.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateLinuxIsSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&amp;amp;&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Name&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;carthage&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;Hostname&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;carthage.sbr.pm&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;Platform&lt;/span&gt;: &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                        &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x86_64&#34;&lt;/span&gt;,
                        &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;:           &lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;,
                },
        })
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; !&lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;linux should be supported, it was not&#34;&lt;/span&gt;)
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateDarwinIsNotSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&amp;amp;&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Name&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;babylon&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;Hostname&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;babylon.sbr.pm&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;Platform&lt;/span&gt;: &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                        &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x86_64&#34;&lt;/span&gt;,
                        &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;:           &lt;span class=&#34;org-string&#34;&gt;&#34;darwin&#34;&lt;/span&gt;,
                },
        })
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;darwin should not be supported, it was&#34;&lt;/span&gt;)
        }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This is quickly hard to read, there is too much noise on that
test. We setup a whole &lt;code&gt;Node&lt;/code&gt; struct, but the only thing we really
intend to test is the &lt;code&gt;Platform.OS&lt;/code&gt; part. The rest is just required
fields for the function to correctly compile and run.
&lt;/p&gt;

&lt;p&gt;
This is where test builders (and builders in general) comes into
play. In &lt;a href=&#34;http://www.growing-object-oriented-software.com/&#34;&gt;Growing Object-Oriented Software Guided by Tests&lt;/a&gt;, the
Chapter 22 &#34;Constructing Complex Test Data&#34; is exactly about that
and guide us through the why and the how of these builders. The
examples in the book are in &lt;code&gt;java&lt;/code&gt; and uses wisely the
object-oriented nature of the language. Here is an example from the
book.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-java&#34;&gt;&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;I just want an order from a customer that has no post code&lt;/span&gt;
&lt;span class=&#34;org-type&#34;&gt;Order&lt;/span&gt; &lt;span class=&#34;org-variable-name&#34;&gt;order&lt;/span&gt; = &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;anOrder&lt;/span&gt;()
    .&lt;span class=&#34;org-rainbow-identifiers-identifier-7&#34;&gt;from&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-13&#34;&gt;aCustomer&lt;/span&gt;().&lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;with&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-13&#34;&gt;anAddress&lt;/span&gt;().&lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;withNotPostCode&lt;/span&gt;()))
    .&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;build&lt;/span&gt;()
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
These builders helps &lt;b&gt;keep tests expressive&lt;/b&gt;, as it&#39;s pretty obvious
when reading it, what we want to test. They remove the &lt;b&gt;visual
noise&lt;/b&gt; you have when building an object (or a &lt;code&gt;struct{}&lt;/code&gt; in Go) and
allows you to put sane default. They also make &lt;b&gt;tests resilient to
change&lt;/b&gt;. If the structure changes, only the builder has to be
updated, not the tests depending on it. They also make default case
really simple to write, and special cases not much more complicated.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-orgff90129&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;orgff90129&#34;&gt;Builder in Go&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-orgff90129&#34;&gt;
&lt;p&gt;
The naive way to create builders in &lt;code&gt;go&lt;/code&gt; could be to create a
&lt;code&gt;builder&lt;/code&gt; struct that have methods to construct the final struct and
a &lt;code&gt;build&lt;/code&gt; method. Let&#39;s see how it looks.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;() *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &amp;amp;&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;node&lt;/span&gt;: &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;{
                        &lt;span class=&#34;org-constant&#34;&gt;Name&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;node&#34;&lt;/span&gt;,
                        &lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Other defaults&lt;/span&gt;
                },
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt; &lt;span class=&#34;org-keyword&#34;&gt;struct&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt; *&lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;Node&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt;) &lt;span class=&#34;org-function-name&#34;&gt;Build&lt;/span&gt;() *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt;) &lt;span class=&#34;org-function-name&#34;&gt;Hostname&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;hostname&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;Hostname&lt;/span&gt; = &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;hostname&lt;/span&gt;
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt;) &lt;span class=&#34;org-function-name&#34;&gt;Name&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;Name&lt;/span&gt; = &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;name&lt;/span&gt;
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt;) &lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;) *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;Platform&lt;/span&gt; = &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt;
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This looks decent, and using it is pretty straightforward. At least
it make building the &lt;code&gt;struct&lt;/code&gt; more expressive, less noisy and
resilient to change. We can update the previous test as follow.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateLinuxIsSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(&amp;amp;&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x86_64&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;:           &lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;,
        }).&lt;span class=&#34;org-function-name&#34;&gt;Build&lt;/span&gt;())
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; !&lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;linux should be supported, it was not&#34;&lt;/span&gt;)
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateDarwinIsNotSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(&amp;amp;&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x86_64&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;:           &lt;span class=&#34;org-string&#34;&gt;&#34;darwin&#34;&lt;/span&gt;,
        }).&lt;span class=&#34;org-function-name&#34;&gt;Build&lt;/span&gt;())
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;darwin should not be supported, it was&#34;&lt;/span&gt;)
        }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
There is room for improvement :
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;There is still some noise, mainly &lt;code&gt;build()&lt;/code&gt; and the platform
&lt;code&gt;struct&lt;/code&gt;, as it still shows too much.&lt;/li&gt;
&lt;li&gt;It&#39;s not that extensible yet. If you want to update the &lt;code&gt;Node&lt;/code&gt; a
certain way that the builder is not written for, you have to
update the builder.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;NodeBuilder&lt;/code&gt; struct feels a little empty, it&#39;s just there to
hold on the &lt;code&gt;Node&lt;/code&gt; being constructed until it is &lt;code&gt;build&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
One improvement we could make is to have a &lt;code&gt;Platform&lt;/code&gt; builder, even
if it&#39;s a small struct here. Let&#39;s do that in the same way we did
with &lt;code&gt;Node&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;APlatform&lt;/span&gt;() *&lt;span class=&#34;org-type&#34;&gt;PlatformBuilder&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &amp;amp;&lt;span class=&#34;org-type&#34;&gt;PlatformBuilder&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;platform&lt;/span&gt;: &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                        &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x64_86&#34;&lt;/span&gt;,
                        &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;,
                },
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;PlatformBuilder&lt;/span&gt; &lt;span class=&#34;org-keyword&#34;&gt;struct&lt;/span&gt;{
        &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt; *&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;Platform&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;PlatformBuilder&lt;/span&gt;) &lt;span class=&#34;org-function-name&#34;&gt;Build&lt;/span&gt;() *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;PlatformBuilder&lt;/span&gt;) &lt;span class=&#34;org-function-name&#34;&gt;OS&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) *&lt;span class=&#34;org-type&#34;&gt;PlatformBuilder&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;OS&lt;/span&gt; = &lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;os&lt;/span&gt;
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And our tests becomes 🐻.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateLinuxIsSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(
                &lt;span class=&#34;org-function-name&#34;&gt;APlatform&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;OS&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;).&lt;span class=&#34;org-function-name&#34;&gt;Build&lt;/span&gt;()
        ).&lt;span class=&#34;org-function-name&#34;&gt;Build&lt;/span&gt;())
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; !&lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;linux should be supported, it was not&#34;&lt;/span&gt;)
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateDarwinIsNotSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(
                &lt;span class=&#34;org-function-name&#34;&gt;APlatform&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;OS&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;darwin&#34;&lt;/span&gt;).&lt;span class=&#34;org-function-name&#34;&gt;Build&lt;/span&gt;()
        ).&lt;span class=&#34;org-function-name&#34;&gt;Build&lt;/span&gt;())
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;darwin should not be supported, it was&#34;&lt;/span&gt;)
        }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
It does not really improve the visual noise as there is now quite a
few duplication : several &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;APlatform&lt;/code&gt; inside &lt;code&gt;Platform&lt;/code&gt;, …
It is a small improvement on readability but not that much compared
to the previous one. This is were the Go language features comes
into play.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-org28e3042&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;org28e3042&#34;&gt;Functional arguments to the rescue&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-org28e3042&#34;&gt;
&lt;p&gt;
Go has two interesting feature that are going to be useful here.
&lt;/p&gt;

&lt;p&gt;
First, a function in Go is a type on its own and thus is considered
a &lt;i&gt;first class citizen&lt;/i&gt;. It means it&#39;s possible to pass a function
as argument, or define a variable that holds it.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;ApplyTo&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(&lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;fn&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;s&lt;/span&gt;)
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;world&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;fmt&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Sprintf&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;%s, world!&#34;&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;s&lt;/span&gt;)
}

&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Usage&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;a&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;ApplyTo&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;hello&#34;&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;world&lt;/span&gt;)
&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;a == &#34;hello, world!&#34;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The second feature that comes into play here, is the possiblity to
have &lt;i&gt;variadic&lt;/i&gt; functions. A variadic function is a function that
takes a variable number of arguments (from &lt;code&gt;0&lt;/code&gt; to any number of
argument).
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;Print&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;strs&lt;/span&gt; ...&lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;_&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;s&lt;/span&gt; := &lt;span class=&#34;org-keyword&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;strs&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;fmt&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Println&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;s&lt;/span&gt;)
        }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
As we are going to see below, combining these two feature makes our
builders pretty easy to write and to use with simple case, while
staying very customizable, even outside of the builder. This is
really well described in a talk from Dave Cheney : &lt;a href=&#34;https://www.youtube.com/watch?v=24lFtGHWxAQ&amp;amp;index=15&amp;amp;list=PLMW8Xq7bXrG58Qk-9QSy2HRh2WVeIrs7e&#34;&gt;Functional
options for friendly APIs&lt;/a&gt; (&lt;a href=&#34;https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis&#34;&gt;transcription&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
Let&#39;s apply that to our new builders.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;nodeBuilders&lt;/span&gt; ...&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(*&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;)) *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt; := &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Name&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;node&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Other defaults&lt;/span&gt;
        }

        &lt;span class=&#34;org-keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;_&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;build&lt;/span&gt; := &lt;span class=&#34;org-keyword&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;nodeBuilders&lt;/span&gt; {
                &lt;span class=&#34;org-function-name&#34;&gt;build&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt;)
        }

        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;APlatform&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;platformBuilders&lt;/span&gt; ...&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(*&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;)) *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt; := &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x64_86&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;,
        }

        &lt;span class=&#34;org-keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;_&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;build&lt;/span&gt; := &lt;span class=&#34;org-keyword&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;platformBuilders&lt;/span&gt; {
                &lt;span class=&#34;org-function-name&#34;&gt;build&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt;)
        }

        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And that is it for the actual builder code. It is &lt;b&gt;small&lt;/b&gt; and
simple, there is &lt;b&gt;no more &lt;code&gt;NodeBuilder&lt;/code&gt;&lt;/b&gt; struct, and this is highly
extensible. Let&#39;s see how to use it.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;a default node&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;node1&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;()
&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;a node with a specific Hostname&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node2&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;(&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;Hostname&lt;/span&gt; = &lt;span class=&#34;org-string&#34;&gt;&#34;custom-hostname&#34;&lt;/span&gt;
})
&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;a node with a specific name and platform&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;node3&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;(&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;Name&lt;/span&gt; = &lt;span class=&#34;org-string&#34;&gt;&#34;custom-name&#34;&lt;/span&gt;
}, &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;Platform&lt;/span&gt; = &lt;span class=&#34;org-function-name&#34;&gt;APlatform&lt;/span&gt;(&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;) {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;OS&lt;/span&gt; = &lt;span class=&#34;org-string&#34;&gt;&#34;darwin&#34;&lt;/span&gt;
        })
})
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The last step is to define some &lt;i&gt;function builder&lt;/i&gt; for common or
widely used customization, to make this &lt;b&gt;expressive&lt;/b&gt;. And let
complex, &lt;i&gt;one-time&lt;/i&gt; function builder in the end of the user. Now our
tests looks like.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;
&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateLinuxIsSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;WithAPlatform&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;Linux&lt;/span&gt;)))
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; !&lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;linux should be supported, it was not&#34;&lt;/span&gt;)
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateDarwinIsNotSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;WithAPlatform&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;Darwin&lt;/span&gt;)))
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;darwin should not be supported, it was&#34;&lt;/span&gt;)
        }
}

&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Function builders&lt;/span&gt;
&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;WithAPlatform&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;builders&lt;/span&gt; ...&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(*&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;)) &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;) {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;) {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;Platform&lt;/span&gt; = &lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;builders&lt;/span&gt;...)
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;Linux&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;OS&lt;/span&gt; = &lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;Darwin&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;OS&lt;/span&gt; = &lt;span class=&#34;org-string&#34;&gt;&#34;darwin&#34;&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The intent is now clear. It&#39;s readable and still resilient to
change. The code &lt;code&gt;Node(WithPlatform(Linux))&lt;/code&gt; is easy to understand
for a human. It makes what are the &lt;i&gt;tested&lt;/i&gt; characteristics of
&lt;code&gt;struct&lt;/code&gt; pretty clear. It&#39;s easy to combine multiple builders as the
&lt;code&gt;WithPlatform&lt;/code&gt; function shows 👼. It&#39;s also easy to create a
&lt;i&gt;function builder&lt;/i&gt;, even in a different package (as long as the ways
to modify the struct are exported) and complex or &lt;i&gt;on-off&lt;/i&gt; builder
can be embedded in the function call (&lt;code&gt;Node(func(n *Node) { // …
  })&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
In summary, using these types of builder have several advantages :
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;tests are &lt;b&gt;easy to read&lt;/b&gt;, and reduce the visual noise&lt;/li&gt;
&lt;li&gt;tests are &lt;b&gt;resilient to change&lt;/b&gt;&lt;/li&gt;
&lt;li&gt;builders are &lt;b&gt;easy to compose&lt;/b&gt; and very extensible&lt;/li&gt;
&lt;li&gt;builders could even be &lt;b&gt;shared&lt;/b&gt; with production code as there is
nothing tied to &lt;code&gt;testing&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Firefox hidden feature — places in bookmarks</title>
      <link>https://vincent.demeester.fr/posts/2016-09-18-firefox-places-and-bookmarks/</link>
      <pubDate>Mon, 19 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2016-09-18-firefox-places-and-bookmarks/</guid>
      <description>&lt;p&gt;
Je réalise que j&#39;utilise Firefox depuis bien plus de 10 ans maintenant
(on doit être à minimum 15 ans en fait…). Et je me souviens d&#39;un temps
où je souhaitais rendre mes &lt;i&gt;bookmarks&lt;/i&gt; (marque-pages 👼)
dynamique. Après tout ils existent de base dans Firefox (e.g. &lt;code&gt;Most
visited&lt;/code&gt;), il doit donc être possible d&#39;en faire soit même.
&lt;/p&gt;

&lt;p&gt;
Il fut un temps où c&#39;était facile à mettre en place — ouvrir la
gestion des marques pages, chercher quelque chose et &lt;i&gt;cliquer&lt;/i&gt; sur le
bouton &lt;code&gt;save&lt;/code&gt; pour sauvegarder cette recherche en tant de bookmark
dynamique.
&lt;/p&gt;

&lt;p&gt;
&lt;span class=&#34;underline&#34;&gt;Note&lt;/span&gt;: comme j&#39;avais grave lutté à l&#39;époque, et que j&#39;ai encore lutté
cette fois ci, cet article va me servir de pense-bête pour le futur.
&lt;/p&gt;

&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;Places&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
C&#39;est le petit nom que possède cette fonctionnalité dans le cœur de
Firefox. C&#39;est un nom relativement commun, du coup ça n&#39;aide pas trop
la recherche d&#39;information… Le meilleur endroit pour se documenter
reste alors le &lt;a href=&#34;https://developer.mozilla.org&#34;&gt;Mozilla Developer Network&lt;/a&gt;… 
&lt;/p&gt;

&lt;p&gt;
Et ce qu&#39;on peut lire sur cette &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Places&#34;&gt;page&lt;/a&gt; c&#39;est :
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Places is the bookmarks and history management system introduced in
Firefox 3. It offers increased flexibility and complex querying to
make handling the places the user goes easier and more
convenient. It also includes new features including favicon storage
and the ability to annotate pages with arbitrary information.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
C&#39;est donc un mécanisme interne qui permet d&#39;annoter des pages
(bookmarks, history, …) et surtout un &lt;i&gt;requêtage&lt;/i&gt; plus complexe et
flexible que le système précédent. On peut noter également que c&#39;est
arrivé en version 3, et qu&#39;à la date du jour, la version courante de
Firefox est la 48. En espérant donc que ce soit toujours le système en
place (&lt;i&gt;spoiler alert: ça a l&#39;air d&#39;être le cas&lt;/i&gt;).
&lt;/p&gt;


&lt;div class=&#34;figure&#34;&gt;
&lt;p&gt;&lt;img src=&#34;images/2016/firefox-place-awesomebar-example.png&#34; alt=&#34;firefox-place-awesomebar-example.png&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 1:&lt;/span&gt; An example of places usage in the awesome bar&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Les petits &lt;i&gt;encarts&lt;/i&gt; en noir ci-dessus sont un exemple de ces
&lt;i&gt;places&lt;/i&gt;. Ici il s&#39;agit des &lt;b&gt;tags&lt;/b&gt; qui ont étés apposer sur les
bookmarks ; on voit d&#39;ailleurs que ce sont des bookmarks puisqu&#39;ils
ont une petite étoile à côté du joli petit &lt;code&gt;favicon&lt;/code&gt;. Firefox a pris
les termes que j&#39;ai écrit dans la barre d&#39;url et à faire une recherche
dans les &lt;i&gt;places&lt;/i&gt; suivant différents critères (l&#39;url, les tags pour
les bookmarks, …).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-2&#34;&gt;Places dans les bookmarks&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-2&#34;&gt;
&lt;p&gt;
L&#39;idée est d&#39;utiliser cette fonctionnalité pour faire des bookmarks
dynamique. Pour poser un peu de contexte, j&#39;utilise surtout la
bookmark toolbar pour accéder à des pages dont j&#39;ai besoin (au hasard,
le webmail du boulot, une page précise d&#39;issues sur github, des pages
de guide/référence/manuel sur des outils que j&#39;utilise…) et également
en mode &lt;i&gt;read that later&lt;/i&gt;.
&lt;/p&gt;


&lt;div class=&#34;figure&#34;&gt;
&lt;p&gt;&lt;img src=&#34;images/2016/firefox-place-bookmark-toolbar.png&#34; alt=&#34;firefox-place-bookmark-toolbar.png&#34; /&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;figure-number&#34;&gt;Figure 2:&lt;/span&gt; Ma &lt;i&gt;bookmark&lt;/i&gt; toolbar&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Par exemple, dans mon dossier &lt;code&gt;inbox&lt;/code&gt;, il y a plusieurs sous-dossiers
(en fait des dossiers dynamique, mais j&#39;y reviendrais plus tard),
genre &lt;code&gt;docker&lt;/code&gt;, &lt;code&gt;nix&lt;/code&gt;, &lt;code&gt;golang&lt;/code&gt;, &lt;code&gt;java&lt;/code&gt;, etc. Tout ce qui &lt;i&gt;traîne&lt;/i&gt;
dans &lt;code&gt;inbox&lt;/code&gt; est à lire ou à trier (&lt;code&gt;inbox&lt;/code&gt; se réfère un peu à ce que
l&#39;on peut voir avec GTD). Chaque sous dossier était une sorte de
&lt;i&gt;filtre&lt;/i&gt; par projet, langage ou /whatever/…
&lt;/p&gt;

&lt;p&gt;
Nous allons donc ruser un peu et utiliser les &lt;i&gt;places&lt;/i&gt; dans nos
bookmarks pour en faire des dossiers dynamique, à l&#39;instar de &lt;code&gt;Most
Visited&lt;/code&gt;. Pour se faire, il faut déjà trouver un peu de documentation
sur l&#39;utilisation de ces fameuses &lt;i&gt;places&lt;/i&gt; au sein de bookmarks — et
ça pèche un peu… Toujours sur le &lt;a href=&#34;https://developer.mozilla.org&#34;&gt;Mozilla Developer Network&lt;/a&gt;, une page
&lt;i&gt;un peu caché&lt;/i&gt; nous révèle quelques informations : &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Places/Places_query_URIs&#34;&gt;Places query URIs&lt;/a&gt;.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
You can use a &lt;code&gt;place&lt;/code&gt; URI as a bookmark. For example, if you right-click
on the toolbar and choose &#34;New Bookmark,&#34; you can enter a place URI
there to create a new query on your toolbar that, when clicked, will
reveal a popup containing the results of the query.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Victoire &lt;code&gt;\o/&lt;/code&gt;, il &lt;i&gt;suffit&lt;/i&gt; de créer un bookmark avec comme &lt;code&gt;URI&lt;/code&gt;
une &lt;code&gt;place:…&lt;/code&gt; URI et c&#39;est gagné. Ainsi, un bookmark avec comme &lt;code&gt;URI&lt;/code&gt;
&lt;code&gt;place:terms=nixos&lt;/code&gt; me retournera un dossier dynamique  qui contiens
tous les liens (&lt;i&gt;history&lt;/i&gt;, &lt;i&gt;bookmarks&lt;/i&gt;, …) qui contiennent le mot
&lt;code&gt;nixos&lt;/code&gt; — en gros l&#39;équivalent de ce que nous aurions si nous tapions
&lt;code&gt;nixos&lt;/code&gt; dans la &lt;i&gt;awesomebar&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
Si l&#39;on regarde d&#39;un peu plus près &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/Places/Places_query_URIs&#34;&gt;Places query URIs&lt;/a&gt;, il y a une
longue liste de paramètres possible. Il y en a pour presque tous les
goûts : le temps (utile pour afficher l&#39;historique, mais pas trop),
les visites, le type de &lt;i&gt;place&lt;/i&gt; (&lt;i&gt;bookmark&lt;/i&gt;, &lt;i&gt;history&lt;/i&gt;, …), le
domaine de l&#39;élément, le dossier dans lequel il se trouve, l&#39;&lt;code&gt;URI&lt;/code&gt;,
les tags… j&#39;en passe et des meilleurs.
&lt;/p&gt;

&lt;p&gt;
Si par exemple, je souhaite n&#39;afficher que les pages visités
aujourd&#39;hui, triés par nombre de visites et limités à 10 résultats, je
peux mettre comme &lt;code&gt;URI&lt;/code&gt; :
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-http&#34;&gt;place:queryType=0&amp;amp;sort=8&amp;amp;maxResults=10&amp;amp;beginTimeRef=1&amp;amp;beginTime=0
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Et on obtiens ça :
&lt;/p&gt;


&lt;div class=&#34;figure&#34;&gt;
&lt;p&gt;&lt;img src=&#34;images/2016/firefox-place-most-visited-today.png&#34; alt=&#34;firefox-place-most-visited-today.png&#34; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Mais revenons à nos moutons, moi ce que je souhaite, c&#39;est faire des
dossiers dynamique par &lt;code&gt;tag&lt;/code&gt;, i.e. les tags que l&#39;on peut setter
lorsqu&#39;on ajoute un bookmark. Et ça tombe bien, un des paramètres
s&#39;appelle &lt;code&gt;tag&lt;/code&gt; et fait exactement ça. Je souhaite également pouvoir
faire des &lt;code&gt;ET&lt;/code&gt; sur mes tags — par exemple, dans mon dossier
&lt;code&gt;inbox/nixos&lt;/code&gt; je veux tous les bookmarks qui sont taggués &lt;code&gt;inbox&lt;/code&gt; &lt;b&gt;et&lt;/b&gt;
&lt;code&gt;nixos&lt;/code&gt;. Et c&#39;est simple, il suffit de lui donner les deux.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-http&#34;&gt;place:tag=inbox&amp;amp;tag=nixos
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-3&#34;&gt;Rétrospective&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-3&#34;&gt;
&lt;p&gt;
Voilà, vous avez maintenant tout ce qu&#39;il faut pour faire des dossiers
dynamiques dans vos bookmarks Firefox et vous organiser au mieux (
&lt;i&gt;ou pas&lt;/i&gt;). Quelques points à noter :
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;L&#39;icône du dossier dynamique — ou même la fonctionnalité à
proprement parler= n&#39;apparaît pas de suite. Il faut parfois
redémarrez Firefox pour profiter du nouveau dossier dynamique.
&lt;/li&gt;
&lt;li&gt;Une fois que le bookmark est vu comme un dossier dynamique, il n&#39;est
plus possible d&#39;éditer l&#39;&lt;code&gt;URI&lt;/code&gt;. Si vous voulez en changer un, il
faut tout bonnement le recréer.
&lt;/li&gt;
&lt;li&gt;Bien que ce soit une fonctionnalité que je trouve géniale, il y a
peu de &lt;i&gt;presse&lt;/i&gt; sur le sujet et à mon grand étonnement, aucun plugin
pour gérer ça plus proprement. Est-ce le signe qu&#39;un jour ce ne sera
plus supporter, je n&#39;en ai aucune idée.
&lt;/li&gt;
&lt;li&gt;Un point très positif si vous utilisez Firefox Sync : ça marche bien
(pas vraiment étonnant en fait), ces dossiers se synchronise comme
le reste et seront donc à disponible quelque soit l&#39;appareil sur lequel
vous utilisez firefox &lt;code&gt;\o/&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Gestion de configuration : introduction</title>
      <link>https://vincent.demeester.fr/posts/2015-07-31-config-managment-intro/</link>
      <pubDate>Fri, 31 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2015-07-31-config-managment-intro/</guid>
      <description>&lt;p&gt;
Cela doit faire au moins 2 ans que je souhaite partager la façon dont
je gère mes configurations (en anglais &lt;i&gt;dotfiles&lt;/i&gt;). Comme j&#39;ai
longtemps repoussé l&#39;échéance, probablement de peur d&#39;avoir un roman à
écrire, je vais en faire une série de petits billets de blog dont
celui-ci est l&#39;introduction. Nous y aborderons donc mon besoin, et mes
choix.
&lt;/p&gt;

&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;Besoin(s)&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
En bon &lt;b&gt;geek&lt;/b&gt; que je suis, je suis fan des &lt;i&gt;dotfiles&lt;/i&gt;. Les &lt;i&gt;dotfiles&lt;/i&gt;
— fichiers de configurations — sont de petits fichiers, habituellement
dans notre dossier personnel (votre &lt;i&gt;$HOME&lt;/i&gt;), qui nous permettent de
paramétrer et personnaliser nos outils de tous les jours. C&#39;est
principalement vrai pour des outils en ligne de commande — et ça tombe
bien, j&#39;adore — mais pas uniquement limité à ces derniers.
&lt;/p&gt;

&lt;p&gt;
Je vais faire un très petit aparté sur le pourquoi de cette
personnalisation :
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;C&#39;est &lt;b&gt;fun&lt;/b&gt; à faire et c&#39;est relativement important de mon point de vue.
&lt;/li&gt;
&lt;li&gt;C&#39;est &lt;b&gt;éducatif&lt;/b&gt; ou formateur ; on lit les documentations de nos
outils, leurs fonctionnalités un peu cachées. On va souvent découvrir
un peu la philosophie dans laquelle l&#39;outil a été créé. C&#39;est en
mettant les &lt;i&gt;mains dans le cambouis&lt;/i&gt; et en &lt;i&gt;foutant un gros bordel&lt;/i&gt;
que j&#39;ai le plus appris (ça va du &lt;i&gt;langage&lt;/i&gt; shell et d&#39;autres
langages de scripts, de POSIX, au noyau linux ou encore au LISP avec
GNU/Emacs).
&lt;/li&gt;
&lt;li&gt;Cela fait &lt;b&gt;gagner du temps&lt;/b&gt; et de manière non négligeable. Je suis
né &lt;span class=&#34;underline&#34;&gt;courageux mais terriblement fainéant&lt;/span&gt; (et oui c&#39;est possible
&lt;code&gt;:-P&lt;/code&gt;), j&#39;aime pas trop me répéter quand ça devient un peu compliqué
/ chiant (e.g. &lt;code&gt;docker run monimage args&lt;/code&gt; ça va, &lt;code&gt;docker run&lt;/code&gt; avec
&lt;code&gt;-v /tmp:/tmp -v /var/run/docker.socket:/var/run/docker.socket […]&lt;/code&gt;
et &lt;code&gt;run monimage arg1 arg2 arg3 […]&lt;/code&gt; moins déjà).
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Mais revenons à nos moutons et faisons une petite liste de mes besoins, un
peu en vrac :
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;J&#39;ai plusieurs ordinateurs (laptop/desktop/serveurs) et je souhaite
avoir mes configurations &lt;b&gt;synchronisées&lt;/b&gt; entre ceux-ci — et ce de
manière simple, c&#39;est à dire &lt;i&gt;une commande à exécuter&lt;/i&gt;.
&lt;/li&gt;
&lt;li&gt;C&#39;est lié au point précédent mais, je ne &lt;i&gt;peux pas vivre&lt;/i&gt; sans
outil de gestion de version, comme &lt;b&gt;git&lt;/b&gt;. Il me faut donc un outil
ou ensemble d&#39;outil qui sache utiliser des outils de gestion de
version &lt;i&gt;du marché&lt;/i&gt;.


&lt;div class=&#34;figure&#34;&gt;
&lt;p&gt;&lt;img src=&#34;./img/git-all-the-thing.jpg&#34; alt=&#34;git-all-the-thing.jpg&#34; /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/li&gt;

&lt;li&gt;En fonction de mes ordinateurs, mes besoins de configuration
changent. Il me faut donc un outil &lt;b&gt;flexible&lt;/b&gt; qui me permette de dire
par exemple : sur ce PC j&#39;ai un serveur &lt;code&gt;Xorg&lt;/code&gt; donc j&#39;ai besoin de
mes configuration xorg, de celle de mon &lt;i&gt;window manager&lt;/i&gt;, etc. — et
inversement sur ce serveur j&#39;ai besoin de python et haskell mais pas
de xorg..
&lt;/li&gt;
&lt;li&gt;Je ne souhaites pas avoir à faire des liens symboliques, ou de
scripts d&#39;installation. Je trouves que ça rends les choses plus
compliquées. Du coup il faut que je puisse avoir &lt;b&gt;plusieurs &lt;i&gt;dépôts
de configuration&lt;/i&gt;&lt;/b&gt; (repository) qui pointent au même endroit, sans
que ce soit le bordel.
&lt;/li&gt;
&lt;li&gt;Le &lt;b&gt;partage&lt;/b&gt; est important pour moi. Il en découle deux choses :
&lt;ol class=&#34;org-ol&#34;&gt;
&lt;li&gt;Il faut que je puisse documenter un peu mon repository, avec un
bon vieux &lt;code&gt;README&lt;/code&gt; ; sans que chaque &lt;code&gt;README&lt;/code&gt; se marche dessus.
&lt;/li&gt;
&lt;li&gt;Il y a quelques &lt;b&gt;informations&lt;/b&gt; qui sont &lt;b&gt;personnelles&lt;/b&gt;, comme par
exemple les clés ssh. Il me faut donc être capable d&#39;avoir des
&lt;i&gt;dépôts publiques&lt;/i&gt; et des &lt;i&gt;dépôts privés&lt;/i&gt;. C&#39;est grandement facilité
par l&#39;aspect &lt;i&gt;flexibilité&lt;/i&gt; &lt;code&gt;:-)&lt;/code&gt;.
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Un bonus que je souhaite, est de pouvoir disposer de &lt;b&gt;hooks&lt;/b&gt;, un peu
à la manière de git (voir &lt;a href=&#34;https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks&#34;&gt;ici&lt;/a&gt;). L&#39;idée est de pouvoir &lt;b&gt;générer&lt;/b&gt; un
fichier de configuration à partir d&#39;un ensemble de fichiers qui
viendraient de différents dépôts. Le meilleur exemple que je peux
donner c&#39;est &lt;code&gt;~/.ssh/config&lt;/code&gt; dans lequel je vais y mettre des bouts
publiques que je souhaites partager (comme le &lt;code&gt;Host *&lt;/code&gt; avec des
trucs cool comme &lt;code&gt;ControlPersist&lt;/code&gt;, on en parlera plus tard) et des
bouts privés (mes hosts privés, avec mes configurations de
&lt;i&gt;rebonds&lt;/i&gt;, etc..).
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Cette liste a mis un certain temps à se former dans ma tête, mais une
fois qu&#39;elle était formée, j&#39;ai pu assez facilement faire des choix.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-2&#34;&gt;Choix&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-2&#34;&gt;
&lt;p&gt;
Deux outils et un peu d&#39;organisation permettent de répondre à mes
besoins. Les deux outils sont &lt;code&gt;vcsh&lt;/code&gt; et &lt;code&gt;myrepos&lt;/code&gt; (anciennement appelé
&lt;code&gt;mr&lt;/code&gt;), fait par respectivement Richard Hartmann et Joey Hess (tout
deux assez impliqué dans la communauté Debian).
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-2-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-2-1&#34;&gt;vcsh&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-2-1&#34;&gt;
&lt;p&gt;
En un mot, &lt;a href=&#34;https://github.com/RichiH/vcsh&#34;&gt;vcsh&lt;/a&gt; permet de maintenir plusieurs &lt;i&gt;repository&lt;/i&gt; &lt;a href=&#34;http://git-scm.com/&#34;&gt;git&lt;/a&gt; dans
un seul dossier. Par défaut tous les &lt;i&gt;repository&lt;/i&gt; git maintenus par
&lt;code&gt;vcsh&lt;/code&gt; pointent vers le dossier &lt;code&gt;$HOME&lt;/code&gt;, mais il est possible
d&#39;utiliser un autre dossier.
&lt;/p&gt;

&lt;p&gt;
L&#39;idée est de pouvoir disposer de plusieurs repository par &lt;i&gt;famille
d&#39;application&lt;/i&gt;, par exemple &lt;code&gt;vim&lt;/code&gt;, &lt;code&gt;ssh&lt;/code&gt;, &lt;code&gt;emacs&lt;/code&gt;, &lt;code&gt;zsh&lt;/code&gt;, etc. Cela
permet ainsi d&#39;avoir différents ensemble de configurations sur
différentes machines et pour différents utilisateurs. Cela apporte
une très grande flexibilité et facilite le partage de configuration
(au sein d&#39;une entreprise ou d&#39;un projet par exemple) tout en
laissant la place à la définition de configuration(s)
personnalisé(s).
&lt;/p&gt;

&lt;p&gt;
En bonus, &lt;code&gt;vcsh&lt;/code&gt; supporte un système de hook, permettant d&#39;exécuter
des commandes à différents moments du &lt;i&gt;workflow&lt;/i&gt; — c&#39;est la seule
partie qui manquant à &lt;code&gt;vcsh&lt;/code&gt; de mon point de vue alors j&#39;y ai
apporté ma petit pierre.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;vcsh&lt;/code&gt; est la clé de voûte de ma gestion de configuration. Sans le
travail formidable de &lt;a href=&#34;http://richardhartmann.de/&#34;&gt;Richard Hartmann&lt;/a&gt;, je ne sais pas comment je
ferais..
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-2-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-2-2&#34;&gt;myrepos&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-2-2&#34;&gt;
&lt;p&gt;
En un mot, &lt;a href=&#34;https://myrepos.branchable.com/&#34;&gt;myrepos&lt;/a&gt; est un outil permettant de &lt;i&gt;gérer&lt;/i&gt; plusieurs
repository (git, subversion, mercurial, …) avec une seule
commande : &lt;code&gt;mr&lt;/code&gt;. C&#39;est simple et efficace :
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;&lt;code&gt;mr u&lt;/code&gt; (ou &lt;code&gt;mr update&lt;/code&gt;) pour récupérer les dernières modifications (&lt;code&gt;git pull&lt;/code&gt;,
&lt;code&gt;svn up&lt;/code&gt;, …).
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mr -d $HOME/.config u&lt;/code&gt; pour récupérer les dernières modifications
des repository qui sont dans &lt;code&gt;$HOME/.config&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mr -j 6 u&lt;/code&gt; pour paralléliser la récupération (ici 6 jobs en parallèle).
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mr p&lt;/code&gt; pour pousser des modifications (&lt;code&gt;git push&lt;/code&gt;, …).
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mr run&lt;/code&gt; pour lancer un commande (j&#39;utilise ça tous les jours).
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Il est également possible de personnaliser les commandes à lancer lors
d&#39;un &lt;i&gt;update&lt;/i&gt; ou autre (toutes les commandes), et même en définir des
nouvelles. Cela se présente comme suit :
&lt;/p&gt;


&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-conf&#34;&gt;[&lt;span class=&#34;org-type&#34;&gt;foo&lt;/span&gt;]
&lt;span class=&#34;org-variable-name&#34;&gt;checkout&lt;/span&gt; = git@github.com:joeyh/foo.git
&lt;span class=&#34;org-variable-name&#34;&gt;update&lt;/span&gt; = git pull --rebase

[&lt;span class=&#34;org-type&#34;&gt;bar&lt;/span&gt;]
&lt;span class=&#34;org-comment-delimiter&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;This repository has an upstream, which I&#39;ve forked;&lt;/span&gt;
&lt;span class=&#34;org-comment-delimiter&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;set up a remote on checkout.&lt;/span&gt;
&lt;span class=&#34;org-variable-name&#34;&gt;checkout&lt;/span&gt; =
    git clone git@github.com:joeyh/bar.git
    cd bar
    git remote add upstream git@github.com:barbar/bar.git
&lt;span class=&#34;org-comment-delimiter&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;make `mr zap` integrate from upstream&lt;/span&gt;
&lt;span class=&#34;org-variable-name&#34;&gt;zap&lt;/span&gt; =
    git pull upstream
    git merge upstream/master
    git push origin master

[&lt;span class=&#34;org-type&#34;&gt;mystuff&lt;/span&gt;]
&lt;span class=&#34;org-variable-name&#34;&gt;checkout&lt;/span&gt; = git@github.com:joeyh/foo.git
&lt;span class=&#34;org-comment-delimiter&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Skip if the current user is not joey&lt;/span&gt;
&lt;span class=&#34;org-variable-name&#34;&gt;skip&lt;/span&gt; = test `whoami` != joey

[&lt;span class=&#34;org-type&#34;&gt;DEFAULT&lt;/span&gt;]
&lt;span class=&#34;org-comment-delimiter&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Teach mr how to `mr gc` in git repos.&lt;/span&gt;
&lt;span class=&#34;org-variable-name&#34;&gt;git_gc&lt;/span&gt; = git gc &lt;span class=&#34;org-string&#34;&gt;&#34;$@&#34;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Une autre fonctionnalité qui m&#39;est totalement indispensable est ce
qu&#39;on appel les &lt;code&gt;fixup(s)&lt;/code&gt;. Il est en effet possible d&#39;exécuter une ou
plusieurs commandes (shell) après un &lt;code&gt;update&lt;/code&gt; (ou via la commande
&lt;code&gt;fixup&lt;/code&gt;). C&#39;est grâce à ce système la que je génère mes fichiers de
configuration en provenance de plusieurs repository (comme
&lt;code&gt;$HOME/.ssh/config&lt;/code&gt; ou encore &lt;code&gt;$HOME/.gitconfig&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;myrepos&lt;/code&gt; est l&#39;exemple de l&#39;outil simple et efficace qui fait une
chose et le fait très bien, et dont je n&#39;arrive pas à me passer
&lt;code&gt;:-D&lt;/code&gt;. Je l&#39;utilise également dans plein d&#39;autres cas, comme par
exemple pour mettre à jour mes &lt;i&gt;forks&lt;/i&gt; de projets open-source.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-3&#34;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-3&#34;&gt;
&lt;p&gt;
Et voilà, c&#39;est tout pour cette introduction &lt;code&gt;;-)&lt;/code&gt;. La prochaine
partie se penchera sur la &lt;b&gt;structure&lt;/b&gt; que j&#39;utilise ainsi que le
repository principal qui est &lt;a href=&#34;https://github.com/vdemeester/vcsh-home&#34;&gt;&lt;b&gt;vcsh-home&lt;/b&gt;&lt;/a&gt;. Dans les parties suivantes
on parlera des autres repository et donc des configurations
spécifiques pour les différents outils (comme &lt;a href=&#34;https://github.com/vdemeester/sh-config&#34;&gt;sh-config&lt;/a&gt;,
&lt;a href=&#34;https://github.com/vdemeester/emacs-config&#34;&gt;emacs-config&lt;/a&gt; ou encore &lt;a href=&#34;https://github.com/vdemeester/go-config&#34;&gt;go-config&lt;/a&gt;). On parlera aussi probablement de
&lt;code&gt;git-annex&lt;/code&gt; dans le futur.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Docker 1.6 et son écosystème</title>
      <link>https://vincent.demeester.fr/posts/2015-06-01-docker-1.6-ecosystem/</link>
      <pubDate>Mon, 01 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2015-06-01-docker-1.6-ecosystem/</guid>
      <description>&lt;div class=&#34;notice&#34;&gt;Cet article est disponible sur le &lt;a href=&#34;http://blog.zenika.com/&#34;&gt;Blog de Zenika&lt;/a&gt; à l&#39;adresse suivante : &lt;a href=&#34;http://blog.zenika.com/index.php?post/2015/06/01/Docker-1-6-et-son-ecosysteme&#34;&gt;http://blog.zenika.com/index.php?post/2015/06/01/Docker-1-6-et-son-ecosysteme&lt;/a&gt;. Cet publication me sert de mirroir / sauvegarde.&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;Introduction&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
Le 28 octobre dernier, nous avions parlé de la sortie de Docker 1.3, des évolutions entre la version 1 et cette dernière et de son écosystème. Je vous proposes de remettre ça, bientôt 6 mois après, avec un peu le même plan : les principales nouveautés entre la version 1.3 et 1.6 (et il y en a &lt;code&gt;;-)&lt;/code&gt;), l&#39;évolution de l&#39;écosystème qui gravite autour et un peu de &lt;i&gt;social&lt;/i&gt; avec les meetups et évènements qui se sont passés depuis.
&lt;/p&gt;


&lt;div class=&#34;figure&#34;&gt;
&lt;p&gt;&lt;img src=&#34;./img/docker-16/docker_container_engine_logo.png&#34; alt=&#34;docker_container_engine_logo.png&#34; /&gt;
&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;
Rappel &lt;i&gt;ultra&lt;/i&gt; rapide, &lt;b&gt;Docker est une plate-forme ouverte à destination des développeurs et administrateurs systèmes visant à faciliter la construction et le déploiement d&#39;applications distribuées&lt;/b&gt;. De manière moins marketing, l&#39;idée derrière Docker est d&#39;automatiser le déploiement d&#39;environnements sous forme de conteneurs légers, portables et auto-suffisants ; les conteneurs permettant d&#39;isoler l&#39;exécution des applications dans des contextes d&#39;exécution. Pour ce
faire, Docker, écrit en Go, reprend les bases de LXC, utilise les fonctionnalités du noyau Linux (CGroups, Namespaces, …) et se base initialement sur un système de fichier &#34;en oignons&#34; AUFS ; D&#39;autres backends sont supportés également comme BTRFS ou devicemapper (LVM).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-2&#34;&gt;Ovelay filesystem storage driver (1.4.0)&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-2&#34;&gt;
&lt;p&gt;
La release 1.4.0 de Docker (et la 1.3.3 en parallèle) a surtout été une gigantesque &lt;i&gt;bugfix party&lt;/i&gt;, histoire de rendre les fonctionnalités arrivées auparavant plus stable — la release note se trouve &lt;a href=&#34;https://github.com/docker/docker/blob/master/CHANGELOG.md#140-2014-12-11&#34;&gt;ici&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
La principale nouveautée de cette version est l&#39;apparation d&#39;un nouveau &lt;i&gt;storage driver&lt;/i&gt;, il s&#39;agit d&#39;&lt;b&gt;OverlayFs&lt;/b&gt;. Il s&#39;agit d&#39;un mécanisme de montage permettant de superposer dans un répertoire le contenu de plusieurs autres répertoires.
&lt;/p&gt;

&lt;p&gt;
Initialement Docker est basé &lt;b&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Aufs&#34;&gt;Aufs&lt;/a&gt;&lt;/b&gt; qui fait, pour simplifier, la même chose. Le problème avec aufs est qu&#39;il n&#39;est pas intégré dans le  noyau Linux (i.e. dans les sources officielles), contrairement à OverlayFS qui a fait son apparition avec le noyau &lt;a href=&#34;https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=e9be9d5e76e34872f0c37d72e25bc27fe9e2c54c&#34;&gt;3.18&lt;/a&gt;. Il était donc nécessaire de disposer d&#39;un noyau patché ; Le noyau Linux de Debian et de sess dérivés (Ubuntu, etc.) ont ce &lt;i&gt;patchset&lt;/i&gt; aufs de base mais ce n&#39;est pas le cas de toutes les distributions. L&#39;idée de cette intégration est assez simple : supporter le maximum de distributions en se basant sur une &lt;i&gt;feature&lt;/i&gt; du noyau. C&#39;est donc bien évidemment le &lt;i&gt;driver&lt;/i&gt; d&#39;avenir pour Docker ; attention cependant, la peinture est encore un peu fraîche &lt;code&gt;;-P&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-3&#34;&gt;Support d&#39;IPv6 (1.5.0)&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-3&#34;&gt;
&lt;p&gt;
Les adresses IPv4 commencent a se faire &lt;a href=&#34;http://en.wikipedia.org/wiki/IPv4_address_exhaustion&#34;&gt;rare&lt;/a&gt;, il est donc important que Docker supporte IPv6. C&#39;est désormais le cas avec la version 1.5.0, même si ce n&#39;est pas activé par défaut. Pour activer le support de l&#39;IPv6 (en plus de l&#39;IPv4), il faut ajouter le &lt;i&gt;flag&lt;/i&gt; &lt;code&gt;--ipv6&lt;/code&gt; au daemon. Docker va donc mettre en place le &lt;i&gt;bridge&lt;/i&gt; &lt;code&gt;docker0&lt;/code&gt; avec en plus un IPv6 en mode local, avec l&#39;adresse &lt;code&gt;fe80::1&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
Par défaut les containers qui seront créés n&#39;auront qu&#39;une adresse locale. Pour avoir une adresse IPv6 routable à votre conteneur, il est nécessaire de lui préciser un &lt;i&gt;sous-réseau&lt;/i&gt; (subnet) dans lequel il va piocher son adresse. Cela se fait grâce à l&#39;argument &lt;code&gt;--fixed-cidr-v6&lt;/code&gt;.
&lt;/p&gt;


&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #43783f;&#34;&gt;-d&lt;/span&gt; &lt;span style=&#34;color: #374478;&#34;&gt;--ipv6&lt;/span&gt; &lt;span style=&#34;color: #78683f;&#34;&gt;--fixed-cidr-v6&lt;/span&gt;=&lt;span style=&#34;color: #008000;&#34;&gt;&#34;2001:db8:1::/64&#34;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Comme je ne suis pas un pro de l&#39;IPv6, pour plus d&#39;information, et si l&#39;anglais ne vous fait pas peur, c&#39;est dans la &lt;a href=&#34;https://docs.docker.com/articles/networking/#ipv6&#34;&gt;documentation &#34;networking&#34;&lt;/a&gt; de Docker.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-4&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-4&#34;&gt;Conteneurs en lecture seule (1.5.0)&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-4&#34;&gt;
&lt;p&gt;
Une autre fonctionnalité assez sympathique qui est arrivé avec cette version 1.5.0 est les conteneurs en lecture seule — c&#39;est Michael Crosby qui s&#39;est occupé d&#39;&lt;a href=&#34;https://github.com/docker/docker/pull/10093&#34;&gt;implémenter ça&lt;/a&gt;. L&#39;intérêt des conteneurs en lecture seule est de permettre de &lt;b&gt;contrôler où l&#39;application&lt;/b&gt; à l&#39;intérieur de votre conteneur &lt;b&gt;peut écrire ou modifier des fichiers&lt;/b&gt;. En combinant ceci avec les volumes, vous pouvez vous assurez des emplacements dans lesquels votre conteneur va persister des états ou données (le/les volumes), puisqu&#39;il ne sera pas possible d&#39;écrire ailleurs de toute façon.
&lt;/p&gt;

&lt;p&gt;
Pour activer cette fonctionnalité, c&#39;est l&#39;argument &lt;code&gt;--read-only&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #513f78;&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color: #43783f;&#34;&gt;--read-only&lt;/span&gt; &lt;span style=&#34;color: #5e7837;&#34;&gt;-v&lt;/span&gt; &lt;span style=&#34;color: #5e7837;&#34;&gt;/volume/writable&lt;/span&gt; &lt;span style=&#34;color: #3f7178;&#34;&gt;busybox&lt;/span&gt; &lt;span style=&#34;color: #783778;&#34;&gt;touch&lt;/span&gt; &lt;span style=&#34;color: #5e7837;&#34;&gt;/volume/writable&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Une autre utilisation des conteneurs en lecture seule est que cela donne la possibilité de faire du debug &lt;i&gt;post-mortem&lt;/i&gt; d&#39;un conteneur (en production par exemple). Cela nous permet de redémarrer un conteneur qui aurait planté, en lecture seule avec le système de fichier dans l&#39;état du crash.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-5&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-5&#34;&gt;Les labels pour le « daemon », les images et les conteneurs (1.6.0)&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-5&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;
One Meta Data to Rule Them All
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Une des deux fonctionnalités très attendue de la récente version 1.6.0 sont les labels. En un mot, et pour le faire « à-la » &lt;i&gt;le seigneur des anneaux&lt;/i&gt;, les labels peuvent se résumer en &#34;&lt;b&gt;Une metadata pour les gouverner tous&lt;/b&gt;&#34; (ça le fait vachement mieux en anglais en fait).
&lt;/p&gt;

&lt;p&gt;
Les labels s&#39;appliquent sur le &lt;i&gt;daemon&lt;/i&gt;, les images et les conteneurs. C&#39;est un peu un mélange entre des tags et des variables d&#39;environnements puisque il s&#39;agit d&#39;un couple &lt;b&gt;clé/valeur&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
L&#39;ajout de label sur le &lt;i&gt;daemon&lt;/i&gt; se fait grâce à l&#39;argument — roulement de tambour — &lt;code&gt;--label&lt;/code&gt; (&lt;code&gt;\o/&lt;/code&gt;). La principale utilité pour l&#39;instant est son utilisation conjointe avec Swarm dont nous parlerons un peu plus bas ; mais en deux mots, cela permet de filtrer les &lt;i&gt;engines&lt;/i&gt; sur lesquels on va &lt;i&gt;taper&lt;/i&gt;.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;Souvent, c&#39;est dans DOCKER_OPTS du fichier /etc/default/docker&lt;/span&gt;
&lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #43783f;&#34;&gt;-d&lt;/span&gt; &lt;span style=&#34;color: #784437;&#34;&gt;-H&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;unix://var/run/docker.sock&lt;/span&gt; &lt;span style=&#34;color: #7a4f7e;&#34;&gt;--label&lt;/span&gt; &lt;span style=&#34;color: #BA36A5;&#34;&gt;storage&lt;/span&gt;=&lt;span style=&#34;color: #5e7837;&#34;&gt;ssd&lt;/span&gt; &lt;span style=&#34;color: #7a4f7e;&#34;&gt;--label&lt;/span&gt; &lt;span style=&#34;color: #BA36A5;&#34;&gt;type&lt;/span&gt;=&lt;span style=&#34;color: #5e7837;&#34;&gt;laptop&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
L&#39;ajout d&#39;un label sur une image se fait dans le fichier &lt;code&gt;Dockerfile&lt;/code&gt;, et l&#39;ajout d&#39;un label sur un conteneur, grâce à l&#39;argument &lt;code&gt;--label&lt;/code&gt; pour rester cohérent. Construisons une image inutile mais en lui appliquant un label :
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&lt;span style=&#34;color: #37785e;&#34;&gt;FROM&lt;/span&gt; &lt;span style=&#34;color: #3f7178;&#34;&gt;busybox&lt;/span&gt;
&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;Support du multi-line pour LABEL&lt;/span&gt;
&lt;span style=&#34;color: #783778;&#34;&gt;LABEL&lt;/span&gt; &lt;span style=&#34;color: #BA36A5;&#34;&gt;vendor&lt;/span&gt;=&lt;span style=&#34;color: #78683f;&#34;&gt;zenika&lt;/span&gt; &lt;span style=&#34;color: #008000;&#34;&gt;\&lt;/span&gt;
      &lt;span style=&#34;color: #784437;&#34;&gt;com.zenika.lang&lt;/span&gt;=&lt;span style=&#34;color: #374478;&#34;&gt;golang&lt;/span&gt; &lt;span style=&#34;color: #008000;&#34;&gt;\&lt;/span&gt;
      &lt;span style=&#34;color: #78683f;&#34;&gt;com.zenika.version&lt;/span&gt;=&lt;span style=&#34;color: #43783f;&#34;&gt;0.1&lt;/span&gt;
&lt;span style=&#34;color: #7a4f7e;&#34;&gt;CMD&lt;/span&gt; [&lt;span style=&#34;color: #008000;&#34;&gt;&#34;echo&#34;&lt;/span&gt;&lt;span style=&#34;color: #7e544f;&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #008000;&#34;&gt;&#34;zenika&#34;&lt;/span&gt;]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Nous allons maintenant construire cette image et lancer un conteneur à partir de cette dernière avec un autre label.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;$ &lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #7e544f;&#34;&gt;build&lt;/span&gt; &lt;span style=&#34;color: #7a4f7e;&#34;&gt;-t&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;zenikaapp&lt;/span&gt; &lt;span style=&#34;color: #374478;&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;[&amp;#8230;]&lt;/span&gt;
$ &lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #513f78;&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;--name&lt;/span&gt; &lt;span style=&#34;color: #783f5a;&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color: #7a4f7e;&#34;&gt;--label&lt;/span&gt; &lt;span style=&#34;color: #783f5a;&#34;&gt;com.zenika.foo&lt;/span&gt;=&lt;span style=&#34;color: #784437;&#34;&gt;bar&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;zenikaapp&lt;/span&gt;
&lt;span style=&#34;color: #78683f;&#34;&gt;zenika&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
L&#39;idée c&#39;est que maintenant, lorsque l&#39;on va regarder la liste d&#39;images ou de conteneurs à disposition sur notre &lt;i&gt;engine&lt;/i&gt;, nous allons pouvoir &lt;b&gt;filtrer&lt;/b&gt; par label, comme suit :
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;$ &lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #707e4f;&#34;&gt;images&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;--filter&lt;/span&gt; &lt;span style=&#34;color: #008000;&#34;&gt;&#34;label=vendor=zenika&#34;&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;--filter&lt;/span&gt; &lt;span style=&#34;color: #008000;&#34;&gt;&#34;label=com.zenika.lang=golang&#34;&lt;/span&gt;
&lt;span style=&#34;color: #784437;&#34;&gt;REPOSITORY&lt;/span&gt;          &lt;span style=&#34;color: #3f7178;&#34;&gt;TAG&lt;/span&gt;                 &lt;span style=&#34;color: #707e4f;&#34;&gt;IMAGE&lt;/span&gt; &lt;span style=&#34;color: #707e4f;&#34;&gt;ID&lt;/span&gt;            &lt;span style=&#34;color: #7e544f;&#34;&gt;CREATED&lt;/span&gt;             &lt;span style=&#34;color: #784437;&#34;&gt;VIRTUAL&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;SIZE&lt;/span&gt;
&lt;span style=&#34;color: #4f7e67;&#34;&gt;zenikaapp&lt;/span&gt;           &lt;span style=&#34;color: #7a4f7e;&#34;&gt;latest&lt;/span&gt;              &lt;span style=&#34;color: #784437;&#34;&gt;66ffda023118&lt;/span&gt;        &lt;span style=&#34;color: #5e7837;&#34;&gt;43&lt;/span&gt; &lt;span style=&#34;color: #7e544f;&#34;&gt;seconds&lt;/span&gt; &lt;span style=&#34;color: #43783f;&#34;&gt;ago&lt;/span&gt;      &lt;span style=&#34;color: #783778;&#34;&gt;2.433&lt;/span&gt; &lt;span style=&#34;color: #7e544f;&#34;&gt;MB&lt;/span&gt;
$ &lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #43783f;&#34;&gt;ps&lt;/span&gt; &lt;span style=&#34;color: #784437;&#34;&gt;-a&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;--filter&lt;/span&gt; &lt;span style=&#34;color: #008000;&#34;&gt;&#34;label=com.zenika.foo=bar&#34;&lt;/span&gt;
&lt;span style=&#34;color: #374478;&#34;&gt;CONTAINER&lt;/span&gt; &lt;span style=&#34;color: #707e4f;&#34;&gt;ID&lt;/span&gt;        &lt;span style=&#34;color: #707e4f;&#34;&gt;IMAGE&lt;/span&gt;               &lt;span style=&#34;color: #78683f;&#34;&gt;COMMAND&lt;/span&gt;             &lt;span style=&#34;color: #7e544f;&#34;&gt;CREATED&lt;/span&gt;              [&lt;span style=&#34;color: #374478;&#34;&gt;&amp;#8230;&lt;/span&gt;]   &lt;span style=&#34;color: #707e4f;&#34;&gt;NAMES&lt;/span&gt;
&lt;span style=&#34;color: #513f78;&#34;&gt;37e9a37caf57&lt;/span&gt;        &lt;span style=&#34;color: #513f78;&#34;&gt;zenikaapp:latest&lt;/span&gt;    &lt;span style=&#34;color: #008000;&#34;&gt;&#34;echo zenika&#34;&lt;/span&gt;       &lt;span style=&#34;color: #43783f;&#34;&gt;About&lt;/span&gt; &lt;span style=&#34;color: #78683f;&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color: #37785e;&#34;&gt;minute&lt;/span&gt; &lt;span style=&#34;color: #43783f;&#34;&gt;ago&lt;/span&gt;   [&lt;span style=&#34;color: #374478;&#34;&gt;&amp;#8230;&lt;/span&gt;]   &lt;span style=&#34;color: #783f5a;&#34;&gt;test&lt;/span&gt;
&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;On peut &amp;#233;galement regarder les labels avec inspect&lt;/span&gt;
$ &lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #374478;&#34;&gt;inspect&lt;/span&gt; &lt;span style=&#34;color: #3f7178;&#34;&gt;-f&lt;/span&gt; &lt;span style=&#34;color: #008000;&#34;&gt;&#34;{{json .ContainerConfig.Labels }}&#34;&lt;/span&gt; &lt;span style=&#34;color: #783f5a;&#34;&gt;zenikaap&lt;/span&gt;
{&lt;span style=&#34;color: #008000;&#34;&gt;&#34;com.zenika.lang&#34;&lt;/span&gt;&lt;span style=&#34;color: #707e4f;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&#34;golang&#34;&lt;/span&gt;&lt;span style=&#34;color: #7e544f;&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&#34;com.zenika.version&#34;&lt;/span&gt;&lt;span style=&#34;color: #707e4f;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&#34;0.1&#34;&lt;/span&gt;&lt;span style=&#34;color: #7e544f;&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&#34;vendor&#34;&lt;/span&gt;&lt;span style=&#34;color: #707e4f;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&#34;zenika&#34;&lt;/span&gt;}
$ &lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #374478;&#34;&gt;inspect&lt;/span&gt; &lt;span style=&#34;color: #3f7178;&#34;&gt;-f&lt;/span&gt; &lt;span style=&#34;color: #008000;&#34;&gt;&#34;{{json .Config.Labels }}&#34;&lt;/span&gt; &lt;span style=&#34;color: #783f5a;&#34;&gt;test&lt;/span&gt;
{&lt;span style=&#34;color: #008000;&#34;&gt;&#34;com.zenika.foo&#34;&lt;/span&gt;&lt;span style=&#34;color: #707e4f;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&#34;bar&#34;&lt;/span&gt;&lt;span style=&#34;color: #7e544f;&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&#34;com.zenika.lang&#34;&lt;/span&gt;&lt;span style=&#34;color: #707e4f;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&#34;golang&#34;&lt;/span&gt;&lt;span style=&#34;color: #7e544f;&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&#34;com.zenika.version&#34;&lt;/span&gt;&lt;span style=&#34;color: #707e4f;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&#34;0.1&#34;&lt;/span&gt;&lt;span style=&#34;color: #7e544f;&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&#34;vendor&#34;&lt;/span&gt;&lt;span style=&#34;color: #707e4f;&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color: #008000;&#34;&gt;&#34;zenika&#34;&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
On peut imaginer beaucoup d&#39;usage de ces labels. Par example, avec &lt;a href=&#34;http://rancher.com&#34;&gt;Rancher&lt;/a&gt;, ils sont utilisés pour faciliter la configuration du load-balancer (&lt;a href=&#34;http://rancher.com/docker-labels/&#34;&gt;ici&lt;/a&gt;) — ils utilisent un label &lt;code&gt;io.rancher.service.provides&lt;/code&gt; qui permettra à ce dernier de trouver automatiquement ces petits. Je vous laisse imaginer vos propres &lt;i&gt;use-cases&lt;/i&gt;.
&lt;/p&gt;

&lt;p&gt;
Il y a une partie de la documentation qui parle exclusivement des labels, avec une petite partie sur les &lt;i&gt;best-practice&lt;/i&gt; de nommage des labels, c&#39;est &lt;a href=&#34;https://docs.docker.com/userguide/labels-custom-metadata/&#34;&gt;ici&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-6&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-6&#34;&gt;Logging drivers \o/ (1.6.0)&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-6&#34;&gt;
&lt;p&gt;
Un &lt;i&gt;gros reproche&lt;/i&gt; qui était fait à Docker était sa gestion très &lt;b&gt;simpliste&lt;/b&gt; des logs des conteneurs. Plusieurs critiques étaient faites :
&lt;/p&gt;

&lt;ol class=&#34;org-ol&#34;&gt;
&lt;li&gt;Tout faire sortir sur &lt;code&gt;stdout&lt;/code&gt; et &lt;code&gt;stderr&lt;/code&gt; n&#39;est pas vraiment une habitude de nos jours, surtout dans des langages comme Java où l&#39;utilisation de &lt;i&gt;logger&lt;/i&gt; (Log4j, Slf4j, …) est très répandue. Cela rend le portage vers docker de certaines applications un peu plus fastidieux.
&lt;/li&gt;
&lt;li&gt;Il n&#39;y avait aucun mécanisme de &lt;i&gt;rotation&lt;/i&gt; de logs — et comme en plus le dossier dans lequel les logs étaient écris est un peu enfoui dans &lt;code&gt;/var/lib/docker&lt;/code&gt;, cela pouvait poser quelques problème si des conteneurs étaient un peu trop bavards..
&lt;/li&gt;
&lt;li&gt;La solution utilisée pour sauvegarder ces logs et pourquoi pas les centraliser (avec ELK par exemple), était d&#39;utiliser un volume, souvent partagé entre applications, et de démarrer un conteneur pour gérer cette analyse, centralisation, …. Non seulement ce n&#39;est pas très optimal, mais cela nécessitait de configurer chaque application (donc chaque conteneur) — et &lt;code&gt;docker logs&lt;/code&gt; perdait tout son intérêt.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Avec la version 1.6.0, les &lt;i&gt;logging driver&lt;/i&gt; permettent une gestion des logs un peu plus optimale, ou au moins plus flexible. Il est donc maintenant possible de préciser le &lt;i&gt;logging driver&lt;/i&gt; à utiliser. Ils en existent 3 pour l&#39;instant :
&lt;/p&gt;

&lt;ol class=&#34;org-ol&#34;&gt;
&lt;li&gt;&lt;code&gt;json-file&lt;/code&gt; correspond au comportement par défaut de Docker avant la 1.6 et reste la valeur par défaut
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;syslog&lt;/code&gt; qui permet de connecter les logs de nos conteneurs dans notre vénérable syslog (ou en tout cas quelqu&#39;un qui parl le syslog).
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt; qui est le magicien puisqu&#39;il nous permet de faire taire complètement un conteneur &lt;code&gt;o/&lt;/code&gt;.
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Il est possible de définir le logging driver à deux endroits :
&lt;/p&gt;

&lt;ol class=&#34;org-ol&#34;&gt;
&lt;li&gt;sur le &lt;b&gt;daemon&lt;/b&gt; pour la valeur par défaut de tous les conteneurs.
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;$ &lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #43783f;&#34;&gt;-d&lt;/span&gt; &lt;span style=&#34;color: #5e7837;&#34;&gt;--log-driver&lt;/span&gt;=&lt;span style=&#34;color: #008000;&#34;&gt;&#34;json-file&#34;&lt;/span&gt;
&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;Pour faire taire les conteneurs par d&amp;#233;faut&lt;/span&gt;
$ &lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #43783f;&#34;&gt;-d&lt;/span&gt; &lt;span style=&#34;color: #5e7837;&#34;&gt;--log-driver&lt;/span&gt;=&lt;span style=&#34;color: #008000;&#34;&gt;&#34;none&#34;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;ol class=&#34;org-ol&#34;&gt;
&lt;li&gt;en option de la command &lt;b&gt;run&lt;/b&gt; (ou de la commande &lt;b&gt;create&lt;/b&gt;).
&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;$ &lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #513f78;&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color: #5e7837;&#34;&gt;--log-driver&lt;/span&gt;=&lt;span style=&#34;color: #3f7178;&#34;&gt;syslog&lt;/span&gt; &lt;span style=&#34;color: #3f7178;&#34;&gt;ubuntu&lt;/span&gt; &lt;span style=&#34;color: #008000;&#34;&gt;\&lt;/span&gt;
  &lt;span style=&#34;color: #37785e;&#34;&gt;/bin/bash&lt;/span&gt; &lt;span style=&#34;color: #784437;&#34;&gt;-c&lt;/span&gt; &lt;span style=&#34;color: #008000;&#34;&gt;&#39;while true; do echo &#34;Hello&#34;; sleep1; done&#39;&lt;/span&gt;
$ &lt;span style=&#34;color: #707e4f;&#34;&gt;tail&lt;/span&gt; &lt;span style=&#34;color: #3f7178;&#34;&gt;-f&lt;/span&gt; &lt;span style=&#34;color: #784437;&#34;&gt;/var/log/syslog&lt;/span&gt;
&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;[&amp;#8230;]&lt;/span&gt;
&lt;span style=&#34;color: #374478;&#34;&gt;May&lt;/span&gt; &lt;span style=&#34;color: #3f7178;&#34;&gt;28&lt;/span&gt; &lt;span style=&#34;color: #3f7178;&#34;&gt;17:39:01&lt;/span&gt; &lt;span style=&#34;color: #7e544f;&#34;&gt;dev1&lt;/span&gt; &lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt;[&lt;span style=&#34;color: #5e7837;&#34;&gt;116314&lt;/span&gt;]&lt;span style=&#34;color: #707e4f;&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #513f78;&#34;&gt;0e5b67244c00:&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;Hello&lt;/span&gt;
&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;[&amp;#8230;]&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Une option &lt;code&gt;--log-opts&lt;/code&gt; est également présente pour passer des options additionnelles au driver si celui-ci les supporte. Notons également qu&#39;un driver pour &lt;code&gt;systemd&lt;/code&gt; devrait arriver avec la version 1.7.
&lt;/p&gt;

&lt;p&gt;
La pull-request ayant permis d&#39;intégrer cette fonctionnalité se trouve &lt;a href=&#34;https://github.com/docker/docker/pull/10568&#34;&gt;ici&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-7&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-7&#34;&gt;Client Windows natif (1.6.0)&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-7&#34;&gt;
&lt;p&gt;
Enfin, on s&#39;en doutait un peu après l&#39;annonce du partenariat entre Docker Microsoft, ça bosse beaucoup pour porter Docker vers Windows. La première étape était de fournir un client natif pour Windows. C&#39;est chose faite avec cette version 1.6. Maintenant beaucoup de travail est effectué pour rendre le &lt;i&gt;engine&lt;/i&gt; plus portable, il n&#39;y a qu&#39;à suivre un peu les pull-request avec un tag &lt;code&gt;os/windows&lt;/code&gt; ou encore cette très récente pull-request avec un titre plutôt évocateur : « &lt;a href=&#34;https://github.com/docker/docker/pull/13554&#34;&gt;Windows: The real Windows exec driver is here&lt;/a&gt; ».
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-8&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-8&#34;&gt;Divers&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-8&#34;&gt;
&lt;p&gt;
Il y a pas mal d&#39;autres options qui sont arrivées depuis la version 1.3.0, nous allons en parcourir certaines rapidement — parce que sinon cet article va faire 100 pages ;-p :
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;&lt;b&gt;Stats&lt;/b&gt; (1.5.0) : une commande &lt;code&gt;stats&lt;/code&gt; (et donc une API derrière) permet de récupérer quelques statistiques par conteneur, c&#39;est simple pour l&#39;instant.
&lt;/li&gt;
&lt;li&gt;Depuis la version 1.5.0 il est possible de spécifier le ficher Dockerfile grâce à l&#39;option &lt;code&gt;-f&lt;/code&gt; de la commande build — jusqu&#39;à maintenant docker regardait uniquement le dossier spécifié et cherchait le fichier &lt;code&gt;Dockerfile&lt;/code&gt;. Cela permet donc, par exemple, d&#39;avoir plusieurs &lt;code&gt;Dockerfile&lt;/code&gt; dans un dossier.
&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;$ &lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #7e544f;&#34;&gt;build&lt;/span&gt; &lt;span style=&#34;color: #7a4f7e;&#34;&gt;-t&lt;/span&gt; &lt;span style=&#34;color: #5e7837;&#34;&gt;monimage&lt;/span&gt; &lt;span style=&#34;color: #3f7178;&#34;&gt;-f&lt;/span&gt; &lt;span style=&#34;color: #43783f;&#34;&gt;backend.Dockerfile&lt;/span&gt; &lt;span style=&#34;color: #374478;&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;[&amp;#8230;] Build the backend&lt;/span&gt;
$ &lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #7e544f;&#34;&gt;build&lt;/span&gt; &lt;span style=&#34;color: #7a4f7e;&#34;&gt;-t&lt;/span&gt; &lt;span style=&#34;color: #5e7837;&#34;&gt;monimage&lt;/span&gt; &lt;span style=&#34;color: #3f7178;&#34;&gt;-f&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;frontend.Dockerfile&lt;/span&gt; &lt;span style=&#34;color: #374478;&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;[&amp;#8230;] Build the frontend&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;Le &lt;i&gt;registry&lt;/i&gt; voit son API passer en V2, principalement pour améliorer les transferts. L&#39;implémentation officielle a été réécrite en Go (à la place de Python) et se nomme maintenant &lt;a href=&#34;https://github.com/docker/distribution&#34;&gt;distribution&lt;/a&gt;.
&lt;/li&gt;
&lt;li&gt;La commande &lt;code&gt;commit est dotée, depuis la version 1.6.0, d&#39;une option =--change&lt;/code&gt; qui permet d&#39;appliquer une instruction supportée par les &lt;code&gt;Dockerfile&lt;/code&gt; — voir &lt;a href=&#34;https://docs.docker.com/reference/commandline/cli/#commit&#34;&gt;ici&lt;/a&gt;.
&lt;/li&gt;
&lt;li&gt;Docker a publié un petit document « &lt;a href=&#34;https://github.com/docker/docker/blob/master/image/spec/v1.md&#34;&gt;Docker Image Specification&lt;/a&gt; » qui a pour but de définir le format des images utilisées par Docker, permettant à d&#39;autres notamment des potentiels conccurents, d&#39;implémenter des images qui seraient compatible.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-9&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-9&#34;&gt;À venir&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-9&#34;&gt;
&lt;p&gt;
L&#39;une des principales nouveautés qui devrait arriver avec la version 1.7 de Docker, c&#39;est l&#39;intégration d&#39;une &lt;b&gt;nouvelle stack réseau&lt;/b&gt; avec l&#39;intégration du projet &lt;a href=&#34;https://github.com/docker/libnetwork&#34;&gt;libnetwork&lt;/a&gt;, si tout se passe bien. On pourra noter également de nouveaux &lt;i&gt;logging driver&lt;/i&gt;, avec notamment un &lt;code&gt;rollover&lt;/code&gt; driver ou encore le &lt;code&gt;systemd&lt;/code&gt; driver. On peut noter également l&#39;arrivée d&#39;un &lt;i&gt;filesystem driver&lt;/i&gt; pour ZFS (voici la &lt;a href=&#34;https://github.com/docker/docker/pull/9411&#34;&gt;pull-request&lt;/a&gt;). Le Docker Birthday étant passé par là, beaucoup de corrections de bugs, de nouvelles petites fonctionnalités, une meilleure couverture de code par les tests unitaires (&lt;code&gt;o/&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
La RC1 est disponible depuis le 28 mai, &lt;a href=&#34;https://github.com/docker/docker/releases/tag/v1.7.0-rc1&#34;&gt;ici&lt;/a&gt; et la &lt;a href=&#34;https://github.com/docker/docker/pull/13528&#34;&gt;pull-request&lt;/a&gt; associée, donc à vos tests !
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-10&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-10&#34;&gt;Écosystème&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-10&#34;&gt;
&lt;p&gt;
Trois projets « Docker » sont apparus depuis le dernier article : Compose, Swarm et Machine. Présentons les très rapidement.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-10-1&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-10-1&#34;&gt;Compose&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-10-1&#34;&gt;
&lt;p&gt;
Compose est le nouveau nom de Fig. Fig était développé par Orchard qui a été racheté par Docker. Pour rappel, l&#39;idée est de définir son environnement via un fichier YAML, que ce soit pour le code sur lequel nous travaillons mais également les services externes desquels notre application dépend (Base de données, &#39;&#39;Message queue&#39;&#39;, etc.).
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-yaml&#34;&gt;&lt;span style=&#34;color: #BA36A5;&#34;&gt;web&lt;/span&gt;:
  &lt;span style=&#34;color: #BA36A5;&#34;&gt;build&lt;/span&gt;: .
  &lt;span style=&#34;color: #BA36A5;&#34;&gt;command&lt;/span&gt;: lein run
  &lt;span style=&#34;color: #BA36A5;&#34;&gt;links&lt;/span&gt;:
   - db
  &lt;span style=&#34;color: #BA36A5;&#34;&gt;ports&lt;/span&gt;:
   - &lt;span style=&#34;color: #008000;&#34;&gt;&#34;8000:8000&#34;&lt;/span&gt;
&lt;span style=&#34;color: #BA36A5;&#34;&gt;db&lt;/span&gt;:
  &lt;span style=&#34;color: #BA36A5;&#34;&gt;image&lt;/span&gt;: postgres
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Compose est en version 1.2 — depuis la version 1.0, la majorité des modifications sont des corrections de bugs et des ajouts pour suivre les modifications et nouvelles fonctionnalités de Docker (&lt;code&gt;env-file&lt;/code&gt;, &lt;code&gt;dns_search&lt;/code&gt;, &lt;code&gt;add_host&lt;/code&gt;, &lt;code&gt;restart&lt;/code&gt;, &lt;code&gt;volumes_from&lt;/code&gt;, &lt;code&gt;net&lt;/code&gt;, …). La commande est maintenant &lt;code&gt;docker-compose&lt;/code&gt; à la place de &lt;code&gt;fig&lt;/code&gt; et le fichier &lt;code&gt;docker-compose.yml&lt;/code&gt; à la place de &lt;code&gt;fig.yml&lt;/code&gt; — pour des raisons de rétro-compatibilité, Compose continue de lire les &lt;code&gt;fig.yml&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-10-2&#34; class=&#34;outline-3&#34;&gt;
&lt;h3 id=&#34;sec-10-2&#34;&gt;Swarm &amp;amp; Machine&lt;/h3&gt;
&lt;div class=&#34;outline-text-3&#34; id=&#34;text-10-2&#34;&gt;
&lt;p&gt;
Deux nouveaux projets ont fait leur apparition dans l&#39;escarcelle de Docker Inc. : Swarm et Machine. Swarm est le &lt;i&gt;clustering&lt;/i&gt; à moyenne échelle vu par Docker. Machine permet de provisionner Docker sur différents providers : amazon aws, google compute engine, azure, Virtualbox pour ne citer qu&#39;eux — mais beaucoup d&#39;autres sont déjà supportés.
&lt;/p&gt;

&lt;p&gt;
Voilà ce que Jérôme Petazzoni dit à propos de Swarm :
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Un système de cluster utilisant l’API Docker et compatible avec tous les outils de l’écosystème maison. On peut utiliser les commandes classiques Docker pour piloter le cluster
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
L&#39;idée principale de Swarm est &lt;b&gt;Je veux parler à mon cluster Docker de la même façon que je parle avec mon daemon Docker&lt;/b&gt;. Cela se traduit assez simplement par : &lt;b&gt;Swarm expose la même API que docker&lt;/b&gt;. C&#39;est une idée simple et terriblement puissante puisque cela veut dire que je peux administrer mon cluster avec les mêmes commandes que j&#39;utilise quand je travaille en local.  Swarm a pour but de piloter des clusters d&#39;une taille relativement petite (moins de 1000 machines). Pour les clusters de plus grande taille, il existe de très bonnes solutions, comme &lt;a href=&#34;http://mesos.apache.org/&#34;&gt;Mesos&lt;/a&gt;, et ce n&#39;est pas le but de Docker Inc. de venir les concurrencer, bien au contraire.
&lt;/p&gt;

&lt;p&gt;
Pour faire simple, swarm c&#39;est un &lt;b&gt;manager&lt;/b&gt; et des &lt;b&gt;agents&lt;/b&gt; (un par engine) — les agents s&#39;enregistrent auprès du master par le biais d&#39;un &lt;i&gt;service discovery&lt;/i&gt;. Swarm dispose d&#39;un petit service de discovery mais qui n&#39;est là que pour &lt;i&gt;la démo&lt;/i&gt; ; il est possible et conseillé de le connecter à des solutions existantes, pour l&#39;instant &lt;a href=&#34;https://github.com/hashicorp/consul&#34;&gt;consul&lt;/a&gt; et &lt;a href=&#34;https://github.com/coreos/etcd&#34;&gt;etcd&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Un bout de code vaut mieux qu&#39;un long discours, voici comment &lt;i&gt;bootstraper&lt;/i&gt; un cluster Swarm, avec l&#39;aide de Machine pour être &lt;i&gt;funky&lt;/i&gt;.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;On cr&amp;#233;e un cluster simple avec son id&lt;/span&gt;
$ &lt;span style=&#34;color: #7a4f7e;&#34;&gt;swarm&lt;/span&gt; &lt;span style=&#34;color: #783f5a;&#34;&gt;create&lt;/span&gt;
&lt;span style=&#34;color: #3f7178;&#34;&gt;50862dcedd53c2f584adfb00e85bac4b&lt;/span&gt;
&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;On d&amp;#233;marre des agents&lt;/span&gt;
$ &lt;span style=&#34;color: #43783f;&#34;&gt;docker-machine&lt;/span&gt; &lt;span style=&#34;color: #783f5a;&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color: #43783f;&#34;&gt;-d&lt;/span&gt; &lt;span style=&#34;color: #374478;&#34;&gt;azure&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;--swarm&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;--swarm-discovery&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;token://50862dcedd53c2f584adfb00e85bac4b&lt;/span&gt; &lt;span style=&#34;color: #43783f;&#34;&gt;node1&lt;/span&gt;
&lt;span style=&#34;color: #3f7178;&#34;&gt;INFO&lt;/span&gt;[&lt;span style=&#34;color: #7a4f7e;&#34;&gt;0000&lt;/span&gt;] &lt;span style=&#34;color: #5e7837;&#34;&gt;Creating&lt;/span&gt; &lt;span style=&#34;color: #513f78;&#34;&gt;SSH&lt;/span&gt; &lt;span style=&#34;color: #5e7837;&#34;&gt;key...&lt;/span&gt;
&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;[&amp;#8230;]&lt;/span&gt;
$ &lt;span style=&#34;color: #43783f;&#34;&gt;docker-machine&lt;/span&gt; &lt;span style=&#34;color: #783f5a;&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color: #43783f;&#34;&gt;-d&lt;/span&gt; &lt;span style=&#34;color: #7e544f;&#34;&gt;digitalocean&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;--swarm&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;--swarm-discovery&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;token://50862dcedd53c2f584adfb00e85bac4b&lt;/span&gt; &lt;span style=&#34;color: #783f5a;&#34;&gt;node2&lt;/span&gt;
&lt;span style=&#34;color: #3f7178;&#34;&gt;INFO&lt;/span&gt;[&lt;span style=&#34;color: #7a4f7e;&#34;&gt;0000&lt;/span&gt;] &lt;span style=&#34;color: #5e7837;&#34;&gt;Creating&lt;/span&gt; &lt;span style=&#34;color: #513f78;&#34;&gt;SSH&lt;/span&gt; &lt;span style=&#34;color: #5e7837;&#34;&gt;key...&lt;/span&gt;
&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;[&amp;#8230;]&lt;/span&gt;
&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;On d&amp;#233;marre le master&lt;/span&gt;
$ &lt;span style=&#34;color: #43783f;&#34;&gt;docker-machine&lt;/span&gt; &lt;span style=&#34;color: #783f5a;&#34;&gt;create&lt;/span&gt; &lt;span style=&#34;color: #43783f;&#34;&gt;-d&lt;/span&gt; &lt;span style=&#34;color: #78683f;&#34;&gt;virtualbox&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;--swarm&lt;/span&gt; &lt;span style=&#34;color: #707e4f;&#34;&gt;--swarm-master&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;--swarm-discovery&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;token://50862dcedd53c2f584adfb00e85bac4b&lt;/span&gt; &lt;span style=&#34;color: #374478;&#34;&gt;manager&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Maintenant que l&#39;on dispose d&#39;un petit cluster, en pointant dessus (merci Machine) on va pouvoir lancer des commandes docker.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;$ $(&lt;span style=&#34;color: #43783f;&#34;&gt;docker-machine&lt;/span&gt; &lt;span style=&#34;color: #7a4f7e;&#34;&gt;env&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;--swarm&lt;/span&gt; &lt;span style=&#34;color: #374478;&#34;&gt;manager&lt;/span&gt;)
&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;Le bon vieux info&lt;/span&gt;
$ &lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #784437;&#34;&gt;info&lt;/span&gt;
&lt;span style=&#34;color: #3f7178;&#34;&gt;Containers:&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;4&lt;/span&gt;
&lt;span style=&#34;color: #4f5c7e;&#34;&gt;Nodes:&lt;/span&gt; &lt;span style=&#34;color: #7e544f;&#34;&gt;3&lt;/span&gt;
 &lt;span style=&#34;color: #374478;&#34;&gt;manager:&lt;/span&gt; &lt;span style=&#34;color: #7e544f;&#34;&gt;192.168.99.103:2376&lt;/span&gt;
  &lt;span style=&#34;color: #78683f;&#34;&gt;&amp;#9492;&lt;/span&gt; &lt;span style=&#34;color: #3f7178;&#34;&gt;Containers:&lt;/span&gt; &lt;span style=&#34;color: #513f78;&#34;&gt;2&lt;/span&gt;
  &lt;span style=&#34;color: #78683f;&#34;&gt;&amp;#9492;&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;Reserved&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;CPUs:&lt;/span&gt; &lt;span style=&#34;color: #784437;&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #783778;&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;4&lt;/span&gt;
  &lt;span style=&#34;color: #78683f;&#34;&gt;&amp;#9492;&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;Reserved&lt;/span&gt; &lt;span style=&#34;color: #7a4f7e;&#34;&gt;Memory:&lt;/span&gt; &lt;span style=&#34;color: #784437;&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color: #783778;&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #707e4f;&#34;&gt;999.9&lt;/span&gt; &lt;span style=&#34;color: #783f5a;&#34;&gt;MiB&lt;/span&gt;
 &lt;span style=&#34;color: #78683f;&#34;&gt;node1:&lt;/span&gt; &lt;span style=&#34;color: #513f78;&#34;&gt;45.55.160.223:2376&lt;/span&gt;
  &lt;span style=&#34;color: #78683f;&#34;&gt;&amp;#9492;&lt;/span&gt; &lt;span style=&#34;color: #3f7178;&#34;&gt;Containers:&lt;/span&gt; &lt;span style=&#34;color: #78683f;&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color: #78683f;&#34;&gt;&amp;#9492;&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;Reserved&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;CPUs:&lt;/span&gt; &lt;span style=&#34;color: #784437;&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #783778;&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #78683f;&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color: #78683f;&#34;&gt;&amp;#9492;&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;Reserved&lt;/span&gt; &lt;span style=&#34;color: #7a4f7e;&#34;&gt;Memory:&lt;/span&gt; &lt;span style=&#34;color: #784437;&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color: #783778;&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;490&lt;/span&gt; &lt;span style=&#34;color: #783f5a;&#34;&gt;MiB&lt;/span&gt;
 &lt;span style=&#34;color: #513f78;&#34;&gt;node2:&lt;/span&gt; &lt;span style=&#34;color: #707e4f;&#34;&gt;swarm-nwde2.cloudapp.net:2376&lt;/span&gt;
  &lt;span style=&#34;color: #78683f;&#34;&gt;&amp;#9492;&lt;/span&gt; &lt;span style=&#34;color: #3f7178;&#34;&gt;Containers:&lt;/span&gt; &lt;span style=&#34;color: #78683f;&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color: #78683f;&#34;&gt;&amp;#9492;&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;Reserved&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;CPUs:&lt;/span&gt; &lt;span style=&#34;color: #784437;&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #783778;&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #78683f;&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color: #78683f;&#34;&gt;&amp;#9492;&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;Reserved&lt;/span&gt; &lt;span style=&#34;color: #7a4f7e;&#34;&gt;Memory:&lt;/span&gt; &lt;span style=&#34;color: #784437;&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;B&lt;/span&gt; &lt;span style=&#34;color: #783778;&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color: #7e544f;&#34;&gt;1.639&lt;/span&gt; &lt;span style=&#34;color: #3f7178;&#34;&gt;GiB&lt;/span&gt;
&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;On d&amp;#233;marre des nginx&lt;/span&gt;
$ &lt;span style=&#34;color: #4f7e67;&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #7a4f7e;&#34;&gt;i&lt;/span&gt;&lt;span style=&#34;color: #0000FF;&#34;&gt; in&lt;/span&gt; &lt;span style=&#34;color: #FF1493;&#34;&gt;`seq 1 3`&lt;/span&gt;; &lt;span style=&#34;color: #0000FF;&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #513f78;&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color: #43783f;&#34;&gt;-d&lt;/span&gt; &lt;span style=&#34;color: #783f5a;&#34;&gt;-p&lt;/span&gt; &lt;span style=&#34;color: #7a4f7e;&#34;&gt;80:80&lt;/span&gt; &lt;span style=&#34;color: #783778;&#34;&gt;nginx&lt;/span&gt;; &lt;span style=&#34;color: #0000FF;&#34;&gt;done&lt;/span&gt;
$ &lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #43783f;&#34;&gt;ps&lt;/span&gt;
&lt;span style=&#34;color: #374478;&#34;&gt;CONTAINER&lt;/span&gt; &lt;span style=&#34;color: #707e4f;&#34;&gt;ID&lt;/span&gt;    &lt;span style=&#34;color: #707e4f;&#34;&gt;IMAGE&lt;/span&gt;       &lt;span style=&#34;color: #78683f;&#34;&gt;COMMAND&lt;/span&gt;                &lt;span style=&#34;color: #78683f;&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #3f7178;&#34;&gt;PORTS&lt;/span&gt;                                &lt;span style=&#34;color: #707e4f;&#34;&gt;NAMES&lt;/span&gt;
&lt;span style=&#34;color: #374478;&#34;&gt;9bff07d8ee18&lt;/span&gt;    &lt;span style=&#34;color: #78683f;&#34;&gt;nginx:1.7&lt;/span&gt;   &lt;span style=&#34;color: #008000;&#34;&gt;&#34;nginx -g &#39;daemon of   ... 443/tcp, 104.210.33.180:80-&amp;gt;80/tcp   node1/loving_torvalds&lt;/span&gt;
&lt;span style=&#34;color: #008000;&#34;&gt;457ed59c9bb3    nginx:1.7   &#34;&lt;/span&gt;&lt;span style=&#34;color: #783778;&#34;&gt;nginx&lt;/span&gt; &lt;span style=&#34;color: #78683f;&#34;&gt;-g&lt;/span&gt; &lt;span style=&#34;color: #008000;&#34;&gt;&#39;daemon of   ... 443/tcp, 45.55.160.223:80-&amp;gt;80/tcp    node2/drunk_swartz&lt;/span&gt;
&lt;span style=&#34;color: #008000;&#34;&gt;6013be18cdbc    nginx:1.7   &#34;nginx -g &#39;&lt;/span&gt;&lt;span style=&#34;color: #3f7178;&#34;&gt;daemon&lt;/span&gt; &lt;span style=&#34;color: #5e7837;&#34;&gt;of&lt;/span&gt;   &lt;span style=&#34;color: #78683f;&#34;&gt;...&lt;/span&gt; &lt;span style=&#34;color: #784437;&#34;&gt;443/tcp,&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;192.168.99.103:80-&lt;/span&gt;&amp;gt;&lt;span style=&#34;color: #5e7837;&#34;&gt;80/tcp&lt;/span&gt;   &lt;span style=&#34;color: #707e4f;&#34;&gt;manager/condescending_galileo&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
On voit qu&#39;on a démarré nginx sur les 3 nœuds. Swarm a quelques stratégies pour démarrer un conteneur sur un nœud ou l&#39;autre :
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;&lt;code&gt;spread&lt;/code&gt; va éparpiller les conteneurs pour que chaque nœud en ait le moins possible (répartis).
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;binpack&lt;/code&gt; va faire l&#39;inverse (tout sur le même nœud jusqu&#39;à ce que ses ressources soient épuisés).
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;random&lt;/code&gt; qui fait &lt;i&gt;au pif&lt;/i&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Il est également possible de mettre des contraintes lors du lancement d&#39;un conteneur, en utilisant le flag &lt;code&gt;-e&lt;/code&gt; de &lt;code&gt;docker run&lt;/code&gt; (&lt;code&gt;-e&lt;/code&gt; = variables d&#39;environnement).
&lt;/p&gt;


&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-sh&#34;&gt;&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;D&amp;#233;marrer postgres sur un host qui a le label storage=ssd&lt;/span&gt;
$ &lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #513f78;&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color: #43783f;&#34;&gt;-d&lt;/span&gt; &lt;span style=&#34;color: #707e4f;&#34;&gt;-e&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;constraint:&lt;/span&gt;&lt;span style=&#34;color: #4f5c7e;&#34;&gt;storage&lt;/span&gt;==&lt;span style=&#34;color: #5e7837;&#34;&gt;ssd&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;--name&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;postgres&lt;/span&gt; &lt;span style=&#34;color: #4f7e67;&#34;&gt;postgres&lt;/span&gt;
&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;D&amp;#233;marrer redis &amp;#224; cot&amp;#233; du conteneur dont le nom est postgres&lt;/span&gt;
$ &lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #513f78;&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color: #43783f;&#34;&gt;-d&lt;/span&gt; &lt;span style=&#34;color: #707e4f;&#34;&gt;-e&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;affinity:&lt;/span&gt;&lt;span style=&#34;color: #4f5c7e;&#34;&gt;container&lt;/span&gt;==&lt;span style=&#34;color: #4f7e67;&#34;&gt;postgres&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;--name&lt;/span&gt; &lt;span style=&#34;color: #7e544f;&#34;&gt;redis&lt;/span&gt; &lt;span style=&#34;color: #7e544f;&#34;&gt;redis&lt;/span&gt;
&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;D&amp;#233;marer backend o&amp;#249; tu veux, mais comme les links sont des contraintes&lt;/span&gt;
&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;implicites il d&amp;#233;marrera sur le m&amp;#234;me host que postgres ET redis&lt;/span&gt;
&lt;span style=&#34;color: #8D8D84;&#34;&gt;# &lt;/span&gt;&lt;span style=&#34;color: #8D8D84; font-style: italic;&#34;&gt;(ou ne d&amp;#233;marrera pas ces derniers ne sont pas au m&amp;#234;me endroit)&lt;/span&gt;
$ &lt;span style=&#34;color: #783778;&#34;&gt;docker&lt;/span&gt; &lt;span style=&#34;color: #513f78;&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color: #43783f;&#34;&gt;-d&lt;/span&gt; &lt;span style=&#34;color: #374478;&#34;&gt;--link&lt;/span&gt; &lt;span style=&#34;color: #3f7178;&#34;&gt;redis:redis&lt;/span&gt; &lt;span style=&#34;color: #374478;&#34;&gt;--link&lt;/span&gt; &lt;span style=&#34;color: #784437;&#34;&gt;postgres:db&lt;/span&gt; &lt;span style=&#34;color: #4f5c7e;&#34;&gt;--name&lt;/span&gt; &lt;span style=&#34;color: #78683f;&#34;&gt;backend&lt;/span&gt; &lt;span style=&#34;color: #78683f;&#34;&gt;backend&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
On pourrait faire un article dédié à Swarm (ce qui sera probablement le cas dans un avenir assez proche) donc je vous laisse le découvrir via &lt;a href=&#34;https://github.com/docker/swarm/&#34;&gt;github&lt;/a&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-11&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-11&#34;&gt;Levées de fonds et acquisitons&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-11&#34;&gt;
&lt;p&gt;
Docker est sur toutes les lèvres en ce moment. Il est donc normal que cela attire également des capitaux. Le 14 avril dernier, Docker annonçait une nouvelle levée de fonds de &lt;b&gt;95 millions&lt;/b&gt; de dollars. Après celle de &lt;i&gt;40 millions&lt;/i&gt; en Septembre 2014, on peut se dire que Docker Inc. a de beaux jours à venir.
&lt;/p&gt;

&lt;p&gt;
Docker Inc. « mange » aussi quelques startups, puisque après Orchard, qui éditait fig (devenu docker-compose), ils ont fait l&#39;acquisition de &lt;a href=&#34;http://socketplane.io/&#34;&gt;Socketplane&lt;/a&gt; et &lt;a href=&#34;https://kitematic.com/&#34;&gt;Kitematic&lt;/a&gt;. Kitematic est un outil &lt;i&gt;desktop&lt;/i&gt; qui permet de facilement utiliser Docker sous Mac OS X, une belle application, un peu « clickodrome » &lt;code&gt;;-P&lt;/code&gt;. &lt;a href=&#34;http://socketplane.io/&#34;&gt;Socketplane&lt;/a&gt; est une solution réseau qui connectait Open vSwitch avec Docker — nulle doute que la récente libnetwork vient de là.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-12&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-12&#34;&gt;Évènements&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-12&#34;&gt;
&lt;p&gt;
Nous allons finir avec une liste non-exhaustive et un peu orientée des évènements &lt;i&gt;marquants&lt;/i&gt; qui se sont passés ces derniers mois :
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;Le &lt;a href=&#34;https://blog.docker.com/2014/11/docker-tour-de-france/&#34;&gt;Docker Tour de France&lt;/a&gt;, avec notament un &lt;a href=&#34;http://www.meetup.com/Docker-Paris/events/218767688/&#34;&gt;hackathon&lt;/a&gt; organisé à l&#39;&lt;a href=&#34;http://www.epitech.eu/paris/ecole-informatique-paris.aspx&#34;&gt;Epitech&lt;/a&gt;, où notre &lt;a href=&#34;https://twitter.com/mariolet&#34;&gt;Mario Loriedo&lt;/a&gt; national a bootstrapé son projet Sublime-docker avec &lt;a href=&#34;https://github.com/mjbright&#34;&gt;Mike Bright&lt;/a&gt; et à du coup gagné sa place à la DockerCon de 2015.
&lt;/li&gt;
&lt;li&gt;Les &lt;a href=&#34;http://blog.zenika.com/index.php?post/2015/02/19/NightClazz-Docker-Avance&#34;&gt;Nightclazz&lt;/a&gt; &lt;a href=&#34;http://zenika.github.io/NC-Docker-Decouverte/&#34;&gt;découverte&lt;/a&gt; et &lt;a href=&#34;http://zenika.github.io/NC-Docker-Avance/#/&#34;&gt;avancée&lt;/a&gt; hébergé par Zenika, présenté par Mario Loriedo et moi-même ;-).
&lt;/li&gt;
&lt;li&gt;La DockerCon Europe.
&lt;/li&gt;
&lt;li&gt;Le &lt;a href=&#34;http://docker.party/&#34;&gt;Docker Birthday&lt;/a&gt;, gigantesque &lt;i&gt;Open-source-athon&lt;/i&gt; tout autour du monde — une véritable réussite, tant au niveau de l&#39;organisation (des évènements, la préparation en amont des &lt;i&gt;issues&lt;/i&gt;, etc.) que de ce qu&#39;il en est &lt;a href=&#34;https://blog.docker.com/2015/05/dockers-2nd-birthday-by-the-numbers/&#34;&gt;ressorti&lt;/a&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Migration vers hugo</title>
      <link>https://vincent.demeester.fr/posts/2015-05-09-migration-to-hugo/</link>
      <pubDate>Sat, 09 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2015-05-09-migration-to-hugo/</guid>
      <description>&lt;p&gt;
Et voilà, une semaine après m&#39;être remis en route sur ce blog, je fais
déjà une migration &lt;code&gt;&amp;gt;_&amp;lt;&lt;/code&gt;. Je me suis rendu compte que &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;
m&#39;énervait un peu, et comme je suis à fond dans &lt;a href=&#34;http://golang.org/&#34;&gt;go&lt;/a&gt; en ce moment, j&#39;ai
regardé du côté des générateurs de sites static et &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; a clairement
retenu mon attention.
&lt;/p&gt;

&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;Pourquoi Hugo ?&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;b&gt;Make the Web Fun Again&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Introducing Hugo, a new idea around making website creation simple again. Hugo flexibly works with many formats and is ideal for blogs, docs, portfolios and much more. Hugo’s speed fosters creativity and makes building a website fun again.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Presque tout est dit dans cette citation.
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;Hugo est rapide.
&lt;/li&gt;
&lt;li&gt;Le système de content est un régale.
&lt;/li&gt;
&lt;li&gt;L&#39;organisation d&#39;un &lt;i&gt;projet hugo&lt;/i&gt; est simple :
&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;&lt;code&gt;content&lt;/code&gt; pour le contenu, avec ce qu&#39;on veut dedans,
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt; pour le contenu statique (&lt;code&gt;css&lt;/code&gt;, &lt;code&gt;javascript&lt;/code&gt;, &lt;code&gt;images&lt;/code&gt;, …),
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;layouts&lt;/code&gt; pour les templates (super facile de mettre des templates différents en fonction des contenus, voir &lt;a href=&#34;http://gohugo.io/templates/content/&#34;&gt;ici&lt;/a&gt;),
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;themes&lt;/code&gt; pour les themes applicables (qui définissent eux même &lt;code&gt;layouts&lt;/code&gt; et &lt;code&gt;static&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Le système de template est &lt;a href=&#34;http://gohugo.io/templates/go-templates/&#34;&gt;puissant&lt;/a&gt; et un vrai régale.
&lt;/li&gt;
&lt;li&gt;Le mode &lt;code&gt;server&lt;/code&gt; a la possiblité de surveiller les fichiers(avec le &lt;i&gt;flag&lt;/i&gt; &lt;code&gt;-w&lt;/code&gt;, et implémente &lt;a href=&#34;http://gohugo.io/extras/livereload/&#34;&gt;LiveReload&lt;/a&gt; ce qui est un petit bonus non négligeable.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-2&#34;&gt;Ce qui changes&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-2&#34;&gt;
&lt;p&gt;
Le principale changement est sur le/les repository utilisés. Avant tout était dans &lt;a href=&#34;https://github.com/vdemeester/vdemeester.github.com&#34;&gt;vdemeester.github.com&lt;/a&gt;, puisque c&#39;est github qui générait le résultat final avec Jekyll. Ce n&#39;est maintenant plus le cas : &lt;a href=&#34;https://github.com/vdemeester/blog&#34;&gt;blog&lt;/a&gt; héberge les sources du blog (les fichiers content en Markdown ou &lt;i&gt;HTML-from-orgmode&lt;/i&gt; ainsi que les templates et la configuration &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; — &lt;a href=&#34;https://github.com/vdemeester/vdemeester.github.com&#34;&gt;vdemeester.github.com&lt;/a&gt; héberge désormais le résultat.
&lt;/p&gt;

&lt;p&gt;
J&#39;en ai profité également pour faire quelques ajustements graphique, principalement sur les tags qui ont maintenant, parfois, des couleurs différentes.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-3&#34;&gt;Intégration avec Emacs &amp;amp; orgmode&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-3&#34;&gt;
&lt;p&gt;
Il me manque encore quelques petits &lt;i&gt;trucs&lt;/i&gt; pour rendre ça automatique, mais dans l&#39;idée, voilà le workflow que j&#39;utilise quand je publie un article (comme maintenant) :
&lt;/p&gt;

&lt;ol class=&#34;org-ol&#34;&gt;
&lt;li&gt;Démarre &lt;code&gt;hugo server -w&lt;/code&gt; dans mon repository &lt;code&gt;blog&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Je créer mon fichier &lt;code&gt;org&lt;/code&gt; au bon endroit (soit &lt;code&gt;$HOME/desktop/org/notes/vdf/monfichier.org&lt;/code&gt;). Par rapport au &lt;a href=&#34;http://vincent.demeester.fr/posts/2015-05-01-orgmode-et-jekyll/&#34;&gt;billet précédent&lt;/a&gt;, le header de mes fichiers &lt;code&gt;org&lt;/code&gt; change un peu :

&lt;pre class=&#34;example&#34;&gt;
#+begin_html
+++
title=&#34;Migration vers hugo&#34;
date=&#34;2015-05-09&#34;
categories=[&#34;developement&#34;]
tags=[&#34;hugo&#34;,&#34;golang&#34;,&#34;blog&#34;,&#34;emacs&#34;,&#34;orgmode&#34;,&#34;html&#34;]
lang=&#34;fr&#34;
+++
#+end_html

Et voilà, une semaine après  m&#39;être remis en route sur ce blog, je fais déjà une migration =&amp;gt;_&amp;lt;=. Je me suis rendu compte que [[http://jekyllrb.com/][Jekyll]] m&#39;énervait un peu, et comme je suis à fond dans [[http://golang.org/][go]] en ce moment, j&#39;ai regardé du côté des générateurs de sites static et [[http://gohugo.io/][Hugo]] a clairement retenu mon attention.
&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;J&#39;exécute &lt;code&gt;org-publish-current-project&lt;/code&gt; (qu&#39;il faut que je &lt;i&gt;bind&lt;/i&gt; pour éviter de me le taper à la main..)
&lt;/li&gt;
&lt;li&gt;Et je regarde le résultat dans mon navigateur (merci encore &lt;a href=&#34;http://gohugo.io/extras/livereload/&#34;&gt;LiveReload&lt;/a&gt;).
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Pour me simplifier la vie, il me resterais à démarrer et arrêter facilement &lt;code&gt;hugo server -w&lt;/code&gt; dans le bon dossier directement depuis emacs (un peu à-la &lt;code&gt;compile&lt;/code&gt;), &lt;i&gt;binder&lt;/i&gt; &lt;code&gt;org-publish-current-project&lt;/code&gt; et un petit script final qui copie le rendu de &lt;code&gt;blog&lt;/code&gt; vers &lt;code&gt;vincent.demeester.fr&lt;/code&gt; et qui commit (le tout appellable depuis Emacs &lt;code&gt;;-P&lt;/code&gt;).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Orgmode et Jekyll</title>
      <link>https://vincent.demeester.fr/posts/2015-05-01-orgmode-et-jekyll/</link>
      <pubDate>Fri, 01 May 2015 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2015-05-01-orgmode-et-jekyll/</guid>
      <description>&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;Un peu plus d&#39;un an..&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
.. que je n&#39;ai rien posté ici. Le temps passe bien vite, mais c&#39;est plutôt une bonne chose. Je crois que quelque chose me manquait pour poster ici plus souvent.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Au niveau de mes points d&#39;entrées sur le web, je compte remettre un peu en route la partie blog de ce site et tourner shortbrain.org (ou autre) en un site plus &#34;documentation&#34; en me basant sur mes notes (powered by org-mode). &lt;b&gt;Je me suis également remis à Gnu Emacs et oh god qu&#39;est-ce que c&#39;est bon&lt;/b&gt; :-D.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
C&#39;est ce que j&#39;écrivais il y a un an, et effectivement c&#39;est toujours aussi bon &lt;code&gt;;-D&lt;/code&gt;. J&#39;ai commencé à utiliser &lt;code&gt;org-mode&lt;/code&gt; de manière assez intensive, pour mettre en place mon &lt;i&gt;personal kanban&lt;/i&gt; mais également pour prendre mes notes. Et plus je l&#39;utilise, plus j&#39;ai du mal m&#39;en passer et à aller dans mon dossier hébergeant ce site pour y écrire en Markdown. Il me fallait donc trouver une astuce pour convertir certaines notes en post pour Jekyll. C&#39;est maintenant chose faite (après 6 mois dans ma TODO-list…), et voici comment je m&#39;en sors.
&lt;/p&gt;

&lt;p&gt;
L&#39;idée générale est assez simple :
&lt;/p&gt;

&lt;ol class=&#34;org-ol&#34;&gt;
&lt;li&gt;Utiliser un dossier particulier pour les notes destiné à ce blog
&lt;/li&gt;
&lt;li&gt;Exporter, au format html, ces notes dans le bon dossier (&lt;code&gt;_posts&lt;/code&gt;)
&lt;/li&gt;
&lt;li&gt;… et c&#39;est tout en fait :) — c&#39;était pas &lt;i&gt;ben&lt;/i&gt; compliqué !
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-2&#34;&gt;Les fichiers org&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-2&#34;&gt;
&lt;p&gt;
Tous mes fichiers &lt;code&gt;org-mode&lt;/code&gt; sont dans un ensemble de dossiers bien particulier — cela n&#39;a pas grand chose d&#39;important à faire ici, mais ça permet de suivre la configuration qui suit. Il s&#39;agit du dossier &lt;code&gt;~/desktop/org/&lt;/code&gt;, et de ces fils : &lt;code&gt;todos&lt;/code&gt; pour ce que je dois faire et &lt;code&gt;notes&lt;/code&gt; pour ma prise de note. Dans &lt;code&gt;notes&lt;/code&gt; on trouve donc des dossiers et en particulier un qui se nomme &lt;code&gt;vdf&lt;/code&gt; (pour Vincent.Demeester.Fr).
&lt;/p&gt;

&lt;p&gt;
La seule différence que les fichiers &lt;code&gt;.org&lt;/code&gt; ont dans ce dossier par rapport aux autres, c&#39;est le début du fichier. En effet, &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; a besoin d&#39;une entête en &lt;code&gt;YAML&lt;/code&gt; pour le layout, les tags, la catégorie et plein d&#39;autres trucs. Le fichier &lt;code&gt;org&lt;/code&gt; de ce billet ressemble à ça par example :
&lt;/p&gt;

&lt;pre class=&#34;example&#34;&gt;
#+BEGIN_HTML
---
layout: post
category: developement
tags: jekyll blog emacs orgmode html
lang: fr
---
#+END_HTML
* Un peu plus d&#39;un an..

.. que je n&#39;ai rien posté ici. Le temps passe bien vite, mais c&#39;est plutôt une bonne chose. Je crois que quelque chose me manquait pour poster ici.

[…]
&lt;/pre&gt;

&lt;p&gt;
Les utilisateurs de Jekyll reconnaitront les &lt;code&gt;---&lt;/code&gt; et le format du header. &lt;code&gt;#+BEGIN_HTML&lt;/code&gt; et &lt;code&gt;#+END_HTML&lt;/code&gt; sont là pour dire à &lt;code&gt;org-mode&lt;/code&gt; d&#39;exporter un bloc en HTML sans l&#39;interpréter — c&#39;est une façon de mettre du HTML dans un document &lt;code&gt;org&lt;/code&gt; si on peut pas faire ce qu&#39;on veut avec le &lt;i&gt;markup&lt;/i&gt;. Ici ça nous permet d&#39;exporter tel quel le header de &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; en haut du HTML généré, pratique !
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-3&#34;&gt;Configuration de org-mode&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-3&#34;&gt;
&lt;p&gt;
Il reste maintenant à configurer le &lt;i&gt;projet de publication&lt;/i&gt; (publishing project) dans Emacs. Je vais mettre ici juste la partie intéressante, donc pour plus d&#39;information sur comment publier des fichiers org-mode avec Emacs, c&#39;est par &lt;a href=&#34;http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html&#34;&gt;ici&lt;/a&gt; pour un tutoriel (j&#39;adore &lt;a href=&#34;http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html&#34;&gt;worg&lt;/a&gt; soit dit en passant :P).
&lt;/p&gt;

&lt;p&gt;
L&#39;idée c&#39;est de définir un projet avec plusieurs &lt;i&gt;components&lt;/i&gt;, un pour les fichiers &lt;code&gt;org&lt;/code&gt;, un pour les fichiers &lt;code&gt;css&lt;/code&gt; et un pour les &lt;i&gt;assets&lt;/i&gt; (images, vidéos, …). On souhaite également ne pas générer de table des matières (TOC) et ne génerer que le &lt;i&gt;body&lt;/i&gt; (pas de &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, …). Et ça se présente comme suit.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-emacs-lisp&#34;&gt;&lt;span class=&#34;org-comment-delimiter&#34;&gt;;; &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Variables&lt;/span&gt;
&lt;span class=&#34;org-rainbow-delimiters-depth-1&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-keyword&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;vdf-base-directory&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;~/desktop/org/notes/vdf/&#34;&lt;/span&gt;
      &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;vdf-site-directory&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;~/src/github/vdemeester/vdemeester.github.com&#34;&lt;/span&gt;
      &lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;vdf-publishing-directory&lt;/span&gt; &lt;span class=&#34;org-rainbow-delimiters-depth-2&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;expand-file-name&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;_posts&#34;&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;vdf-site-directory&lt;/span&gt;&lt;span class=&#34;org-rainbow-delimiters-depth-2&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;vdf-css-publishing-directory&lt;/span&gt; &lt;span class=&#34;org-rainbow-delimiters-depth-2&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;expand-file-name&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;css&#34;&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;vdf-site-directory&lt;/span&gt;&lt;span class=&#34;org-rainbow-delimiters-depth-2&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;vdf-assets-publishing-directory&lt;/span&gt; &lt;span class=&#34;org-rainbow-delimiters-depth-2&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;expand-file-name&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;assets&#34;&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;vdf-site-directory&lt;/span&gt;&lt;span class=&#34;org-rainbow-delimiters-depth-2&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;org-rainbow-delimiters-depth-1&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;org-comment-delimiter&#34;&gt;;; &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Project&lt;/span&gt;
&lt;span class=&#34;org-rainbow-delimiters-depth-1&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-keyword&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;org-publish-project-alist&lt;/span&gt;
      `&lt;span class=&#34;org-rainbow-delimiters-depth-2&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-rainbow-delimiters-depth-3&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&#34;vdf-notes&#34;&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:base-directory&lt;/span&gt; ,&lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;vdf-base-directory&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:base-extension&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;org&#34;&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:publishing-directory&lt;/span&gt; ,&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;vdf-publishing-directory&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:exclude&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;FIXME&#34;&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:section-numbers&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;nil&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:with-toc&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;nil&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:with-drawers&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:htmlized-source&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:publishing-function&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-7&#34;&gt;org-html-publish-to-html&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:headline-levels&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;4&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:body-only&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;org-rainbow-delimiters-depth-3&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;org-rainbow-delimiters-depth-3&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&#34;vdf-static-css&#34;&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:base-directory&lt;/span&gt; ,&lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;vdf-base-directory&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:base-extension&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;css&#34;&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:publishing-directory&lt;/span&gt; ,&lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;vdf-css-publishing-directory&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:recursive&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:publishing-function&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;org-publish-attachment&lt;/span&gt;
         &lt;span class=&#34;org-rainbow-delimiters-depth-3&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;org-rainbow-delimiters-depth-3&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&#34;vdf-static-assets&#34;&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:base-directory&lt;/span&gt; ,&lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;vdf-base-directory&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:base-extension&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;png&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-backslash&#34;&gt;\\&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-construct&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;jpg&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-backslash&#34;&gt;\\&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-construct&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;gif&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-backslash&#34;&gt;\\&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-construct&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;pdf&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-backslash&#34;&gt;\\&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-construct&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;mp3&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-backslash&#34;&gt;\\&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-construct&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;ogg&#34;&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:publishing-directory&lt;/span&gt; ,&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;vdf-assets-publishing-directory&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:recursive&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:publishing-function&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;org-publish-attachment&lt;/span&gt;
         &lt;span class=&#34;org-rainbow-delimiters-depth-3&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;org-rainbow-delimiters-depth-3&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&#34;vdf&#34;&lt;/span&gt; &lt;span class=&#34;org-builtin&#34;&gt;:components&lt;/span&gt; &lt;span class=&#34;org-rainbow-delimiters-depth-4&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&#34;vdf-notes&#34;&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;vdf-static-css&#34;&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;vdf-static-assets&#34;&lt;/span&gt;&lt;span class=&#34;org-rainbow-delimiters-depth-4&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;org-rainbow-delimiters-depth-3&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;org-rainbow-delimiters-depth-2&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;org-rainbow-delimiters-depth-1&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
J&#39;utilise des variables, c&#39;est pas indispensable mais c&#39;est plus pratique. Il y a trois &lt;i&gt;components&lt;/i&gt;, chacun définit les fichiers qu&#39;il traite grâce à &lt;code&gt;:base-extension&lt;/code&gt;. Intéressons-nous surtout à &lt;code&gt;vdf-notes&lt;/code&gt; puisque c&#39;est celui qui nous sort les fichiers &lt;code&gt;HTML&lt;/code&gt; à partir des fichiers &lt;code&gt;org&lt;/code&gt;. On se passe de table des matières grâce à &lt;code&gt;:with-toc nil&lt;/code&gt;, on ne génère que le &lt;i&gt;body&lt;/i&gt; grâce à &lt;code&gt;:body-only t&lt;/code&gt; et on évite les numéros de sections avec &lt;code&gt;:section-numbers nil&lt;/code&gt;. Le bonus vient avec &lt;code&gt;:htmlized-source t&lt;/code&gt; puisque du coup, les parties sources (entre &lt;code&gt;#+BEGIN_SRC&lt;/code&gt; et &lt;code&gt;#+END_SRC&lt;/code&gt;) sont exportés avec les mêmes couleurs que j&#39;ai dans ma configuration Emacs (avec les &lt;a href=&#34;https://github.com/vdemeester/emacs-config#raindow-identifiers&#34;&gt;rainbow-identifiers&lt;/a&gt;, voir ce post &lt;a href=&#34;https://medium.com/@evnbr/coding-in-color-3a6db2743a1e&#34;&gt;là&lt;/a&gt; également).
&lt;/p&gt;

&lt;p&gt;
Il ne reste plus qu&#39;à publier le projet quand on le souhaite avec &lt;code&gt;org-publish&lt;/code&gt; — je vous laisse lire la documentation pour savoir comment on fait.
&lt;/p&gt;

&lt;p&gt;
Et c&#39;est tout bon. Un petit &lt;code&gt;bundle exec jekyll serve --watch&lt;/code&gt; pour voir le rendu — et quand on est content on commit. Et c&#39;est la fête &lt;code&gt;\o/&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
C&#39;est tout pour le moment, la fréquence des billets de ce blog devrait s&#39;incrémenter un peu maintenant.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Docker 1.3 et son écosystème</title>
      <link>https://vincent.demeester.fr/posts/2014-10-27-docker-1.3-ecosystem/</link>
      <pubDate>Mon, 27 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2014-10-27-docker-1.3-ecosystem/</guid>
      <description>&lt;div class=&#34;notice&#34;&gt;Cet article est disponible sur le &lt;a href=&#34;http://blog.zenika.com/&#34;&gt;Blog de Zenika&lt;/a&gt; à l&#39;adresse suivante : &lt;a href=&#34;http://blog.zenika.com/index.php?post/2014/10/27/Docker-1-3-et-son-ecosysteme&#34;&gt;http://blog.zenika.com/index.php?post/2014/10/27/Docker-1-3-et-son-ecosysteme&lt;/a&gt;. Cet publication me sert de mirroir / sauvegarde.&lt;/div&gt;

&lt;p&gt;Le &lt;strong&gt;16 octobre dernier&lt;/strong&gt;, &lt;ins&gt;Docker est passé en version 1.3&lt;/ins&gt;. C&#39;est une
bonne occasion de faire un point sur ce qu&#39;apportent les mises à jour
qui sont sorties depuis la 1.0. Nous allons également en profiter pour
regarder les news &lt;strong&gt;importantes&lt;/strong&gt; de l&#39;écosystème Docker.&lt;/p&gt;


&lt;p&gt;&lt;img src=&#34;https://vincent.demeester.fr/public/Billet_0511/docker_container_engine_logo.png&#34; alt=&#34;Docker&#34; title=&#34;Docker&#34; /&gt;&lt;/p&gt;


&lt;p&gt;Rappel très rapide, &lt;strong&gt;Docker est une plate-forme ouverte à destination des développeurs et administrateurs systèmes visant à faciliter la construction et le déploiement d&#39;applications distribuées&lt;/strong&gt;. De manière
moins marketing, l&#39;idée derrière Docker est d&#39;&lt;strong&gt;automatiser&lt;/strong&gt; le &lt;strong&gt;déploiement&lt;/strong&gt; d&#39;environnements sous forme de &lt;strong&gt;conteneurs légers&lt;/strong&gt;, portables et auto-suffisants&amp;nbsp;; les conteneurs permettant d&#39;isoler
l&#39;exécution des applications dans des contextes d&#39;exécution. Pour ce
faire, Docker, écris en &lt;a href=&#34;http://golang.org/&#34;&gt;Go&lt;/a&gt;, reprend les bases de &lt;strong&gt;LXC&lt;/strong&gt;, utilise les fonctionnalités
du &lt;strong&gt;noyau Linux&lt;/strong&gt; (CGroups, Namespaces, …) et se base &lt;em&gt;initialement&lt;/em&gt; sur un
système de fichier &#34;en oignons&#34; AUFS&amp;nbsp;; D&#39;autres backend sont supportés
également comme BTRFS ou &lt;em&gt;devicemapper&lt;/em&gt; (LVM).&lt;/p&gt;


&lt;p&gt;Depuis le 9 juin 2014 et la release de la version 1.0 &#34;production-read&#34;, l&#39;équipe derrière Docker n&#39;a pas chomé et 3
nouvelles mises à jour sont sorties depuis&amp;nbsp;; à savoir que les
&lt;em&gt;releases&lt;/em&gt; de Docker se font à un rythme pré-défini, &#34;à-la&#34; Linux,
tout ce qui est prêt et testé est intégré à la release qui
suit. Voyons, de façon non-exhaustive, quelles sont les princiales
améliorations apportées par ces différentes versions.&lt;/p&gt;

&lt;h4&gt;Hub&amp;nbsp;: Images officielles et language stack&lt;/h4&gt;


&lt;p&gt;Le &lt;strong&gt;Hub&lt;/strong&gt;, tel qu&#39;il a été nommé après la sortie de Docker 1.0 est &lt;strong&gt;un dépôt des images Docker&lt;/strong&gt; de tout-un-chacun qui souhaite les partager.&lt;/p&gt;


&lt;p&gt;Au début de l&#39;été, Docker Inc. a annoncé l&#39;apparition des &lt;strong&gt;dépots officiels&lt;/strong&gt;. L&#39;idée est d&#39;estampiller des images Docker comme officielles,
c&#39;est à dire vérifiées et garanties comme étant issues et supportées par
les mainteneurs des projets. De nombreuses images officielles existent
déjà pour les principaux projets open-source, comme Ubuntu, MongoDB,
etc. Toute communauté open-source ou même tout éditeur logiciel peut
entrer en contact avec l&#39;équipe Docker pour voir son/ses images
estampillées &#34;officielles&#34;, après validation. Cette étiquette vient se
rajouter à l&#39;étiquette &#34;&lt;em&gt;automated build repository&lt;/em&gt;&#34;, précédement
appelée &lt;em&gt;verified&lt;/em&gt; (ce qui prétait à confusion) qui donne la garantie
à l&#39;utilisateur que l&#39;image a été construite de manière automatique
par l&#39;infrastructure de Docker Inc. Il est également à noter que la version
1.3.0 de Docker apporte la vérification de la provenance et de
l&#39;intégrité des images officielles via signature électronique&amp;nbsp;; même si
pour l&#39;instant c&#39;est en &lt;em&gt;work-in-progress&lt;/em&gt;.&lt;/p&gt;


&lt;p&gt;Un autre ajout récent au Docker Hub, datant de fin septembre, vaut le
détour&amp;nbsp;: les l&lt;strong&gt;anguage stack&lt;/strong&gt;, des images de bases &lt;em&gt;pre-construites&lt;/em&gt; avec tous les outils nécessaires pour faire tourner une application dans un langage donné. Un développeur souhaitant rapidement construire
un conteneur avec, par exemple, une application Clojure, n&#39;a plus
besoin de &lt;em&gt;réinventer la roue&lt;/em&gt; (i.e. partir d&#39;une image de base, installer
le JDK, installer lein, etc.). Il lui suffit de partir d&#39;une des
&lt;em&gt;language stack&lt;/em&gt;, ici clojure.&lt;/p&gt;

&lt;pre class=&#34;bash code bash&#34; style=&#34;font-family:inherit&#34;&gt;FROM clojure
COPY . &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;/&lt;/span&gt;usr&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;/&lt;/span&gt;src&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;/&lt;/span&gt;app
WORKDIR &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;/&lt;/span&gt;usr&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;/&lt;/span&gt;src&lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;/&lt;/span&gt;app
CMD &lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#91;&lt;/span&gt;&lt;span style=&#34;color: #ff0000;&#34;&gt;&amp;quot;lein&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #ff0000;&#34;&gt;&amp;quot;run&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;&amp;#93;&lt;/span&gt;&lt;/pre&gt;


&lt;h4&gt;Restart policies (1.2.0)&lt;/h4&gt;


&lt;p&gt;Docker 1.2 a apporté une option en plus à la commande &lt;code&gt;run&lt;/code&gt;&amp;nbsp;:
&lt;code&gt;--restart&lt;/code&gt;. Il permet de définir une &lt;strong&gt;politique de redémarrage&lt;/strong&gt; dans
le cas où le conteneurs viendrait à mourrir, que ce soit de manière
normale (code de retour à 0) ou inattendue (&lt;em&gt;failure&lt;/em&gt;, code de retour
différent de 0). Trois options sont disponibles pour l&#39;instant&amp;nbsp;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;no&lt;/strong&gt;&amp;nbsp;: pas de redémarrage, fonctionnement par défaut.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;on-failure&lt;/strong&gt;: redémarrage automatique si le conteneur s&#39;est terminé de façon anormale. Il est possible d&#39;ajouter un nombre maximum de redémarrage&amp;nbsp;; avec &lt;code&gt;--restart=on-failure:3&lt;/code&gt; docker essaiera de redémarrer 3 fois avant d&#39;abandonner.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;always&lt;/strong&gt;&amp;nbsp;: redémarrage automatique, tout le temps, erreurs ou pas.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;Injection de processus (1.3.0)&lt;/h4&gt;


&lt;p&gt;La possibilité de voir ce qui se passe dans le container, et par
conséquent de s&#39;en servir pour debugger, s&#39;est averé longtemps
complexe. Dans les &lt;em&gt;premiers jours&lt;/em&gt; de Docker, l&#39;installation d&#39;un
démon ssh était une solution commune. Cependant, celà complexifiait la
création d&#39;un conteneur&amp;nbsp;; en effet, Docker est fait pour lancer et isoler
une seule commande, l&#39;ajout d&#39;un démon sshd imposait alors de mettre
en place une solution du type &lt;em&gt;init&lt;/em&gt; comme supervisord, runit, ou
autres. Un article de Jérôme Petazonni, employé Docker Inc,
a mis les choses au point&amp;nbsp;:
&lt;strong&gt;&lt;a href=&#34;http://jpetazzo.github.io/2014/06/23/docker-ssh-considered-evil/&#34;&gt;If you run SSHD in your Docker containers, you&#39;re doing it wrong!&lt;/a&gt;&lt;/strong&gt;,
littéralement &#34;&lt;em&gt;Si vous faites tourner SSHD dans vos container Docker, vous vous trompez&lt;/em&gt;&#34;. Jérôme avait créé à l&#39;époque un outil,
&lt;a href=&#34;https://github.com/jpetazzo/nsenter&#34;&gt;nsenter&lt;/a&gt;, qui était (et est toujours) installable en passant par un container, histoire de montrer
un peu de magie.&lt;/p&gt;


&lt;p&gt;La version 1.3 de Docker intègre un nouvelle commande, &lt;code&gt;exec&lt;/code&gt; qui
n&#39;est autre que nsenter, en mieux, directement intégré à Docker, plus
besoin de passer par un outil externe. &lt;strong&gt;Il devient donc possible d&#39;executer n&#39;importe quelle process à l&#39;intérieur donc container, qui est en cours d&#39;exécution&lt;/strong&gt;. Ainsi un simple &lt;code&gt;docker exec -it ubuntu_bash bash&lt;/code&gt; et
nous voici dans une session bash à l&#39;intérieur du conteneur. Bien
entendu, comme pour nsenter, cela ne change pas l&#39;idée derrière Docker
qui est &#34;une application par conteneur&#34;&amp;nbsp;; la commande &lt;code&gt;exec&lt;/code&gt; est
surtout présente pour répondre à des problématiques de &lt;em&gt;debug&lt;/em&gt; et de
&lt;em&gt;developpement&lt;/em&gt;.&lt;/p&gt;


&lt;h4&gt;Cycle de vie d’un container (1.3.0)&lt;/h4&gt;


&lt;p&gt;Une autre nouvelle commande arrive avec la version 1.3.0 de Docker,
c&#39;est &lt;code&gt;create&lt;/code&gt;. Beaucoup d&#39;utilisateur ont demandé d&#39;être capable
de séparer la création initiale de conteneur et son lancement&amp;nbsp;;
auparavant il n&#39;existait que la commande &lt;code&gt;run&lt;/code&gt; qui faisait les deux
d&#39;un coup.&lt;/p&gt;

&lt;pre class=&#34;bash code bash&#34; style=&#34;font-family:inherit&#34;&gt;$ docker create &lt;span style=&#34;color: #660033;&#34;&gt;-t&lt;/span&gt; &lt;span style=&#34;color: #660033;&#34;&gt;-i&lt;/span&gt; fedora &lt;span style=&#34;color: #c20cb9; font-weight: bold;&#34;&gt;bash&lt;/span&gt;
6d8af538ec541dd581ebc2a24153a28329acb5268abe5ef868c1f1a261221752
$ docker start &lt;span style=&#34;color: #660033;&#34;&gt;-a&lt;/span&gt; &lt;span style=&#34;color: #660033;&#34;&gt;-i&lt;/span&gt; 6d8af538ec5
bash-&lt;span style=&#34;color: #000000;&#34;&gt;4.2&lt;/span&gt;&lt;span style=&#34;color: #666666; font-style: italic;&#34;&gt;#&lt;/span&gt;&lt;/pre&gt;


&lt;h4&gt;Options de sécurité (1.3.0)&lt;/h4&gt;


&lt;p&gt;Les utilisateurs de SELinux ou AppArmor vont être content, la commande
&lt;code&gt;--security-opt&lt;/code&gt;, arrivée avec la version 1.3.0, permet les &lt;em&gt;labels&lt;/em&gt;
et &lt;em&gt;profiles&lt;/em&gt; de ces derniers, ce qui donne quelque chose comme&amp;nbsp;:&lt;/p&gt;

&lt;pre class=&#34;bash code bash&#34; style=&#34;font-family:inherit&#34;&gt;docker run &lt;span style=&#34;color: #660033;&#34;&gt;--security-opt&lt;/span&gt; label:&lt;span style=&#34;color: #7a0874; font-weight: bold;&#34;&gt;type&lt;/span&gt;:svirt_apache &lt;span style=&#34;color: #660033;&#34;&gt;-i&lt;/span&gt; &lt;span style=&#34;color: #660033;&#34;&gt;-t&lt;/span&gt; centos &lt;span style=&#34;color: #c20cb9; font-weight: bold;&#34;&gt;bash&lt;/span&gt;&lt;/pre&gt;


&lt;p&gt;L&#39;avantage principal de cette nouvelle commande, c&#39;est, sur
les systèmes qui sont configurés avec SELinux ou AppArmor, de pouvoir
donner des privilèges de manière plus fine qu&#39;avec l&#39;option
&lt;code&gt;--privileged&lt;/code&gt; (qui donne tout) et ainsi diminuer les risques
potentiels.&lt;/p&gt;


&lt;h4&gt;Boot2docker&lt;/h4&gt;


&lt;p&gt;Docker s&#39;appuyant sur des fonctionnalitées de noyau Linux, son usage
est &lt;em&gt;limité&lt;/em&gt; à un système hôte avec un noyau Linux. Le projet
boot2docker vise à enlever cette barrière en &lt;strong&gt;permettant d&#39;avoir la commande docker sous Mac OS X et Windows&lt;/strong&gt;. Il s&#39;agit ni plus ni moins
d&#39;une machine virtuelle VirtualBox légère, basée sur la distribution
Tiny Core Linux, pour avoir un &lt;em&gt;overhead&lt;/em&gt; le plus faible possible.
L&#39;utilisation de boot2docker n&#39;est pas encore totalement transparente,
principalement pour la gestion des ports ou encore du montage des
volumes du Host (OS X ou Windows) dans le conteneur Docker. La version
1.3 de docker, et la version correspondante de boot2docker, permettent
maintenant aux utiliseurs de Mac OS X de monter leur dossier &lt;em&gt;hôtes&lt;/em&gt;
dans le conteneur.&lt;/p&gt;


&lt;h4&gt;Fig 1.0&lt;/h4&gt;


&lt;p&gt;&lt;a href=&#34;http://www.fig.sh/&#34;&gt;Fig&lt;/a&gt; est un outil de développement basé sur Docker, écrit en Python. L&#39;idée est de
définir son environnement via un fichier YAML, que ce soit pour le
code sur lequel nous travaillons mais également les services externes
desquels notre application dépend (Base de données, &#39;&#39;Message
queue&#39;&#39;, etc.).&lt;/p&gt;


&lt;p&gt;Nous avons donc, par exemple, un &lt;code&gt;Dockerfile&lt;/code&gt;&amp;nbsp;:&lt;/p&gt;

&lt;pre class=&#34;bash code bash&#34; style=&#34;font-family:inherit&#34;&gt;FROM clojure:lein-2.5.0
ADD . &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;/&lt;/span&gt;code
WORKDIR &lt;span style=&#34;color: #000000; font-weight: bold;&#34;&gt;/&lt;/span&gt;code
RUN lein run&lt;/pre&gt;



&lt;p&gt;Et un &lt;code&gt;fig.yml&lt;/code&gt;&amp;nbsp;:&lt;/p&gt;

&lt;pre&gt;[yaml]
web:
  build: .
  command: lein run
  links:
   - db
  ports:
   - &amp;quot;8000:8000&amp;quot;
db:
  image: postgres
&lt;/pre&gt;


&lt;p&gt;Enfin un petit &lt;code&gt;fig up&lt;/code&gt; et c&#39;est gagné, nous obtenons notre base de données
relationnelle qui tourne, notre appli qui a été construite et qui
tourne aussi, et qui est lié à notre conteneur db. Il existe bien d&#39;autres
commandes (&lt;code&gt;start&lt;/code&gt;, &lt;code&gt;stop&lt;/code&gt;, &lt;code&gt;destroy&lt;/code&gt;, etc.).&lt;/p&gt;


&lt;p&gt;Fig était initialement développé par &lt;a href=&#34;https://www.orchardup.com/&#34;&gt;Orchard&lt;/a&gt;, qui a été acquis cette
année par Docker Inc. Ce 17 octobre, l&#39;équipe Docker a donc fait un release 1.0 de
Fig en ajoutant le support à docker 1.3 et à boot2docker. Un certain nombre de commandes et de
nouvelles fonctionnalitées ont étés ajoutées, notament&amp;nbsp;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fig port&lt;/code&gt;, qui liste les ports par service,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig pull&lt;/code&gt;, qui récupère la dernière version d&#39;un service,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fig restart&lt;/code&gt;, qui redémarre les conteneurs (&lt;code&gt;stop&lt;/code&gt; et &lt;code&gt;start&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;le support de &lt;code&gt;.dockerignore&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;le support de connection en TLS au daemon Docker&lt;/li&gt;
&lt;li&gt;et pas mal d&#39;autres options.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mais l&#39;annonce principale accompagnant cette version est que &lt;strong&gt;Fig ne recevra plus de mise à jour majeure à partir de cette version 1.0&lt;/strong&gt;
puisque l&#39;équipe Docker travaille pour &lt;strong&gt;intégrer les fonctionnalités&lt;/strong&gt;
que Fig apporte, &lt;strong&gt;directement dans Docker&lt;/strong&gt;&amp;nbsp;; ce qui est une
excellente nouvelle.&lt;/p&gt;


&lt;h4&gt;Partenariat avec Microsoft&lt;/h4&gt;


&lt;p&gt;Cela transpirait ces derniers mois, dans les différentes conférences
et meetups, Microsoft s&#39;intéressait de très prêt à Docker. C&#39;est
maintenant officiel, &lt;strong&gt;Docker Inc et Microsoft sont partenaires&lt;/strong&gt;. Le
partenariat couvre pour l&#39;instant les sujets suivants&amp;nbsp;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ajouter le support de windows comme hôte Docker.&lt;/li&gt;
&lt;li&gt;Pour Microsoft, supporter les API &lt;em&gt;open-orchestration&lt;/em&gt; de Docker.&lt;/li&gt;
&lt;li&gt;Intégration de Docker dans Microsoft Azure.&lt;/li&gt;
&lt;li&gt;Collaboration étroite sur les applications qui ont besoin de plusieurs conteneur (i.e. ce que Fig fait de mieux), et le support d&#39;application qui sont composés de conteneurs Linux et Windows.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Le but &lt;em&gt;ultime&lt;/em&gt; de Docker quand il a été distribué de façon libre
était&amp;nbsp;: &#34;__Construire le &#39;bouton&#39; qui permet à toutes applications
d&#39;être construites et déployées sur n&#39;importe quel serveur, n&#39;importe
où.__&#34; (C&#39;est nettement plus classe en anglais&amp;nbsp;: “&#39;&#39;To build the ‘button’
that enables any application to be built and deployed on any server,
anywhere.&#39;&#39;”). Ce partenariat est donc une nouvelle marche en direction
de ce dernier.&lt;/p&gt;


&lt;h4&gt;Conclusion&lt;/h4&gt;


&lt;p&gt;Un an et demi après la première &lt;em&gt;release&lt;/em&gt; publique de Docker et près
de 5 mois après la version 1.0, Docker et sa communauté avancent
toujours aussi vite. Comme Solomon Hykes (CTO et co-fondateur de dotCould)
avait dit lors de la dockerCon 14&amp;nbsp;: &#34;&lt;strong&gt;la valeur réelle de docker n&#39;est pas la technologie, mais le fait que les gens se mettent d&#39;accord sur quelque chose&lt;/strong&gt;&#34;&amp;nbsp;; Docker Inc. pousse principalement dans le sens de la
standardisation. Le développement de
&lt;a href=&#34;https://github.com/docker/libcontainer&#34;&gt;libcontainer&lt;/a&gt;,
&lt;a href=&#34;https://github.com/docker/libchan&#34;&gt;libchan&lt;/a&gt; et
&lt;a href=&#34;https://github.com/docker/libswarm&#34;&gt;libswarm&lt;/a&gt; sont des projets qui
vont dans ce sens. La communautée est toute aussi &lt;em&gt;bouillante&lt;/em&gt; d&#39;idées
et chaque jour voit de nouveau projet plus intéressant les uns que les
autres.&lt;/p&gt;


&lt;p&gt;Enfin la &lt;strong&gt;&lt;a href=&#34;http://europe.dockercon.com/&#34;&gt;dockerCon Europe&lt;/a&gt;, les 4 et 5 décembre 2014&lt;/strong&gt; viendra couronner une année très riche du côté de Docker et
de son écosystème. Rendez-vous mi-décembre pour faire un petit retour
  sur la première conférence européenne Docker ;-).&lt;/&gt;

</description>
    </item>
    
    <item>
      <title>Redesign Et Résolutions</title>
      <link>https://vincent.demeester.fr/posts/2014-03-24-redesign-et-r%C3%A9solutions/</link>
      <pubDate>Mon, 24 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2014-03-24-redesign-et-r%C3%A9solutions/</guid>
      <description>

&lt;p&gt;Un &lt;em&gt;tout petit&lt;/em&gt; post pour parler rapidement, entre autre, du redesign de &lt;a href=&#34;http://vincent.demeester.fr&#34;&gt;vincent.demeester.fr&lt;/a&gt; et de mes résolutions.&lt;/p&gt;

&lt;h2 id=&#34;redesign&#34;&gt;Redesign&lt;/h2&gt;

&lt;p&gt;Les raisons de ce redesign sont assez simple : je change d&amp;rsquo;employeur et de ville (retour sur Paris &lt;code&gt;\o/&lt;/code&gt;).
Cela fait pas mal de changement, et en voulant mettre à jour la page d&amp;rsquo;accueil (ce que je n&amp;rsquo;ai toujours pas
fait &lt;code&gt;;-P&lt;/code&gt;), j&amp;rsquo;avais envie de &lt;em&gt;déménager&lt;/em&gt; le site en quelques sortes.&lt;/p&gt;

&lt;p&gt;Pour l&amp;rsquo;inspiration c&amp;rsquo;est assez facile à trouver, regarder &lt;a href=&#34;http://medium.com&#34;&gt;medium&lt;/a&gt;, le site de
&lt;a href=&#34;http://www.viksit.com/&#34;&gt;Viksit Gaur&lt;/a&gt; ou encore celui de &lt;a href=&#34;http://silent-strength.com/&#34;&gt;Michael&lt;/a&gt; (coucou &lt;code&gt;:-P&lt;/code&gt;).
J&amp;rsquo;adore ce genre de site, assez épuré mais avec une partie fixe (à gauche ou à droite) et avec des images changeantes.&lt;/p&gt;

&lt;p&gt;Les images en fond de l&amp;rsquo;espace de gauche peuvent changer d&amp;rsquo;une page à l&amp;rsquo;autre. Je suis en train de m&amp;rsquo;amuser un peu
avec &lt;a href=&#34;http://jekyllrb.com&#34;&gt;Jekyll&lt;/a&gt;. Il faut que je trouve un moyen d&amp;rsquo;optimiser un peu les images que j&amp;rsquo;utilise
parce que là je joue un peu le bourrin.&lt;/p&gt;

&lt;h2 id=&#34;résolutions&#34;&gt;Résolutions&lt;/h2&gt;

&lt;p&gt;Nouvelle année, nouveau boulot, implique nouvelles résolutions. Il y a deux aspects à ces &lt;em&gt;résolutions&lt;/em&gt; : sur un plan
informatique/geek/travail/organisation, et sur un plan purement &lt;em&gt;physique&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Mon retour sur Paris devrait me permettre de participer à un peu plus d&amp;rsquo;évènements, notamment du côté des Java User Group, mais
aussi FSFE, et j&amp;rsquo;en passe. Je compte également continué à jouer le &lt;em&gt;factotum&lt;/em&gt; en me gardant un peu de temps au niveau
personnel pour travailler sur des aspects &lt;em&gt;geek&lt;/em&gt; que je n&amp;rsquo;aurais peut-être pas l&amp;rsquo;occasion de pratiquer au travail.
Au niveau de mes &lt;em&gt;points d&amp;rsquo;entrées&lt;/em&gt; sur le web, je compte remettre un peu en route la partie blog de ce site et
tourner shortbrain.org (ou autre) en un site plus &amp;ldquo;documentation&amp;rdquo; en me basant sur mes notes (powered by &lt;a href=&#34;http://org-mode.org&#34;&gt;org-mode&lt;/a&gt;).
Je me suis également remis à &lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;Gnu Emacs&lt;/a&gt; et &lt;em&gt;oh god&lt;/em&gt; qu&amp;rsquo;est-ce que c&amp;rsquo;est bon &lt;code&gt;:-D&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Au niveau phyisque, dans la continuité de la fin 2012, l&amp;rsquo;année 2013 a probablement été la pire de ma vie. Les
problèmes de dos c&amp;rsquo;est pas facile tous les jours.. En février, j&amp;rsquo;avais peur de ne jamais remonter sur un vélo ; en Mai
je remontais pour la première fois sur le vélo, en Septembre je faisais 40km par semaine et en décembre j&amp;rsquo;étais
presque capable de faire 30km en une journée. Mème si l&amp;rsquo;année 2014 a mal commencé (je me suis felé un côte en Janvier),
mes objectifs pour cette année et les futurs sont nettement plus positif. Le &lt;a href=&#34;http://fitbit.com&#34;&gt;fitbit&lt;/a&gt; que j&amp;rsquo;ai
acquis en Février me permet d&amp;rsquo;avoir un objectif de marche (certes assez modeste) de 10000 pas et 8,05 km par jour.
Je compte bien me fixer d&amp;rsquo;autre objectifs : monter la barre plus haut (15000 voir plus), faire 50km de vélo
sur une journée.&lt;/p&gt;

&lt;p&gt;Les objectifs physiques à très long termes sont également assez simples : retrouver ma forme physique et ne plus être
géné à cause du dos. En gros c&amp;rsquo;est : être capable de faire 120km de vélo et monter des cols (Col du Sapenay, Mont Revard)
et à long terme, faire des courses de footing (i.e. 10km, Paris-Versaille, Semi-marathon, marathon :D).&lt;/p&gt;

&lt;p&gt;Sur ce, je vais retourner à mes cartons :-P.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Podcasts</title>
      <link>https://vincent.demeester.fr/posts/2013-10-12-podcasts/</link>
      <pubDate>Sat, 12 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2013-10-12-podcasts/</guid>
      <description>

&lt;blockquote&gt;
&lt;p&gt;Voici un petit billet présentant les différents podcast que j&amp;rsquo;écoute plus ou
moins régulièrement.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;J&amp;rsquo;écoute énormément de musique et de podcast ; je passe beaucoup de temps avec
des écouteurs sur la tête ou la chaine hifi en route. Les podcasts ont une grande
place. Voici une liste plus ou moins bien triés de ceux auxquels je suis
souscrit et/ou que j&amp;rsquo;écoute en ce moment. Je tiendrais peut-être ce post
à jour ou en créerait un nouveau sinon :-).&lt;/p&gt;

&lt;h2 id=&#34;geek-co&#34;&gt;Geek &amp;amp; co&lt;/h2&gt;

&lt;p&gt;Je suis un developpeur, un geek et convaincu des logiciels libres, les
podcasts qui suivent reflète assez cette partie là de mon identité.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.captainweb.net/&#34;&gt;L&amp;rsquo;apéro de Captain (fr)&lt;/a&gt; : dans le genre geeky, déjanté et sauvage, en français, on ne fait pas mieux. Pas vraiment safe for work, et pas tout à fait &amp;ldquo;libriste&amp;rdquo; comme j&amp;rsquo;aime, les tranches de rires sont garanties ; même si parfois on est un peu verreux d&amp;rsquo;avoir écouter jusqu&amp;rsquo;à la fin et le bien nommé &amp;ldquo;wazzuf&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.agencetousgeeks.com/&#34;&gt;Agence Tous Geeks (fr)&lt;/a&gt; : fils caché de l&amp;rsquo;apéro du captain, on y retrouve des amis (et membres de ce dernier), mais c&amp;rsquo;est un peu plus calme.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bazingcast.com/about/&#34;&gt;Bazingcast (fr)&lt;/a&gt; : podcast geek, plus posé que les deux précédents mais avec
des débats, des trolls et tout ce que l&amp;rsquo;on peut attendre de geeks.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.captainposix.net/&#34;&gt;Parole de Tux (fr-be)&lt;/a&gt; : podcast venant de nos voisin belge, pas trop long et plutôt sympa ; et si comme moi vous adorez l&amp;rsquo;accent belge, c&amp;rsquo;est le top.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://faif.us/&#34;&gt;Free as in Freedom (en)&lt;/a&gt; : podcast parlant de logiciel
libre principalement côté license, truc légal, etc.. en anglais, faut
parfois s&amp;rsquo;accrocher.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://episodes.gitminutes.com/&#34;&gt;Git Minutes (en)&lt;/a&gt; : podcast à propos de
Git et des outils de son écosystème (vcsh, etc..).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;radio&#34;&gt;Radio&lt;/h2&gt;

&lt;p&gt;J&amp;rsquo;aime bien la radio, bien plus que la télévision (que j&amp;rsquo;allume si peu qu&amp;rsquo;à
chaque fois la box se met à jour &lt;code&gt;;-p&lt;/code&gt;).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.franceinter.fr/emission-laura-leishman-project&#34;&gt;France Inter - LLP (Laura leishman Project)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://radiofrance-podcast.net/podcast09/rss_12265.xml&#34;&gt;Le Mouv&amp;rsquo; - Laura Leishman Project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.franceinter.fr/emission-interception&#34;&gt;France Inter - Interception&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.la-bas.org/&#34;&gt;France Inter - là-bas si j&amp;rsquo;y suis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.franceculture.fr/podcast/4689840&#34;&gt;France Culture - Pixel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.franceculture.fr/podcast/4685228&#34;&gt;France Culture - Place de la toile&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.franceculture.fr/podcast/4689418&#34;&gt;France Culture - Philippe Meyer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://radiofrance-podcast.net/podcast09/rss_12582.xml&#34;&gt;Le Mouv&amp;rsquo; - Glitch (sur le Mouv&amp;rsquo;)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://radiofrance-podcast.net/podcast09/rss_12691.xml&#34;&gt;Le Mouv&amp;rsquo; - Code Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://radiofrance-podcast.net/podcast09/rss_12190.xml&#34;&gt;Le Mouv&amp;rsquo; - Suivez le geek&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.divergence-fm.org/-http-www-divergence-fm-org-ecrire-exec-rubrique-id_rubrique-61-.html&#34;&gt;Divergence Numerique&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;musique&#34;&gt;Musique&lt;/h2&gt;

&lt;p&gt;Les podcast suivant sont purement musique, tous musique &lt;em&gt;techno&lt;/em&gt; ou
trance (que j&amp;rsquo;aime bien).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://podcasts.flaix.fr/corstencountdown&#34;&gt;Ferry Corsten - Corsten Countdown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.galexmusic.com/podcast/gareth.xml&#34;&gt;Gareth Emery Podcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://feedproxy.feedburner.com/Tiestos_club_life&#34;&gt;Tiesto Club Life&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://oakenfold.libsyn.com/rss&#34;&gt;Oakenfold Perfecto Podcast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Maven Tmpfs</title>
      <link>https://vincent.demeester.fr/posts/2013-09-08-maven-tmpfs/</link>
      <pubDate>Sun, 08 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2013-09-08-maven-tmpfs/</guid>
      <description>&lt;p&gt;Je suis un utilisateur convaincu de [maven](), malgré ces défauts, le moto
&lt;strong&gt;&amp;ldquo;Convention over configuration&amp;rdquo;&lt;/strong&gt; me va vraiment bien. Que ce soit au boulot ou
à la maison, j&amp;rsquo;ai plus d&amp;rsquo;ordinateurs équipés de ssd (ou de mémoire flash) que de
disque traditionnel (mécanique ?). Pour augmenter un peu la durée de vie de
ces disques SSD, j&amp;rsquo;ai cherché à savoir comment &lt;em&gt;déporter&lt;/em&gt; le &lt;em&gt;build&lt;/em&gt; de maven
(qui, pour rappel, se passe dans le dossier &lt;code&gt;target/&lt;/code&gt;) hors du SSD ; ici ce
sera dans le dossier &lt;code&gt;/tmp/&lt;/code&gt; qui est monté en mémoire (merci &lt;code&gt;tmpfs&lt;/code&gt;),
mais on peut imaginer déporter ça sur un autre disque, etc.. Après quelques
recherches j&amp;rsquo;ai trouvés quelques inspirations.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Limitations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Dans la solution présentée ci-dessous les principales limitations sont
les suivantes (que j&amp;rsquo;essaierais de diminuer au fil du temp ;P) :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Il est nécessaire de modifier le pom.xml du projet ; cela ne s&amp;rsquo;appliquera
donc pas à tous les projets maven sans modification du pom.xml.&lt;/li&gt;
&lt;li&gt;Cela ne fonctionne que sur une plateforme qui support les liens
symboliques (Linux, Mac OS X, et autre UNIX).&lt;/li&gt;
&lt;li&gt;Cela ne fonctionne qu&amp;rsquo;avec Java 7 ou plus.&lt;/li&gt;
&lt;li&gt;Si vous utilisez m2e, il va gentillement gueuler et c&amp;rsquo;est moche ; pour
résoudre le problème, il faut faire un tour vers &lt;a href=&#34;http://wiki.eclipse.org/M2E_plugin_execution_not_covered&#34;&gt;M2E plugin execution
not covered&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pour [maven](), le dossier &lt;code&gt;target/&lt;/code&gt; vient de la propriété
&lt;code&gt;project.build.directory&lt;/code&gt;. Dans la théorie, il suffirait de modifier (dans
&lt;code&gt;$HOME/.m2/settings.xml&lt;/code&gt;) cette propriété et le tour serait jouer.
Malheuresement ce n&amp;rsquo;est pas possible, &lt;code&gt;project.build.directory&lt;/code&gt; est une
propriété interne et n&amp;rsquo;est, à priori, pas modifiable.&lt;/p&gt;

&lt;p&gt;Notre souhait est le suivant :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Le build doit se faire dans &lt;code&gt;/tmp/m2/&lt;/code&gt;, ce qui pour un projet se traduit
par &lt;code&gt;/tmp/m2/${groupId}:${artifactId}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Le dossier &lt;code&gt;target/&lt;/code&gt; dans les sources est un lien symbolique vers le
dossier dans &lt;code&gt;/tmp/m2/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;On passe par un &lt;strong&gt;profile&lt;/strong&gt; qui n&amp;rsquo;est &lt;strong&gt;pas actif&lt;/strong&gt; par défaut (pour ne pas
faire chier le monde) mais &lt;strong&gt;activable via une propriété&lt;/strong&gt; (maven nous permet
de le faire et c&amp;rsquo;est cool &lt;code&gt;^_^&lt;/code&gt;). La propriété utilisée sera
&lt;code&gt;external.build.root&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Le code ci-dessous est repris directement de mon inspiration&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:inspiration&#34;&gt;&lt;a href=&#34;#fn:inspiration&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Il
s&amp;rsquo;occupe de créer le dossier &lt;code&gt;${groupId}:${artifactId}&lt;/code&gt; dans
&lt;code&gt;external.build.root&lt;/code&gt; et de faire le lien dans le dossier courant.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;c&#34;&gt;&amp;lt;!-- […] --&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;profiles&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;profile&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;external-build-dir&lt;span class=&#34;nt&#34;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;activation&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;activeByDefault&amp;gt;&lt;/span&gt;false&lt;span class=&#34;nt&#34;&gt;&amp;lt;/activeByDefault&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;property&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;external.build.root&lt;span class=&#34;nt&#34;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/activation&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;com.alexecollins.maven.plugin&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;script-maven-plugin&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.0.0&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;prep-work-tree&lt;span class=&#34;nt&#34;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;execute&lt;span class=&#34;nt&#34;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;initialize&lt;span class=&#34;nt&#34;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
                                        import java.nio.file.*
                                        def dir =
                                        &amp;#34;${external.build.root}/${project.groupId}:${project.artifactId}&amp;#34;
                                        println &amp;#34;using Maven dir ${dir}&amp;#34;
                                        def dirPath = Paths.get(dir)
                                        if (!Files.exists(dirPath)) {
                                        Files.createDirectories(dirPath)
                                        }
                                        def target = Paths.get(&amp;#34;${project.build.directory}&amp;#34;)
                                        if (!Files.exists(target)) {
                                        Files.createSymbolicLink(target, dirPath)
                                        }&lt;span class=&#34;nt&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;drop-symlink&lt;span class=&#34;nt&#34;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;execute&lt;span class=&#34;nt&#34;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;clean&lt;span class=&#34;nt&#34;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
                                        import java.nio.file.*
                                        def target = Paths.get(&amp;#34;${project.build.directory}&amp;#34;)
                                        if (Files.isSymbolicLink(target)) {
                                        Files.delete(target)
                                        }
                                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.codehaus.groovy&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;groovy&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                                &lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.8.6&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                            &lt;span class=&#34;nt&#34;&gt;&amp;lt;language&amp;gt;&lt;/span&gt;groovy&lt;span class=&#34;nt&#34;&gt;&amp;lt;/language&amp;gt;&lt;/span&gt;
                        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/profiles&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;c&#34;&gt;&amp;lt;!-- […] --&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ainsi, il suffit ensuite d&amp;rsquo;avoir quelques choses du genre dans son
&lt;code&gt;$HOME/.m2/settings.xml&lt;/code&gt; pour que les builds qui ont ce profil se &lt;em&gt;build&lt;/em&gt;
dans &lt;code&gt;/tmp/m2/&lt;/code&gt;. On peut aussi ne rien avoir dans &lt;code&gt;$HOME/.m2/settings.xml&lt;/code&gt;
et utilise &lt;code&gt;-Dexternal.build.root=/tmp/m2/&lt;/code&gt; avec la commande &lt;code&gt;mvn&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;settings&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;c&#34;&gt;&amp;lt;!-- […] --&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;profiles&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;profile&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;build-in-ramfs&lt;span class=&#34;nt&#34;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;external.build.root&amp;gt;&lt;/span&gt;/tmp/m2/&lt;span class=&#34;nt&#34;&gt;&amp;lt;/external.build.root&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/profile&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/profiles&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;activeProfiles&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;activeProfile&amp;gt;&lt;/span&gt;build-in-ramfs&lt;span class=&#34;nt&#34;&gt;&amp;lt;/activeProfile&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/activeProfiles&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;c&#34;&gt;&amp;lt;!-- […] --&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:inspiration&#34;&gt;&lt;a href=&#34;http://elehack.net/writings/programming/maven-target-in-tmpfs&#34;&gt;Putting Maven build directories out-of-tree&lt;/a&gt; par &lt;a href=&#34;http://elehack.net/&#34;&gt;Michal Ekstrand&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:inspiration&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Gollum Comme Wiki Personnel</title>
      <link>https://vincent.demeester.fr/posts/2012-12-16-gollum-comme-wiki-personnel/</link>
      <pubDate>Sun, 16 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2012-12-16-gollum-comme-wiki-personnel/</guid>
      <description>

&lt;p&gt;Il y a environ 4 mois j&amp;rsquo;ai eu un accident de vélo ; un traumatisme crânien, des brulures sur la face, quelques points de sutures, un doigt cassé et une hernie discale m&amp;rsquo;ont cloué (et me clou encore) plus que d&amp;rsquo;habitude sur ma chaise de bureau. Le bon côté des choses, c&amp;rsquo;est que cela m&amp;rsquo;a permit de me poser et de réfléchir une bonne façon d&amp;rsquo;être efficace et organiser, au travail et à la maison :-).&lt;/p&gt;

&lt;p&gt;Une des principales &lt;em&gt;action&lt;/em&gt; que j&amp;rsquo;ai pris est d&amp;rsquo;utiliser un wiki local et synchronisé sur &lt;em&gt;tout&lt;/em&gt; mes PCs. Le &lt;em&gt;format&lt;/em&gt; wiki est assez adapté à une prise de note et à la création de contenu plus complet (comme des &lt;a href=&#34;http://shortbrain.org&#34;&gt;articles&lt;/a&gt; ou de la documentation pour des projets en cours). Les conditions étaient les suivantes :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Facilité de mise en place.&lt;/li&gt;
&lt;li&gt;Pas de base de données.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Merging&lt;/em&gt; facile (&lt;a href=&#34;http://git-scm.com&#34;&gt;git&lt;/a&gt; &lt;em&gt;rules my world&lt;/em&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt; comme syntaxe, car utilisé à peu près partout (blogs, articles, READMEs, documentations).&lt;/li&gt;
&lt;li&gt;Éditable à partir d&amp;rsquo;une interface web ou de mon éditeur favoris.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;L&amp;rsquo;outil qui remplit presque toutes ces conditions s&amp;rsquo;appelle &lt;a href=&#34;https://github.com/github/gollum&#34;&gt;gollum&lt;/a&gt;. C&amp;rsquo;est un moteur wiki, écris en ruby, qui se base sur un repository &lt;a href=&#34;http://git-scm.com&#34;&gt;git&lt;/a&gt;. Il est développer par l&amp;rsquo;équipe de &lt;a href=&#34;http://github.com&#34;&gt;Github&lt;/a&gt; et c&amp;rsquo;est celui qui est utilisé par les pages wiki là-bas. Il permet d&amp;rsquo;utiliser à peu près n&amp;rsquo;importe quel syntaxe (dont &lt;a href=&#34;https://github.com/github/github-flavored-markdown&#34;&gt;github-markdown&lt;/a&gt; qui est assez proche de celle de &lt;a href=&#34;http://johnmacfarlane.net/pandoc&#34;&gt;pandoc&lt;/a&gt;). Par ailleurs, comme il se base sur &lt;a href=&#34;http://git-scm.com&#34;&gt;git&lt;/a&gt;, les points &lt;em&gt;&amp;ldquo;pas de base de données&amp;rdquo;&lt;/em&gt;, &lt;em&gt;&amp;ldquo;merging facile&amp;rdquo;&lt;/em&gt; et &lt;em&gt;&amp;ldquo;éditable également à partir de mon éditeur favoris&amp;rdquo;&lt;/em&gt; sont toutes remplies.&lt;/p&gt;

&lt;p&gt;Avec &lt;a href=&#34;https://github.com/github/gollum&#34;&gt;Gollum&lt;/a&gt; vous avez un wiki markdown décentralisé, éditable via une interface web ou via votre éditeur favoris.&lt;/p&gt;

&lt;h2 id=&#34;mise-en-place&#34;&gt;Mise en place&lt;/h2&gt;

&lt;p&gt;La mise en place est relativement simple ; après tout dépend du besoin que vous avez. L&amp;rsquo;installation se fait par &lt;a href=&#34;rubygems.org&#34;&gt;RubyGem&lt;/a&gt; ou en clonant le repository.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Installation de gollum et du format markdown de github
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ gem install gollum gitub-markdown&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Si vous n&amp;rsquo;utilisez pas &lt;a href=&#34;https://github.com/sstephenson/rbenv&#34;&gt;rbenv&lt;/a&gt; ou &lt;a href=&#34;https://rvm.io/&#34;&gt;rvm&lt;/a&gt; il est probable qu&amp;rsquo;il faille lancer la commande en root ou utiliser sudo.&lt;/p&gt;

&lt;p&gt;Ensuite, il suffit de lancer &lt;a href=&#34;https://github.com/github/gollum&#34;&gt;Gollum&lt;/a&gt; dans un dossier qui est un repository git ; le tour est joué&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# J&amp;#39;ulitise ~/desktop/wiki pour mon wiki
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; ~/desktop/wiki &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; gollum&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;L&amp;rsquo;idée finale est d&amp;rsquo;automatiser deux choses :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Le démarrage de gollum&lt;/li&gt;
&lt;li&gt;La synchronisation du repository avec les différents autres &lt;em&gt;remotes&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Suivant le système d&amp;rsquo;exploitation et/ou la distribution utilisées, il y a énormément de possibilité d&amp;rsquo;effectuer cette automatisation. Dans mon cas, j&amp;rsquo;ai une &lt;a href=&#34;http://debian.org&#34;&gt;Debian&lt;/a&gt; assez light, avec surtout plein de scripts. Je démarre donc &lt;a href=&#34;https://github.com/github/gollum&#34;&gt;Gollum&lt;/a&gt; au démarrage de ma session grâce à une script qui est lancé dans la foulée du gestionnaire de fenêtre. La synchronisation se fait grâce à une tâche planifiée &lt;em&gt;cron&lt;/em&gt; qui est &amp;ldquo;distribué&amp;rdquo; sur chacune de mes machines.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;C&amp;rsquo;est tout pour le moment&lt;/em&gt; ;-).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Maven Release Gitflow</title>
      <link>https://vincent.demeester.fr/posts/2012-07-23-maven-release-gitflow/</link>
      <pubDate>Mon, 23 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2012-07-23-maven-release-gitflow/</guid>
      <description>

&lt;p&gt;I like a lot the &lt;a href=&#34;http://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;gitflow&lt;/a&gt; way of managing project.
When working on maven project, there is few great plugins that helps to get
the work done. One of them is &lt;a href=&#34;http://maven.apache.org/plugins/maven-release-plugin&#34;&gt;maven-release-plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Inspired on this &lt;a href=&#34;https://gist.github.com/1043970&#34;&gt;gist&lt;/a&gt;, I&amp;rsquo;ve come with
a cool way of doing things (let say we want to release a 0.1 version of an
artifact) :&lt;/p&gt;

&lt;h1 id=&#34;prepare-the-pom-xml&#34;&gt;Prepare the pom.xml.&lt;/h1&gt;

&lt;p&gt;It needs &lt;code&gt;&amp;lt;scm&amp;gt;&lt;/code&gt; entries, &lt;code&gt;&amp;lt;distributionManagement&amp;gt;&lt;/code&gt; entries
(to know where to deploy the release artifact) and few options for the
maven-release-plugin :&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;

    &lt;span class=&#34;c&#34;&gt;&amp;lt;!-- […] --&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;build&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;plugins&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;c&#34;&gt;&amp;lt;!-- […] --&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&#34;nt&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-release-plugin&lt;span class=&#34;nt&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.3.2&lt;span class=&#34;nt&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;tagNameFormat&amp;gt;&lt;/span&gt;v@{project.version}&lt;span class=&#34;nt&#34;&gt;&amp;lt;/tagNameFormat&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;pushChanges&amp;gt;&lt;/span&gt;false&lt;span class=&#34;nt&#34;&gt;&amp;lt;/pushChanges&amp;gt;&lt;/span&gt;
                    &lt;span class=&#34;nt&#34;&gt;&amp;lt;localCheckout&amp;gt;&lt;/span&gt;true&lt;span class=&#34;nt&#34;&gt;&amp;lt;/localCheckout&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;nt&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;c&#34;&gt;&amp;lt;!-- […] --&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/plugins&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/build&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;c&#34;&gt;&amp;lt;!-- […] --&amp;gt;&lt;/span&gt;

&lt;span class=&#34;nt&#34;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Few explanation here :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tagNameFormat&lt;/code&gt; is here to change the default tag name (which is &lt;code&gt;${project.artifactId}-${project.version}&lt;/code&gt;) to a better one.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pushChanges&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt; tells  maven-release-plugin not to push
changes (this will become useful)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;localCheckout&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; tells maven-release-plugin to clone from
local repository (not distant). This is especially useful here because we
didn&amp;rsquo;t push anything (so not setting this option would result in a failure).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;the-real-stuff&#34;&gt;The real stuff&lt;/h1&gt;

&lt;p&gt;First create a release branch from develop.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git checkout -b release/v0.1 develop&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then run the maven release stuff.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ mvn release:prepare               &lt;span class=&#34;c1&#34;&gt;# change the pom, commit and tag version, and
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                                    &lt;span class=&#34;c1&#34;&gt;# re-change pom (by incrementing SNAPSHOT version)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ mvn release:perform               # get the tagged version, compile and deploy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the real fun begins.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ git checkout develop              &lt;span class=&#34;c1&#34;&gt;# get back to the develop branch
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ git merge --no-ff release/v0.1    &lt;span class=&#34;c1&#34;&gt;# merge the version back into develop
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ git checkout master               &lt;span class=&#34;c1&#34;&gt;# go to the master branch
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ git merge --no-ff release/v0.1~1  &lt;span class=&#34;c1&#34;&gt;# merge the version back into master but
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;                                    &lt;span class=&#34;c1&#34;&gt;# the tagged version instead of the release/v0.1 HEAD
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ git branch -D release/v0.1        &lt;span class=&#34;c1&#34;&gt;# Removing the release branch
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;$ git push --all &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git push --tags # Finally push everything&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The real magic here is the &lt;code&gt;git merge --no-ff release/v0.1~1&lt;/code&gt; which will
merge into master the commit before the HEAD of the branch &lt;code&gt;release/v0.1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next step would be to create a helper script that automates this and
verify that the &lt;code&gt;pom.xml&lt;/code&gt; has the right configuration options.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit 17:58&lt;/strong&gt; : You can take a look &lt;a href=&#34;https://github.com/vdemeester/java-config/blob/master/bin/mvn-release-flow&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>News</title>
      <link>https://vincent.demeester.fr/posts/2012-07-21-news/</link>
      <pubDate>Sat, 21 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2012-07-21-news/</guid>
      <description>&lt;p&gt;Je suis resté assez longtemps silencieux, à cause du boulot entre autre. Je
vais donc remédier un peu à ça en publiant un petit post &lt;em&gt;news&lt;/em&gt; :-).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Je suis fan de cyclisme. Mon vélo de course est ma seconde paire de jambes.
Enfin, le mot juste serait plutôt était. Il y a quelques semaines, en
rentrant du boulot, j&amp;rsquo;ai sentis un grosse vibration, puis plus moyen de
tourner les pédales. Intrigué, j&amp;rsquo;ai jeté un coup d&amp;rsquo;œil au vélo, et &lt;em&gt;oh rage
oh désespoir&lt;/em&gt; j&amp;rsquo;ai découvert que la &lt;em&gt;fourche arrière&lt;/em&gt; du vélo c&amp;rsquo;était tout
simplement fendue.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://vincent.demeester.fr/images/2012/velo_casse.jpg&#34; alt=&#34;Fourche arrière du vélo&#34; title=&#34;Fourche arrière du vélo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Il ne me restait plus que mes yeux pour pleurer et mes jambes pour faire les
  7kms qui restait à effectuer jusqu&amp;rsquo;à mon appartement.&lt;/p&gt;

&lt;p&gt;Bien entendu ce n&amp;rsquo;est que matériel mais ce vélo avait une grande importance
  sentimentale : il avait mon âge et appartenait à mon père quand j&amp;rsquo;étais
  petit.&lt;/p&gt;

&lt;p&gt;Maintenant il ne reste plus qu&amp;rsquo;à sortir la carte bleue pour m&amp;rsquo;en procurer un
  nouveau…&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Je suis actuellement en vacances pour deux petites semaines (ouf !). Cela me
permet, entre autre, de me réentrainer à monter des cols (vu que je suis
dans les Alpes) ; parce qu&amp;rsquo;à Bordeaux, c&amp;rsquo;est assez difficile d&amp;rsquo;en trouver.
Par contre il me reste beaucoup de boulot pour retrouver ma forme d&amp;rsquo;il
y a une dizaine d&amp;rsquo;année et de monter facilement le &lt;em&gt;Grand Colombier&lt;/em&gt; !&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Je joue pas mal avec &lt;a href=&#34;http://vaadin.com&#34;&gt;Vaadin&lt;/a&gt; en ce moment,
principalement pour le boulot. J&amp;rsquo;annonce donc deux petits projets en cours :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;http://vdemeester.github.com/vaadin-container-utils&#34;&gt;vaadin-container-utils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;librarie utilitaire pour la création de Container vaadin.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vdemeester.github.com/vaadin-composite-layout&#34;&gt;vaadin-composite-layout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;un composant vaadin hautement flexible (mais je suis mauvais pour les
noms).&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Et &amp;ldquo;c&amp;rsquo;est tout pour le moment&amp;rdquo;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jekyll Forman Guard Bundler</title>
      <link>https://vincent.demeester.fr/posts/2012-05-13-jekyll-foreman-guard-bundler/</link>
      <pubDate>Sun, 13 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2012-05-13-jekyll-foreman-guard-bundler/</guid>
      <description>

&lt;p&gt;This post is a quick &amp;ldquo;How did I setup my Jekyll environnement ?&amp;rdquo;. We are going
all the tools that are quite awesome in Ruby.&lt;/p&gt;

&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;

&lt;p&gt;The goal is simple :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I want to be able to install any dependent &lt;a href=&#34;http://rubygems.org&#34;&gt;Gem&lt;/a&gt; with a
&lt;em&gt;on-liner&lt;/em&gt; command&lt;/li&gt;
&lt;li&gt;I want to be able to run a &lt;em&gt;Jekyll server&lt;/em&gt; that auto updates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We are going to play with : &lt;a href=&#34;http://gembundler.com/&#34;&gt;Bundler&lt;/a&gt;,
&lt;a href=&#34;https://github.com/guard/guard&#34;&gt;Guard&lt;/a&gt; and &lt;a href=&#34;https://github.com/ddollar/foreman&#34;&gt;foreman&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;bundler&#34;&gt;Bundler&lt;/h2&gt;

&lt;p&gt;Bundler let us run &lt;code&gt;bundle install&lt;/code&gt; to get all Ruby Gems we will need ; It use
a file name &lt;code&gt;Gemfile&lt;/code&gt;. The gems we need are simple : &lt;code&gt;jekyll&lt;/code&gt;, &lt;code&gt;guard&lt;/code&gt; and some
Guard extensions.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;http://rubygems.org&amp;#34;&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;gem&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;jekyll&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;gem&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;guard&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;gem&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;guard-jekyll2&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;gem&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;guard-shell&amp;#39;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;gem&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;guard-bundler&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;guard&#34;&gt;Guard&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Guard is a command line tool to easily handle events on file system modifications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Guard will be watching file we told him and run action in consequence ; The file
is name &lt;code&gt;Guardfile&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;guard&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;jekyll2&amp;#39;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;watch&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;%r{.*}&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;guard&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:bundler&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;watch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Gemfile&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# vim:filetype=ruby&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;foreman&#34;&gt;Foreman&lt;/h2&gt;

&lt;p&gt;Finally, foreman will let us declare our processes and will handle the start,
forward the output and handle the shutdown. It can then export its configuration
into more &lt;em&gt;production-ready&lt;/em&gt; file (&lt;code&gt;init&lt;/code&gt;, &lt;code&gt;upstard&lt;/code&gt;, …) ; It uses a file named
&lt;code&gt;Procfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will tell foreman to run :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The jekyll build-in server : &lt;code&gt;jekyll --server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Guard, to handle file changes &lt;em&gt;in background&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;web: bundle &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; jekyll --server
guard: bundle &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; guard&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that&amp;rsquo;s all folk. Now, you just need to run foreman in the Jekyll-powered
directory and edit your files.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gitolite quick and dirty mirror</title>
      <link>https://vincent.demeester.fr/posts/2012-05-08-gitolite-quick-and-dirty-mirror/</link>
      <pubDate>Tue, 08 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2012-05-08-gitolite-quick-and-dirty-mirror/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;m running a gitolite &lt;em&gt;instance&lt;/em&gt; on my personal server to manage my repositories
(personnal, private or public) ; and I am quickly going to share with you how I
setup a &lt;em&gt;quick and dirty&lt;/em&gt; mirror feature.&lt;/p&gt;

&lt;p&gt;First, I am using &lt;strong&gt;gitolite 3&lt;/strong&gt;. The mirroring we are going to setup is not the
&lt;em&gt;supported&lt;/em&gt; &lt;a href=&#34;http://sitaramc.github.com/gitolite/mirroring.html&#34;&gt;mirroring &lt;strong&gt;built-in&lt;/strong&gt;&lt;/a&gt;.
We are going to implement a simplier way to set mirror thing :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write a custom gitolite command ; the idea is to be able to write &lt;code&gt;git-config&lt;/code&gt;
stuff.&lt;/li&gt;
&lt;li&gt;Write a hook that take a specific &lt;code&gt;git-config&lt;/code&gt; (let say &lt;code&gt;mirror.url&lt;/code&gt;) and do
a simple mirroring.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;gitolite-commands&#34;&gt;Gitolite commands&lt;/h1&gt;

&lt;p&gt;Gitolite 3 has been rewritten to be more flexible : &lt;a href=&#34;http://sitaramc.github.com/gitolite/g3why.html&#34;&gt;Why a completely new version&lt;/a&gt;.
The rewrite made it really easy to extend gitolite. &lt;del&gt;I&amp;rsquo;ve fork &lt;a href=&#34;https://github.com/vdemeester/gitolite&#34;&gt;gitolite&lt;/a&gt; on github&lt;/del&gt;
I&amp;rsquo;ve created a &lt;a href=&#34;http://github.com/vdemeester/vdemeester-gitolite-local-code&#34;&gt;repository git&lt;/a&gt;
to easily add commands to my gitolite instance via &lt;em&gt;local code&lt;/em&gt;. The gitolite command I wrote is
a quick and dirty script in shell to add &lt;code&gt;git config&lt;/code&gt;. The source should speek
for itself ; It &lt;em&gt;should&lt;/em&gt; include some way to check if the given config is not
already present in the &lt;code&gt;gitolite-admin&lt;/code&gt; configuration file — and so might be
rewritten in &lt;code&gt;Perl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The command is &lt;code&gt;write-git-config&lt;/code&gt; because a &lt;code&gt;git-config&lt;/code&gt; command already exists
in the built-in commands.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Usage:    ssh git@host write-git-config &amp;lt;repo&amp;gt; &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;#
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# Set git-config value for user-created (&amp;#34;wild&amp;#34;) repo.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
die&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &amp;gt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
usage&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt; perl -lne &lt;span class=&#34;s1&#34;&gt;&amp;#39;print substr($_, 2) if /^# Usage/../^$/&amp;#39;&lt;/span&gt; &amp;lt; &lt;span class=&#34;nv&#34;&gt;$0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$2&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$3&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; usage
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;-h&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; usage
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$GL_USER&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; die GL_USER not &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# ----------------------------------------------------------------------
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;shift&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;shift&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;shift&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# this shell script takes arguments that are completely under the user&amp;#39;s
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# control, so make sure you quote those suckers!
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; gitolite query-rc -q WRITER_CAN_UPDATE_DESC
&lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
    gitolite access -q &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$repo&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$GL_USER&lt;/span&gt; W any &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; die You are not authorised
&lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
    gitolite creator &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$repo&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$GL_USER&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; die You are not authorised
&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# if it passes, $repo is a valid repo name so it is known to contain only sane
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# characters.  This is because &amp;#39;gitolite creator&amp;#39; return true only if there
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# *is* a repo of that name and it has a gl-creator file that contains the same
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# text as $GL_USER.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;configfile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;gitolite query-rc GL_REPO_BASE&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;/&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$repo&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;.git/config

git config --file &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$configfile&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$key&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$value&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;gitolite-hooks&#34;&gt;Gitolite hooks&lt;/h1&gt;

&lt;p&gt;The next step is to write a quick &lt;code&gt;post-receive&lt;/code&gt; hook that check if there is a
certain &lt;code&gt;git-config&lt;/code&gt; entry and run &lt;code&gt;git push --mirror&lt;/code&gt;. The file is in
&lt;code&gt;$HOME/.gitolite/hooks/common/post-receive&lt;/code&gt; ; you could add a better system to
hooks (to be able to add &amp;ldquo;dynamic&amp;rdquo; hooks, …).&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# Simple gitolite mirroring
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# flush STDIN coming from git, because gitolite&amp;#39;s own post-receive.mirrorpush
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# script does the same thing
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -t &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; cat &amp;gt;/dev/null

&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$GL_REPO&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; die GL_REPO not &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;git config --get mirror.url&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$target&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Support a REPO variable for wildcard mirrors
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;gl_repo_escaped&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$GL_REPO&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed &lt;span class=&#34;s1&#34;&gt;&amp;#39;s/\//\\\//g&amp;#39;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$target&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sed -e &lt;span class=&#34;s2&#34;&gt;&amp;#34;s/REPO/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$gl_repo_escaped&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;/g&amp;#34;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# Do the mirror push
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;git push --mirror &lt;span class=&#34;nv&#34;&gt;$target&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The next, and final step is to run &lt;code&gt;gitolite compile&lt;/code&gt; to update links to hooks
for every repositories.&lt;/p&gt;

&lt;h1 id=&#34;for-real&#34;&gt;For real&lt;/h1&gt;

&lt;p&gt;And finaly, this is the final step you&amp;rsquo;ll do.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh git@host write-git-config vincent/vcsh-home mirror.url git@github.com:vdemeester/vcsh-home.git
$ git push
Counting objects: 5, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 294 bytes, done.
Total 3 (delta 2), reused 0 (delta 0)
remote: To git@github.com:vdemeester/vcsh-home.git
remote:    65681a8..701c990  master -&amp;gt; master
To git@host:vincent/vcsh-home.git
   65681a8..701c990  master -&amp;gt; master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that should be it !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update 2012/10/04&lt;/strong&gt; : Moved from gitolite fork to &lt;em&gt;gitolite local code&lt;/em&gt;
repository.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reinit and Jekyll</title>
      <link>https://vincent.demeester.fr/posts/2012-05-07-reinit-and-jekyll/</link>
      <pubDate>Mon, 07 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/posts/2012-05-07-reinit-and-jekyll/</guid>
      <description>

&lt;p&gt;Two weeks ago, my &lt;em&gt;online&lt;/em&gt; personal server has been attacked and, somehow, died. I&amp;rsquo;m in the process
of re-installation of it but I&amp;rsquo;m going to hardened a bit the security on it. Anyway, this crash meant
that every piece of site I maintain has been down. That&amp;rsquo;s why I moved this &lt;em&gt;identity site&lt;/em&gt; on the
github pages, using a CNAME ; That way I can crash as much as I want my server(s), this page should
still be up for a while.&lt;/p&gt;

&lt;p&gt;And I&amp;rsquo;m switching on Jekyll for this website as It is supported by Github page, easy to use and easy
to deploy elsewhere (if one day I want to move from Github).&lt;/p&gt;

&lt;p&gt;The rest of the post is going to be used as a &lt;em&gt;sandbox&lt;/em&gt; post to test the site styles.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,
consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.
Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&lt;/p&gt;

&lt;p&gt;Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse
id sem consectetuer libero luctus adipiscing.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;highlight&#34;&gt;Highlight&lt;/h2&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;foo&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;puts&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some bash script…&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/bash
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;update_gems&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Update gems for all versions ? (y/N)&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; UPDATE_GEMS
    &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; -z &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;UPDATE_GEMS&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;UPDATE_GEMS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;n&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;UPDATE_GEMS&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; version in &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;ls --color&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;never &lt;span class=&#34;nv&#34;&gt;$HOME&lt;/span&gt;/.rbenv/versions&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;
            &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Updating &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;%/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;
            &lt;span class=&#34;nv&#34;&gt;RBENV_VERSION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;%/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; rbenv &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; gem update
            &lt;span class=&#34;nv&#34;&gt;RBENV_VERSION&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;%/&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; rbenv &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; gem install bundler
        &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

update_gems&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://vincent.demeester.fr/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/about/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Archive</title>
      <link>https://vincent.demeester.fr/archive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/archive/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Categories</title>
      <link>https://vincent.demeester.fr/categories/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/categories/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Tags</title>
      <link>https://vincent.demeester.fr/tags/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent.demeester.fr/tags/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>

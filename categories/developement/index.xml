<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Developement on Vincent Demeester</title>
    <link>http://vincent.demeester.fr/categories/developement/</link>
    <description>Recent content in Developement on Vincent Demeester</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fr-fr</language>
    <lastBuildDate>Wed, 11 Jan 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://vincent.demeester.fr/categories/developement/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Golang testing — functional arguments for wonderful builders</title>
      <link>http://vincent.demeester.fr/posts/2017-01-01-go-testing-functionnal-builders/</link>
      <pubDate>Wed, 11 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2017-01-01-go-testing-functionnal-builders/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;
Programming is not easy; even the best programmers are incapable of
writing programs that work exactly as intended every time. Therefore
an important part of the software development process is
testing. Writing tests for our code is a good way to ensure quality
and improve reliability.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Go programs, when properly implemented, are fairly simple to test
programatically. The &lt;code&gt;testing&lt;/code&gt; built-in library and the features of
the language itself offer plenty of ways to write good tests. As this
is a subject I particularly like, I&#39;m gonna write a bunch of articles
about it, that, &lt;i&gt;hopefully&lt;/i&gt; do not get old or boring.
&lt;/p&gt;

&lt;p&gt;
I&#39;m not going to start by introducing how &lt;code&gt;testing&lt;/code&gt; works, it&#39;s
already widely described in &lt;a href=&#34;https://golang.org/pkg/testing/&#34;&gt;the &lt;code&gt;testing&lt;/code&gt; godoc&lt;/a&gt;, &lt;a href=&#34;https://blog.golang.org/examples&#34;&gt;some&lt;/a&gt; &lt;a href=&#34;https://www.golang-book.com/books/intro/12&#34;&gt;articles&lt;/a&gt; and
&lt;a href=&#34;https://jonathanmh.com/golang-unit-testing-for-absolute-beginners/&#34;&gt;blogs&lt;/a&gt;. I&#39;m going to jump ahead on a more advanced techinque to write
tests, the &lt;code&gt;builders&lt;/code&gt; for tests.
&lt;/p&gt;

&lt;p&gt;
One of the most important characteristic of a &lt;b&gt;unit test&lt;/b&gt; (and any
type of test really) is &lt;b&gt;readability&lt;/b&gt;. This means it should be &lt;i&gt;easy
to read&lt;/i&gt; but most importantly it should &lt;b&gt;clearly show the intent of
the test&lt;/b&gt;. The setup (and cleanup) of the tests should be as small as
possible to avoid the noise. And as we are going to see below, &lt;code&gt;go&lt;/code&gt;
makes it pretty easy to do so.
&lt;/p&gt;

&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;Builders in tests&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
Sometimes, your need to create data structure for your test that
might take a lot of line and introduce noise. In &lt;code&gt;golang&lt;/code&gt; we don&#39;t
have method overload or even &lt;i&gt;constructors&lt;/i&gt; as some other language
have. This means most of the time, we end up building our data using
directly the struct expression, as below.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt; := &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;{
        &lt;span class=&#34;org-constant&#34;&gt;Name&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;carthage&#34;&lt;/span&gt;,
        &lt;span class=&#34;org-constant&#34;&gt;Hostname&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;carthage.sbr.pm&#34;&lt;/span&gt;,
        &lt;span class=&#34;org-constant&#34;&gt;Platform&lt;/span&gt;: &lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x86_64&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;:           &lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;,
        },
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Let&#39;s imagine we have a &lt;code&gt;Validate&lt;/code&gt; function that make sure the
specified &lt;code&gt;Node&lt;/code&gt; is supported on our structure. We would write some
tests that ensure that.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateLinuxIsSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&amp;amp;&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Name&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;carthage&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;Hostname&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;carthage.sbr.pm&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;Platform&lt;/span&gt;: &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                        &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x86_64&#34;&lt;/span&gt;,
                        &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;:           &lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;,
                },
        })
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; !&lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;linux should be supported, it was not&#34;&lt;/span&gt;)
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateDarwinIsNotSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&amp;amp;&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Name&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;babylon&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;Hostname&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;babylon.sbr.pm&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;Platform&lt;/span&gt;: &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                        &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x86_64&#34;&lt;/span&gt;,
                        &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;:           &lt;span class=&#34;org-string&#34;&gt;&#34;darwin&#34;&lt;/span&gt;,
                },
        })
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;darwin should not be supported, it was&#34;&lt;/span&gt;)
        }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This is quickly hard to read, there is too much noise on that
test. We setup a whole &lt;code&gt;Node&lt;/code&gt; struct, but the only thing we really
intend to test is the &lt;code&gt;Platform.OS&lt;/code&gt; part. The rest is just required
fields for the function to correctly compile and run.
&lt;/p&gt;

&lt;p&gt;
This is where test builders (and builders in general) comes into
play. In &lt;a href=&#34;http://www.growing-object-oriented-software.com/&#34;&gt;Growing Object-Oriented Software Guided by Tests&lt;/a&gt;, the
Chapter 22 &#34;Constructing Complex Test Data&#34; is exactly about that
and guide us through the why and the how of these builders. The
examples in the book are in &lt;code&gt;java&lt;/code&gt; and uses wisely the
object-oriented nature of the language. Here is an example from the
book.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-java&#34;&gt;&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;I just want an order from a customer that has no post code&lt;/span&gt;
&lt;span class=&#34;org-type&#34;&gt;Order&lt;/span&gt; &lt;span class=&#34;org-variable-name&#34;&gt;order&lt;/span&gt; = &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;anOrder&lt;/span&gt;()
    .&lt;span class=&#34;org-rainbow-identifiers-identifier-7&#34;&gt;from&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-13&#34;&gt;aCustomer&lt;/span&gt;().&lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;with&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-13&#34;&gt;anAddress&lt;/span&gt;().&lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;withNotPostCode&lt;/span&gt;()))
    .&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;build&lt;/span&gt;()
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
These builders helps &lt;b&gt;keep tests expressive&lt;/b&gt;, as it&#39;s pretty obvious
when reading it, what we want to test. They remove the &lt;b&gt;visual
noise&lt;/b&gt; you have when building an object (or a &lt;code&gt;struct{}&lt;/code&gt; in Go) and
allows you to put sane default. They also make &lt;b&gt;tests resilient to
change&lt;/b&gt;. If the structure changes, only the builder has to be
updated, not the tests depending on it. They also make default case
really simple to write, and special cases not much more complicated.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-2&#34;&gt;Builder in Go&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-2&#34;&gt;
&lt;p&gt;
The naive way to create builders in &lt;code&gt;go&lt;/code&gt; could be to create a
&lt;code&gt;builder&lt;/code&gt; struct that have methods to construct the final struct and
a &lt;code&gt;build&lt;/code&gt; method. Let&#39;s see how it looks.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;() *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &amp;amp;&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;node&lt;/span&gt;: &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;{
                        &lt;span class=&#34;org-constant&#34;&gt;Name&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;node&#34;&lt;/span&gt;,
                        &lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Other defaults&lt;/span&gt;
                },
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt; &lt;span class=&#34;org-keyword&#34;&gt;struct&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt; &amp;amp;&lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;Node&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt;) &lt;span class=&#34;org-function-name&#34;&gt;Build&lt;/span&gt;() *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt;) &lt;span class=&#34;org-function-name&#34;&gt;Hostname&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;hostname&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;Hostname&lt;/span&gt; = &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;hostname&lt;/span&gt;
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt;) &lt;span class=&#34;org-function-name&#34;&gt;Name&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;Name&lt;/span&gt; = &lt;span class=&#34;org-rainbow-identifiers-identifier-3&#34;&gt;name&lt;/span&gt;
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt;) &lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;) *&lt;span class=&#34;org-type&#34;&gt;NodeBuilder&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;Platform&lt;/span&gt; = &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt;
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This looks decent, and using it is pretty straightforward. At least
it make building the &lt;code&gt;struct&lt;/code&gt; more expressive, less noisy and
resilient to change. We can update the previous test as follow.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateLinuxIsSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(&amp;amp;&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x86_64&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;:           &lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;,
        }).&lt;span class=&#34;org-function-name&#34;&gt;build&lt;/span&gt;())
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; !&lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;linux should be supported, it was not&#34;&lt;/span&gt;)
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateDarwinIsNotSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(&amp;amp;&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x86_64&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;:           &lt;span class=&#34;org-string&#34;&gt;&#34;darwin&#34;&lt;/span&gt;,
        }).&lt;span class=&#34;org-function-name&#34;&gt;build&lt;/span&gt;())
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;darwin should not be supported, it was&#34;&lt;/span&gt;)
        }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
There is room for improvement :
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;There is still some noise, mainly &lt;code&gt;build()&lt;/code&gt; and the platform
&lt;code&gt;struct&lt;/code&gt;, as it still shows too much.
&lt;/li&gt;
&lt;li&gt;It&#39;s not that extensible yet. If you want to update the &lt;code&gt;Node&lt;/code&gt; a
certain way that the builder is not written for, you have to
update the builder.
&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;NodeBuilder&lt;/code&gt; struct feels a little empty, it&#39;s just there to
hold on the &lt;code&gt;Node&lt;/code&gt; being constructed until it is &lt;code&gt;build&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
One improvement we could make is to have a &lt;code&gt;Platform&lt;/code&gt; builder, even
if it&#39;s a small struct here. Let&#39;s do that in the same way we did
with &lt;code&gt;Node&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;APlatform&lt;/span&gt;() *&lt;span class=&#34;org-type&#34;&gt;PlatformBuilder&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &amp;amp;&lt;span class=&#34;org-type&#34;&gt;PlatformBuilder&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;platform&lt;/span&gt;: &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                        &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x64_86&#34;&lt;/span&gt;,
                        &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;,
                },
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;PlatformBuilder&lt;/span&gt; &lt;span class=&#34;org-keyword&#34;&gt;struct&lt;/span&gt;{
        &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt; *&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;Platform&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;PlatformBuilder&lt;/span&gt;) &lt;span class=&#34;org-function-name&#34;&gt;build&lt;/span&gt;() *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;PlatformBuilder&lt;/span&gt;) &lt;span class=&#34;org-function-name&#34;&gt;OS&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) *&lt;span class=&#34;org-type&#34;&gt;PlatformBuilder&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;OS&lt;/span&gt; = &lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;os&lt;/span&gt;
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;b&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And our tests becomes 🐻.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateLinuxIsSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(
                &lt;span class=&#34;org-function-name&#34;&gt;APlatform&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;OS&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;).&lt;span class=&#34;org-function-name&#34;&gt;build&lt;/span&gt;()
        ).&lt;span class=&#34;org-function-name&#34;&gt;build&lt;/span&gt;())
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; !&lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;linux should be supported, it was not&#34;&lt;/span&gt;)
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateDarwinIsNotSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;ANode&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(
                &lt;span class=&#34;org-function-name&#34;&gt;APlatform&lt;/span&gt;().&lt;span class=&#34;org-function-name&#34;&gt;OS&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;darwin&#34;&lt;/span&gt;).&lt;span class=&#34;org-function-name&#34;&gt;build&lt;/span&gt;()
        ).&lt;span class=&#34;org-function-name&#34;&gt;build&lt;/span&gt;())
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;darwin should not be supported, it was&#34;&lt;/span&gt;)
        }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
It does not really improve the visual noise as there is now quite a
few duplication : several &lt;code&gt;build&lt;/code&gt;, &lt;code&gt;APlatform&lt;/code&gt; inside &lt;code&gt;Platform&lt;/code&gt;, …
It is a small improvement on readability but not that much compared
to the previous one. This is were the Go language features comes
into play.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-3&#34;&gt;Functional arguments to the rescue&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-3&#34;&gt;
&lt;p&gt;
Go has two interesting feature that are going to be useful here.
&lt;/p&gt;

&lt;p&gt;
First, a function in Go is a type on its own and thus is considered
a &lt;i&gt;first class citizen&lt;/i&gt;. It means it&#39;s possible to pass a function
as argument, or define a variable that holds it.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;ApplyTo&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;fn&lt;/span&gt; &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(&lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;fn&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;s&lt;/span&gt;)
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;world&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;fmt&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Sprintf&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;%s, world!&#34;&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;s&lt;/span&gt;)
}

&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Usage&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-1&#34;&gt;a&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;ApplyTo&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;hello&#34;&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;world&lt;/span&gt;)
&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;a == &#34;hello, world!&#34;&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The second feature that comes into play here, is the possiblity to
have &lt;i&gt;variadic&lt;/i&gt; functions. A variadic function is a function that
takes a variable number of arguments (from &lt;code&gt;0&lt;/code&gt; to any number of
argument).
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;Print&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;strs&lt;/span&gt; ...&lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt;) &lt;span class=&#34;org-type&#34;&gt;string&lt;/span&gt; {
        &lt;span class=&#34;org-keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;_&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;s&lt;/span&gt; := &lt;span class=&#34;org-keyword&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;strs&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;fmt&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Println&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;s&lt;/span&gt;)
        }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
As we are going to see below, combining these two feature makes our
builders pretty easy to write and to use with simple case, while
staying very customizable, even outside of the builder. This is
really well described in a talk from Dave Cheney : &lt;a href=&#34;https://www.youtube.com/watch?v=24lFtGHWxAQ&amp;index=15&amp;list=PLMW8Xq7bXrG58Qk-9QSy2HRh2WVeIrs7e&#34;&gt;Functional
options for friendly APIs&lt;/a&gt; (&lt;a href=&#34;https://dave.cheney.net/2014/10/17/functional-options-for-friendly-apis&#34;&gt;transcription&lt;/a&gt;).
&lt;/p&gt;

&lt;p&gt;
Let&#39;s apply that to our new builders.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;Node&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;nodeBuilders&lt;/span&gt; ...&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(*&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;)) *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt; := &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Name&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;node&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Other defaults&lt;/span&gt;
        }

        &lt;span class=&#34;org-keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;_&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;build&lt;/span&gt; := &lt;span class=&#34;org-keyword&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;nodeBuilders&lt;/span&gt; {
                &lt;span class=&#34;org-function-name&#34;&gt;build&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt;)
        }

        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node&lt;/span&gt;
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;platformBuilders&lt;/span&gt; ...&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(*&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;)) *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt; {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt; := &amp;amp;&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;{
                &lt;span class=&#34;org-constant&#34;&gt;Architecture&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;x64_86&#34;&lt;/span&gt;,
                &lt;span class=&#34;org-constant&#34;&gt;OS&lt;/span&gt;: &lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;,
        }

        &lt;span class=&#34;org-keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;_&lt;/span&gt;, &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;build&lt;/span&gt; := &lt;span class=&#34;org-keyword&#34;&gt;range&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;platformBuilders&lt;/span&gt; {
                &lt;span class=&#34;org-function-name&#34;&gt;build&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt;)
        }

        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-14&#34;&gt;platform&lt;/span&gt;
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And that is it for the actual builder code. It is &lt;b&gt;small&lt;/b&gt; and
simple, there is &lt;b&gt;no more &lt;code&gt;NodeBuilder&lt;/code&gt;&lt;/b&gt; struct, and this is highly
extensible. Let&#39;s see how to use it.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;a default node&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;node1&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Node&lt;/span&gt;()
&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;a node with a specific Hostname&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;node2&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Node&lt;/span&gt;(&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;Hostname&lt;/span&gt; = &lt;span class=&#34;org-string&#34;&gt;&#34;custom-hostname&#34;&lt;/span&gt;
})
&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;a node with a specific name and platform&lt;/span&gt;
&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;node3&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Node&lt;/span&gt;(&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;Name&lt;/span&gt; = &lt;span class=&#34;org-string&#34;&gt;&#34;custom-name&#34;&lt;/span&gt;
}, &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;Platform&lt;/span&gt; = &lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;) {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;OS&lt;/span&gt; = &lt;span class=&#34;org-string&#34;&gt;&#34;darwin&#34;&lt;/span&gt;
        })
})
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The last step is to define some &lt;i&gt;function builder&lt;/i&gt; for common or
widely used customization, to make this &lt;b&gt;expressive&lt;/b&gt;. And let
complex, &lt;i&gt;one-time&lt;/i&gt; function builder in the end of the user. Now our
tests looks like.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-go&#34;&gt;&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateLinuxIsSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;Node&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;WithPlatform&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;Linux&lt;/span&gt;)))
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; !&lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;linux should be supported, it was not&#34;&lt;/span&gt;)
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;TestValidateDarwinIsNotSupported&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;testing.T&lt;/span&gt;) {
        &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; := &lt;span class=&#34;org-function-name&#34;&gt;Validate&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;Node&lt;/span&gt;(&lt;span class=&#34;org-function-name&#34;&gt;WithPlatform&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;Darwin&lt;/span&gt;)))
        &lt;span class=&#34;org-keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-6&#34;&gt;valid&lt;/span&gt; {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;.&lt;span class=&#34;org-function-name&#34;&gt;Fatal&lt;/span&gt;(&lt;span class=&#34;org-string&#34;&gt;&#34;darwin should not be supported, it was&#34;&lt;/span&gt;)
        }
}

&lt;span class=&#34;org-comment-delimiter&#34;&gt;// &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Function builders&lt;/span&gt;
&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;WithPlatform&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;builders&lt;/span&gt; ...&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(*&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;)) &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;) {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Node&lt;/span&gt;) {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;n&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;Platform&lt;/span&gt; = &lt;span class=&#34;org-function-name&#34;&gt;Platform&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;builders&lt;/span&gt;...)
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;Linux&lt;/span&gt;() &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;) {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;) {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;OS&lt;/span&gt; = &lt;span class=&#34;org-string&#34;&gt;&#34;linux&#34;&lt;/span&gt;
        }
}

&lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;org-function-name&#34;&gt;Darwin&lt;/span&gt;() &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt; (&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;) {
        &lt;span class=&#34;org-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;org-keyword&#34;&gt;func&lt;/span&gt;(&lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt; *&lt;span class=&#34;org-type&#34;&gt;Platform&lt;/span&gt;) {
                &lt;span class=&#34;org-rainbow-identifiers-identifier-10&#34;&gt;p&lt;/span&gt;.&lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;OS&lt;/span&gt; = &lt;span class=&#34;org-string&#34;&gt;&#34;darwin&#34;&lt;/span&gt;
        }
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The intent is now clear. It&#39;s readable and still resilient to
change. The code &lt;code&gt;Node(WithPlatform(Linux))&lt;/code&gt; is easy to understand
for a human. It makes what are the &lt;i&gt;tested&lt;/i&gt; characteristics of
&lt;code&gt;struct&lt;/code&gt; pretty clear. It&#39;s easy to combine multiple builders as the
&lt;code&gt;WithPlatform&lt;/code&gt; function shows 👼. It&#39;s also easy to create a
&lt;i&gt;function builder&lt;/i&gt;, even in a different package (as long as the ways
to modify the struct are exported) and complex or &lt;i&gt;on-off&lt;/i&gt; builder
can be embedded in the function call (&lt;code&gt;Node(func(n *Node) { // …
  })&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
In summary, using these types of builder have several advantages :
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;tests are &lt;b&gt;easy to read&lt;/b&gt;, and reduce the visual noise
&lt;/li&gt;
&lt;li&gt;tests are &lt;b&gt;resilient to change&lt;/b&gt;
&lt;/li&gt;
&lt;li&gt;builders are &lt;b&gt;easy to compose&lt;/b&gt; and very extensible
&lt;/li&gt;
&lt;li&gt;builders could even be &lt;b&gt;shared&lt;/b&gt; with production code as there is
nothing tied to &lt;code&gt;testing&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Migration vers hugo</title>
      <link>http://vincent.demeester.fr/posts/2015-05-09-migration-to-hugo/</link>
      <pubDate>Sat, 09 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2015-05-09-migration-to-hugo/</guid>
      <description>&lt;p&gt;
Et voilà, une semaine après m&#39;être remis en route sur ce blog, je fais
déjà une migration &lt;code&gt;&amp;gt;_&amp;lt;&lt;/code&gt;. Je me suis rendu compte que &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt;
m&#39;énervait un peu, et comme je suis à fond dans &lt;a href=&#34;http://golang.org/&#34;&gt;go&lt;/a&gt; en ce moment, j&#39;ai
regardé du côté des générateurs de sites static et &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; a clairement
retenu mon attention.
&lt;/p&gt;

&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;Pourquoi Hugo ?&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;blockquote&gt;
&lt;p&gt;
&lt;b&gt;Make the Web Fun Again&lt;/b&gt;
&lt;/p&gt;

&lt;p&gt;
Introducing Hugo, a new idea around making website creation simple again. Hugo flexibly works with many formats and is ideal for blogs, docs, portfolios and much more. Hugo’s speed fosters creativity and makes building a website fun again.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Presque tout est dit dans cette citation.
&lt;/p&gt;

&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;Hugo est rapide.
&lt;/li&gt;
&lt;li&gt;Le système de content est un régale.
&lt;/li&gt;
&lt;li&gt;L&#39;organisation d&#39;un &lt;i&gt;projet hugo&lt;/i&gt; est simple :
&lt;ul class=&#34;org-ul&#34;&gt;
&lt;li&gt;&lt;code&gt;content&lt;/code&gt; pour le contenu, avec ce qu&#39;on veut dedans,
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;static&lt;/code&gt; pour le contenu statique (&lt;code&gt;css&lt;/code&gt;, &lt;code&gt;javascript&lt;/code&gt;, &lt;code&gt;images&lt;/code&gt;, …),
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;layouts&lt;/code&gt; pour les templates (super facile de mettre des templates différents en fonction des contenus, voir &lt;a href=&#34;http://gohugo.io/templates/content/&#34;&gt;ici&lt;/a&gt;),
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;themes&lt;/code&gt; pour les themes applicables (qui définissent eux même &lt;code&gt;layouts&lt;/code&gt; et &lt;code&gt;static&lt;/code&gt;.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Le système de template est &lt;a href=&#34;http://gohugo.io/templates/go-templates/&#34;&gt;puissant&lt;/a&gt; et un vrai régale.
&lt;/li&gt;
&lt;li&gt;Le mode &lt;code&gt;server&lt;/code&gt; a la possiblité de surveiller les fichiers(avec le &lt;i&gt;flag&lt;/i&gt; &lt;code&gt;-w&lt;/code&gt;, et implémente &lt;a href=&#34;http://gohugo.io/extras/livereload/&#34;&gt;LiveReload&lt;/a&gt; ce qui est un petit bonus non négligeable.
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-2&#34;&gt;Ce qui changes&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-2&#34;&gt;
&lt;p&gt;
Le principale changement est sur le/les repository utilisés. Avant tout était dans &lt;a href=&#34;https://github.com/vdemeester/vdemeester.github.com&#34;&gt;vdemeester.github.com&lt;/a&gt;, puisque c&#39;est github qui générait le résultat final avec Jekyll. Ce n&#39;est maintenant plus le cas : &lt;a href=&#34;https://github.com/vdemeester/blog&#34;&gt;blog&lt;/a&gt; héberge les sources du blog (les fichiers content en Markdown ou &lt;i&gt;HTML-from-orgmode&lt;/i&gt; ainsi que les templates et la configuration &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; — &lt;a href=&#34;https://github.com/vdemeester/vdemeester.github.com&#34;&gt;vdemeester.github.com&lt;/a&gt; héberge désormais le résultat.
&lt;/p&gt;

&lt;p&gt;
J&#39;en ai profité également pour faire quelques ajustements graphique, principalement sur les tags qui ont maintenant, parfois, des couleurs différentes.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-3&#34;&gt;Intégration avec Emacs &amp;amp; orgmode&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-3&#34;&gt;
&lt;p&gt;
Il me manque encore quelques petits &lt;i&gt;trucs&lt;/i&gt; pour rendre ça automatique, mais dans l&#39;idée, voilà le workflow que j&#39;utilise quand je publie un article (comme maintenant) :
&lt;/p&gt;

&lt;ol class=&#34;org-ol&#34;&gt;
&lt;li&gt;Démarre &lt;code&gt;hugo server -w&lt;/code&gt; dans mon repository &lt;code&gt;blog&lt;/code&gt;.
&lt;/li&gt;
&lt;li&gt;Je créer mon fichier &lt;code&gt;org&lt;/code&gt; au bon endroit (soit &lt;code&gt;$HOME/desktop/org/notes/vdf/monfichier.org&lt;/code&gt;). Par rapport au &lt;a href=&#34;http://vincent.demeester.fr/posts/2015-05-01-orgmode-et-jekyll/&#34;&gt;billet précédent&lt;/a&gt;, le header de mes fichiers &lt;code&gt;org&lt;/code&gt; change un peu :

&lt;pre class=&#34;example&#34;&gt;
#+begin_html
+++
title=&#34;Migration vers hugo&#34;
date=&#34;2015-05-09&#34;
categories=[&#34;developement&#34;]
tags=[&#34;hugo&#34;,&#34;golang&#34;,&#34;blog&#34;,&#34;emacs&#34;,&#34;orgmode&#34;,&#34;html&#34;]
lang=&#34;fr&#34;
+++
#+end_html

Et voilà, une semaine après  m&#39;être remis en route sur ce blog, je fais déjà une migration =&amp;gt;_&amp;lt;=. Je me suis rendu compte que [[http://jekyllrb.com/][Jekyll]] m&#39;énervait un peu, et comme je suis à fond dans [[http://golang.org/][go]] en ce moment, j&#39;ai regardé du côté des générateurs de sites static et [[http://gohugo.io/][Hugo]] a clairement retenu mon attention.
&lt;/pre&gt;
&lt;/li&gt;

&lt;li&gt;J&#39;exécute &lt;code&gt;org-publish-current-project&lt;/code&gt; (qu&#39;il faut que je &lt;i&gt;bind&lt;/i&gt; pour éviter de me le taper à la main..)
&lt;/li&gt;
&lt;li&gt;Et je regarde le résultat dans mon navigateur (merci encore &lt;a href=&#34;http://gohugo.io/extras/livereload/&#34;&gt;LiveReload&lt;/a&gt;).
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Pour me simplifier la vie, il me resterais à démarrer et arrêter facilement &lt;code&gt;hugo server -w&lt;/code&gt; dans le bon dossier directement depuis emacs (un peu à-la &lt;code&gt;compile&lt;/code&gt;), &lt;i&gt;binder&lt;/i&gt; &lt;code&gt;org-publish-current-project&lt;/code&gt; et un petit script final qui copie le rendu de &lt;code&gt;blog&lt;/code&gt; vers &lt;code&gt;vincent.demeester.fr&lt;/code&gt; et qui commit (le tout appellable depuis Emacs &lt;code&gt;;-P&lt;/code&gt;).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Orgmode et Jekyll</title>
      <link>http://vincent.demeester.fr/posts/2015-05-01-orgmode-et-jekyll/</link>
      <pubDate>Fri, 01 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2015-05-01-orgmode-et-jekyll/</guid>
      <description>&lt;div id=&#34;outline-container-sec-1&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-1&#34;&gt;Un peu plus d&#39;un an..&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-1&#34;&gt;
&lt;p&gt;
.. que je n&#39;ai rien posté ici. Le temps passe bien vite, mais c&#39;est plutôt une bonne chose. Je crois que quelque chose me manquait pour poster ici plus souvent.
&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;
Au niveau de mes points d&#39;entrées sur le web, je compte remettre un peu en route la partie blog de ce site et tourner shortbrain.org (ou autre) en un site plus &#34;documentation&#34; en me basant sur mes notes (powered by org-mode). &lt;b&gt;Je me suis également remis à Gnu Emacs et oh god qu&#39;est-ce que c&#39;est bon&lt;/b&gt; :-D.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
C&#39;est ce que j&#39;écrivais il y a un an, et effectivement c&#39;est toujours aussi bon &lt;code&gt;;-D&lt;/code&gt;. J&#39;ai commencé à utiliser &lt;code&gt;org-mode&lt;/code&gt; de manière assez intensive, pour mettre en place mon &lt;i&gt;personal kanban&lt;/i&gt; mais également pour prendre mes notes. Et plus je l&#39;utilise, plus j&#39;ai du mal m&#39;en passer et à aller dans mon dossier hébergeant ce site pour y écrire en Markdown. Il me fallait donc trouver une astuce pour convertir certaines notes en post pour Jekyll. C&#39;est maintenant chose faite (après 6 mois dans ma TODO-list…), et voici comment je m&#39;en sors.
&lt;/p&gt;

&lt;p&gt;
L&#39;idée générale est assez simple :
&lt;/p&gt;

&lt;ol class=&#34;org-ol&#34;&gt;
&lt;li&gt;Utiliser un dossier particulier pour les notes destiné à ce blog
&lt;/li&gt;
&lt;li&gt;Exporter, au format html, ces notes dans le bon dossier (&lt;code&gt;_posts&lt;/code&gt;)
&lt;/li&gt;
&lt;li&gt;… et c&#39;est tout en fait :) — c&#39;était pas &lt;i&gt;ben&lt;/i&gt; compliqué !
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-2&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-2&#34;&gt;Les fichiers org&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-2&#34;&gt;
&lt;p&gt;
Tous mes fichiers &lt;code&gt;org-mode&lt;/code&gt; sont dans un ensemble de dossiers bien particulier — cela n&#39;a pas grand chose d&#39;important à faire ici, mais ça permet de suivre la configuration qui suit. Il s&#39;agit du dossier &lt;code&gt;~/desktop/org/&lt;/code&gt;, et de ces fils : &lt;code&gt;todos&lt;/code&gt; pour ce que je dois faire et &lt;code&gt;notes&lt;/code&gt; pour ma prise de note. Dans &lt;code&gt;notes&lt;/code&gt; on trouve donc des dossiers et en particulier un qui se nomme &lt;code&gt;vdf&lt;/code&gt; (pour Vincent.Demeester.Fr).
&lt;/p&gt;

&lt;p&gt;
La seule différence que les fichiers &lt;code&gt;.org&lt;/code&gt; ont dans ce dossier par rapport aux autres, c&#39;est le début du fichier. En effet, &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; a besoin d&#39;une entête en &lt;code&gt;YAML&lt;/code&gt; pour le layout, les tags, la catégorie et plein d&#39;autres trucs. Le fichier &lt;code&gt;org&lt;/code&gt; de ce billet ressemble à ça par example :
&lt;/p&gt;

&lt;pre class=&#34;example&#34;&gt;
#+BEGIN_HTML
---
layout: post
category: developement
tags: jekyll blog emacs orgmode html
lang: fr
---
#+END_HTML
* Un peu plus d&#39;un an..

.. que je n&#39;ai rien posté ici. Le temps passe bien vite, mais c&#39;est plutôt une bonne chose. Je crois que quelque chose me manquait pour poster ici.

[…]
&lt;/pre&gt;

&lt;p&gt;
Les utilisateurs de Jekyll reconnaitront les &lt;code&gt;---&lt;/code&gt; et le format du header. &lt;code&gt;#+BEGIN_HTML&lt;/code&gt; et &lt;code&gt;#+END_HTML&lt;/code&gt; sont là pour dire à &lt;code&gt;org-mode&lt;/code&gt; d&#39;exporter un bloc en HTML sans l&#39;interpréter — c&#39;est une façon de mettre du HTML dans un document &lt;code&gt;org&lt;/code&gt; si on peut pas faire ce qu&#39;on veut avec le &lt;i&gt;markup&lt;/i&gt;. Ici ça nous permet d&#39;exporter tel quel le header de &lt;a href=&#34;http://jekyllrb.com/&#34;&gt;Jekyll&lt;/a&gt; en haut du HTML généré, pratique !
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&#34;outline-container-sec-3&#34; class=&#34;outline-2&#34;&gt;
&lt;h2 id=&#34;sec-3&#34;&gt;Configuration de org-mode&lt;/h2&gt;
&lt;div class=&#34;outline-text-2&#34; id=&#34;text-3&#34;&gt;
&lt;p&gt;
Il reste maintenant à configurer le &lt;i&gt;projet de publication&lt;/i&gt; (publishing project) dans Emacs. Je vais mettre ici juste la partie intéressante, donc pour plus d&#39;information sur comment publier des fichiers org-mode avec Emacs, c&#39;est par &lt;a href=&#34;http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html&#34;&gt;ici&lt;/a&gt; pour un tutoriel (j&#39;adore &lt;a href=&#34;http://orgmode.org/worg/org-tutorials/org-publish-html-tutorial.html&#34;&gt;worg&lt;/a&gt; soit dit en passant :P).
&lt;/p&gt;

&lt;p&gt;
L&#39;idée c&#39;est de définir un projet avec plusieurs &lt;i&gt;components&lt;/i&gt;, un pour les fichiers &lt;code&gt;org&lt;/code&gt;, un pour les fichiers &lt;code&gt;css&lt;/code&gt; et un pour les &lt;i&gt;assets&lt;/i&gt; (images, vidéos, …). On souhaite également ne pas générer de table des matières (TOC) et ne génerer que le &lt;i&gt;body&lt;/i&gt; (pas de &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;, …). Et ça se présente comme suit.
&lt;/p&gt;

&lt;div class=&#34;org-src-container&#34;&gt;

&lt;pre class=&#34;src src-emacs-lisp&#34;&gt;&lt;span class=&#34;org-comment-delimiter&#34;&gt;;; &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Variables&lt;/span&gt;
&lt;span class=&#34;org-rainbow-delimiters-depth-1&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-keyword&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;vdf-base-directory&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;~/desktop/org/notes/vdf/&#34;&lt;/span&gt;
      &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;vdf-site-directory&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;~/src/github/vdemeester/vdemeester.github.com&#34;&lt;/span&gt;
      &lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;vdf-publishing-directory&lt;/span&gt; &lt;span class=&#34;org-rainbow-delimiters-depth-2&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;expand-file-name&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;_posts&#34;&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;vdf-site-directory&lt;/span&gt;&lt;span class=&#34;org-rainbow-delimiters-depth-2&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;vdf-css-publishing-directory&lt;/span&gt; &lt;span class=&#34;org-rainbow-delimiters-depth-2&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;expand-file-name&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;css&#34;&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;vdf-site-directory&lt;/span&gt;&lt;span class=&#34;org-rainbow-delimiters-depth-2&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;vdf-assets-publishing-directory&lt;/span&gt; &lt;span class=&#34;org-rainbow-delimiters-depth-2&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;expand-file-name&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;assets&#34;&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-11&#34;&gt;vdf-site-directory&lt;/span&gt;&lt;span class=&#34;org-rainbow-delimiters-depth-2&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;org-rainbow-delimiters-depth-1&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;org-comment-delimiter&#34;&gt;;; &lt;/span&gt;&lt;span class=&#34;org-comment&#34;&gt;Project&lt;/span&gt;
&lt;span class=&#34;org-rainbow-delimiters-depth-1&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-keyword&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-12&#34;&gt;org-publish-project-alist&lt;/span&gt;
      `&lt;span class=&#34;org-rainbow-delimiters-depth-2&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-rainbow-delimiters-depth-3&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&#34;vdf-notes&#34;&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:base-directory&lt;/span&gt; ,&lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;vdf-base-directory&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:base-extension&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;org&#34;&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:publishing-directory&lt;/span&gt; ,&lt;span class=&#34;org-rainbow-identifiers-identifier-4&#34;&gt;vdf-publishing-directory&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:exclude&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;FIXME&#34;&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:section-numbers&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;nil&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:with-toc&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;nil&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:with-drawers&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:htmlized-source&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:publishing-function&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-7&#34;&gt;org-html-publish-to-html&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:headline-levels&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;4&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:body-only&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;org-rainbow-delimiters-depth-3&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;org-rainbow-delimiters-depth-3&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&#34;vdf-static-css&#34;&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:base-directory&lt;/span&gt; ,&lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;vdf-base-directory&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:base-extension&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;css&#34;&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:publishing-directory&lt;/span&gt; ,&lt;span class=&#34;org-rainbow-identifiers-identifier-2&#34;&gt;vdf-css-publishing-directory&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:recursive&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:publishing-function&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;org-publish-attachment&lt;/span&gt;
         &lt;span class=&#34;org-rainbow-delimiters-depth-3&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;org-rainbow-delimiters-depth-3&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&#34;vdf-static-assets&#34;&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:base-directory&lt;/span&gt; ,&lt;span class=&#34;org-rainbow-identifiers-identifier-9&#34;&gt;vdf-base-directory&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:base-extension&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;png&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-backslash&#34;&gt;\\&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-construct&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;jpg&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-backslash&#34;&gt;\\&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-construct&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;gif&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-backslash&#34;&gt;\\&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-construct&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;pdf&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-backslash&#34;&gt;\\&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-construct&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;mp3&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-backslash&#34;&gt;\\&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&lt;span class=&#34;org-regexp-grouping-construct&#34;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;ogg&#34;&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:publishing-directory&lt;/span&gt; ,&lt;span class=&#34;org-rainbow-identifiers-identifier-15&#34;&gt;vdf-assets-publishing-directory&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:recursive&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-8&#34;&gt;t&lt;/span&gt;
         &lt;span class=&#34;org-builtin&#34;&gt;:publishing-function&lt;/span&gt; &lt;span class=&#34;org-rainbow-identifiers-identifier-5&#34;&gt;org-publish-attachment&lt;/span&gt;
         &lt;span class=&#34;org-rainbow-delimiters-depth-3&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;org-rainbow-delimiters-depth-3&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&#34;vdf&#34;&lt;/span&gt; &lt;span class=&#34;org-builtin&#34;&gt;:components&lt;/span&gt; &lt;span class=&#34;org-rainbow-delimiters-depth-4&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;org-string&#34;&gt;&#34;vdf-notes&#34;&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;vdf-static-css&#34;&lt;/span&gt; &lt;span class=&#34;org-string&#34;&gt;&#34;vdf-static-assets&#34;&lt;/span&gt;&lt;span class=&#34;org-rainbow-delimiters-depth-4&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;org-rainbow-delimiters-depth-3&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;org-rainbow-delimiters-depth-2&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;org-rainbow-delimiters-depth-1&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
J&#39;utilise des variables, c&#39;est pas indispensable mais c&#39;est plus pratique. Il y a trois &lt;i&gt;components&lt;/i&gt;, chacun définit les fichiers qu&#39;il traite grâce à &lt;code&gt;:base-extension&lt;/code&gt;. Intéressons-nous surtout à &lt;code&gt;vdf-notes&lt;/code&gt; puisque c&#39;est celui qui nous sort les fichiers &lt;code&gt;HTML&lt;/code&gt; à partir des fichiers &lt;code&gt;org&lt;/code&gt;. On se passe de table des matières grâce à &lt;code&gt;:with-toc nil&lt;/code&gt;, on ne génère que le &lt;i&gt;body&lt;/i&gt; grâce à &lt;code&gt;:body-only t&lt;/code&gt; et on évite les numéros de sections avec &lt;code&gt;:section-numbers nil&lt;/code&gt;. Le bonus vient avec &lt;code&gt;:htmlized-source t&lt;/code&gt; puisque du coup, les parties sources (entre &lt;code&gt;#+BEGIN_SRC&lt;/code&gt; et &lt;code&gt;#+END_SRC&lt;/code&gt;) sont exportés avec les mêmes couleurs que j&#39;ai dans ma configuration Emacs (avec les &lt;a href=&#34;https://github.com/vdemeester/emacs-config#raindow-identifiers&#34;&gt;rainbow-identifiers&lt;/a&gt;, voir ce post &lt;a href=&#34;https://medium.com/@evnbr/coding-in-color-3a6db2743a1e&#34;&gt;là&lt;/a&gt; également).
&lt;/p&gt;

&lt;p&gt;
Il ne reste plus qu&#39;à publier le projet quand on le souhaite avec &lt;code&gt;org-publish&lt;/code&gt; — je vous laisse lire la documentation pour savoir comment on fait.
&lt;/p&gt;

&lt;p&gt;
Et c&#39;est tout bon. Un petit &lt;code&gt;bundle exec jekyll serve --watch&lt;/code&gt; pour voir le rendu — et quand on est content on commit. Et c&#39;est la fête &lt;code&gt;\o/&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
C&#39;est tout pour le moment, la fréquence des billets de ce blog devrait s&#39;incrémenter un peu maintenant.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Maven Tmpfs</title>
      <link>http://vincent.demeester.fr/posts/2013-09-08-maven-tmpfs/</link>
      <pubDate>Sun, 08 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2013-09-08-maven-tmpfs/</guid>
      <description>&lt;p&gt;Je suis un utilisateur convaincu de [maven](), malgré ces défauts, le moto
&lt;strong&gt;&amp;ldquo;Convention over configuration&amp;rdquo;&lt;/strong&gt; me va vraiment bien. Que ce soit au boulot ou
à la maison, j&amp;rsquo;ai plus d&amp;rsquo;ordinateurs équipés de ssd (ou de mémoire flash) que de
disque traditionnel (mécanique ?). Pour augmenter un peu la durée de vie de
ces disques SSD, j&amp;rsquo;ai cherché à savoir comment &lt;em&gt;déporter&lt;/em&gt; le &lt;em&gt;build&lt;/em&gt; de maven
(qui, pour rappel, se passe dans le dossier &lt;code&gt;target/&lt;/code&gt;) hors du SSD ; ici ce
sera dans le dossier &lt;code&gt;/tmp/&lt;/code&gt; qui est monté en mémoire (merci &lt;code&gt;tmpfs&lt;/code&gt;),
mais on peut imaginer déporter ça sur un autre disque, etc.. Après quelques
recherches j&amp;rsquo;ai trouvés quelques inspirations.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Limitations&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Dans la solution présentée ci-dessous les principales limitations sont
les suivantes (que j&amp;rsquo;essaierais de diminuer au fil du temp ;P) :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Il est nécessaire de modifier le pom.xml du projet ; cela ne s&amp;rsquo;appliquera
donc pas à tous les projets maven sans modification du pom.xml.&lt;/li&gt;
&lt;li&gt;Cela ne fonctionne que sur une plateforme qui support les liens
symboliques (Linux, Mac OS X, et autre UNIX).&lt;/li&gt;
&lt;li&gt;Cela ne fonctionne qu&amp;rsquo;avec Java 7 ou plus.&lt;/li&gt;
&lt;li&gt;Si vous utilisez m2e, il va gentillement gueuler et c&amp;rsquo;est moche ; pour
résoudre le problème, il faut faire un tour vers &lt;a href=&#34;http://wiki.eclipse.org/M2E_plugin_execution_not_covered&#34;&gt;M2E plugin execution
not covered&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pour [maven](), le dossier &lt;code&gt;target/&lt;/code&gt; vient de la propriété
&lt;code&gt;project.build.directory&lt;/code&gt;. Dans la théorie, il suffirait de modifier (dans
&lt;code&gt;$HOME/.m2/settings.xml&lt;/code&gt;) cette propriété et le tour serait jouer.
Malheuresement ce n&amp;rsquo;est pas possible, &lt;code&gt;project.build.directory&lt;/code&gt; est une
propriété interne et n&amp;rsquo;est, à priori, pas modifiable.&lt;/p&gt;

&lt;p&gt;Notre souhait est le suivant :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Le build doit se faire dans &lt;code&gt;/tmp/m2/&lt;/code&gt;, ce qui pour un projet se traduit
par &lt;code&gt;/tmp/m2/${groupId}:${artifactId}&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Le dossier &lt;code&gt;target/&lt;/code&gt; dans les sources est un lien symbolique vers le
dossier dans &lt;code&gt;/tmp/m2/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;On passe par un &lt;strong&gt;profile&lt;/strong&gt; qui n&amp;rsquo;est &lt;strong&gt;pas actif&lt;/strong&gt; par défaut (pour ne pas
faire chier le monde) mais &lt;strong&gt;activable via une propriété&lt;/strong&gt; (maven nous permet
de le faire et c&amp;rsquo;est cool &lt;code&gt;^_^&lt;/code&gt;). La propriété utilisée sera
&lt;code&gt;external.build.root&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Le code ci-dessous est repris directement de mon inspiration&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:inspiration&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:inspiration&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Il
s&amp;rsquo;occupe de créer le dossier &lt;code&gt;${groupId}:${artifactId}&lt;/code&gt; dans
&lt;code&gt;external.build.root&lt;/code&gt; et de faire le lien dans le dossier courant.&lt;/p&gt;


&lt;project&gt;
    &lt;!-- […] --&gt;
    &lt;profiles&gt;
        &lt;profile&gt;
            &lt;id&gt;external-build-dir&lt;/id&gt;
            &lt;activation&gt;
                &lt;activeByDefault&gt;false&lt;/activeByDefault&gt;
                &lt;property&gt;
                    &lt;name&gt;external.build.root&lt;/name&gt;
                &lt;/property&gt;
            &lt;/activation&gt;
            &lt;build&gt;
                &lt;plugins&gt;
                    &lt;plugin&gt;
                        &lt;groupId&gt;com.alexecollins.maven.plugin&lt;/groupId&gt;
                        &lt;artifactId&gt;script-maven-plugin&lt;/artifactId&gt;
                        &lt;version&gt;1.0.0&lt;/version&gt;
                        &lt;executions&gt;
                            &lt;execution&gt;
                                &lt;id&gt;prep-work-tree&lt;/id&gt;
                                &lt;goals&gt;
                                    &lt;goal&gt;execute&lt;/goal&gt;
                                &lt;/goals&gt;
                                &lt;phase&gt;initialize&lt;/phase&gt;
                                &lt;configuration&gt;
                                    &lt;script&gt;
                                        import java.nio.file.*
                                        def dir =
                                        &#34;${external.build.root}/${project.groupId}:${project.artifactId}&#34;
                                        println &#34;using Maven dir ${dir}&#34;
                                        def dirPath = Paths.get(dir)
                                        if (!Files.exists(dirPath)) {
                                        Files.createDirectories(dirPath)
                                        }
                                        def target = Paths.get(&#34;${project.build.directory}&#34;)
                                        if (!Files.exists(target)) {
                                        Files.createSymbolicLink(target, dirPath)
                                        }&lt;/script&gt;
                                &lt;/configuration&gt;
                            &lt;/execution&gt;
                            &lt;execution&gt;
                                &lt;id&gt;drop-symlink&lt;/id&gt;
                                &lt;goals&gt;
                                    &lt;goal&gt;execute&lt;/goal&gt;
                                &lt;/goals&gt;
                                &lt;phase&gt;clean&lt;/phase&gt;
                                &lt;configuration&gt;
                                    &lt;script&gt;
                                        import java.nio.file.*
                                        def target = Paths.get(&#34;${project.build.directory}&#34;)
                                        if (Files.isSymbolicLink(target)) {
                                        Files.delete(target)
                                        }
                                    &lt;/script&gt;
                                &lt;/configuration&gt;
                            &lt;/execution&gt;
                        &lt;/executions&gt;
                        &lt;dependencies&gt;
                            &lt;dependency&gt;
                                &lt;groupId&gt;org.codehaus.groovy&lt;/groupId&gt;
                                &lt;artifactId&gt;groovy&lt;/artifactId&gt;
                                &lt;version&gt;1.8.6&lt;/version&gt;
                            &lt;/dependency&gt;
                        &lt;/dependencies&gt;
                        &lt;configuration&gt;
                            &lt;language&gt;groovy&lt;/language&gt;
                        &lt;/configuration&gt;
                    &lt;/plugin&gt;
                &lt;/plugins&gt;
            &lt;/build&gt;
        &lt;/profile&gt;
    &lt;/profiles&gt;
    &lt;!-- […] --&gt;
&lt;/project&gt;


&lt;p&gt;Ainsi, il suffit ensuite d&amp;rsquo;avoir quelques choses du genre dans son
&lt;code&gt;$HOME/.m2/settings.xml&lt;/code&gt; pour que les builds qui ont ce profil se &lt;em&gt;build&lt;/em&gt;
dans &lt;code&gt;/tmp/m2/&lt;/code&gt;. On peut aussi ne rien avoir dans &lt;code&gt;$HOME/.m2/settings.xml&lt;/code&gt;
et utilise &lt;code&gt;-Dexternal.build.root=/tmp/m2/&lt;/code&gt; avec la commande &lt;code&gt;mvn&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;
&lt;settings&gt;
    &lt;!-- […] --&gt;
    &lt;profiles&gt;
        &lt;profile&gt;
            &lt;id&gt;build-in-ramfs&lt;/id&gt;
            &lt;properties&gt;
                &lt;external.build.root&gt;/tmp/m2/&lt;/external.build.root&gt;
            &lt;/properties&gt;
        &lt;/profile&gt;
    &lt;/profiles&gt;
    &lt;activeProfiles&gt;
        &lt;activeProfile&gt;build-in-ramfs&lt;/activeProfile&gt;
    &lt;/activeProfiles&gt;
    &lt;!-- […] --&gt;
&lt;/settings&gt;
&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:inspiration&#34;&gt;&lt;a href=&#34;http://elehack.net/writings/programming/maven-target-in-tmpfs&#34;&gt;Putting Maven build directories out-of-tree&lt;/a&gt; par &lt;a href=&#34;http://elehack.net/&#34;&gt;Michal Ekstrand&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:inspiration&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Maven Release Gitflow</title>
      <link>http://vincent.demeester.fr/posts/2012-07-23-maven-release-gitflow/</link>
      <pubDate>Mon, 23 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2012-07-23-maven-release-gitflow/</guid>
      <description>

&lt;p&gt;I like a lot the &lt;a href=&#34;http://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;gitflow&lt;/a&gt; way of managing project.
When working on maven project, there is few great plugins that helps to get
the work done. One of them is &lt;a href=&#34;http://maven.apache.org/plugins/maven-release-plugin&#34;&gt;maven-release-plugin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Inspired on this &lt;a href=&#34;https://gist.github.com/1043970&#34;&gt;gist&lt;/a&gt;, I&amp;rsquo;ve come with
a cool way of doing things (let say we want to release a 0.1 version of an
artifact) :&lt;/p&gt;

&lt;h1 id=&#34;prepare-the-pom-xml&#34;&gt;Prepare the pom.xml.&lt;/h1&gt;

&lt;p&gt;It needs &lt;code&gt;&amp;lt;scm&amp;gt;&lt;/code&gt; entries, &lt;code&gt;&amp;lt;distributionManagement&amp;gt;&lt;/code&gt; entries
(to know where to deploy the release artifact) and few options for the
maven-release-plugin :&lt;/p&gt;


&lt;project&gt;

    &lt;!-- […] --&gt;
    &lt;build&gt;
        &lt;plugins&gt;
            &lt;!-- […] --&gt;
            &lt;plugin&gt;
                &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;
                &lt;artifactId&gt;maven-release-plugin&lt;/artifactId&gt;
                &lt;version&gt;2.3.2&lt;/version&gt;
                &lt;configuration&gt;
                    &lt;tagNameFormat&gt;v@{project.version}&lt;/tagNameFormat&gt;
                    &lt;pushChanges&gt;false&lt;/pushChanges&gt;
                    &lt;localCheckout&gt;true&lt;/localCheckout&gt;
                &lt;/configuration&gt;
            &lt;/plugin&gt;
            &lt;!-- […] --&gt;
        &lt;/plugins&gt;
    &lt;/build&gt;
    &lt;!-- […] --&gt;

&lt;/project&gt;


&lt;p&gt;Few explanation here :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;tagNameFormat&lt;/code&gt; is here to change the default tag name (which is &lt;code&gt;${project.artifactId}-${project.version}&lt;/code&gt;) to a better one.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pushChanges&lt;/code&gt; set to &lt;code&gt;false&lt;/code&gt; tells  maven-release-plugin not to push
changes (this will become useful)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;localCheckout&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; tells maven-release-plugin to clone from
local repository (not distant). This is especially useful here because we
didn&amp;rsquo;t push anything (so not setting this option would result in a failure).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;the-real-stuff&#34;&gt;The real stuff&lt;/h1&gt;

&lt;p&gt;First create a release branch from develop.&lt;/p&gt;


$ git checkout -b release/v0.1 develop


&lt;p&gt;Then run the maven release stuff.&lt;/p&gt;


$ mvn release:prepare               # change the pom, commit and tag version, and
                                    # re-change pom (by incrementing SNAPSHOT version)
$ mvn release:perform               # get the tagged version, compile and deploy


&lt;p&gt;And the real fun begins.&lt;/p&gt;


$ git checkout develop              # get back to the develop branch
$ git merge --no-ff release/v0.1    # merge the version back into develop
$ git checkout master               # go to the master branch
$ git merge --no-ff release/v0.1~1  # merge the version back into master but
                                    # the tagged version instead of the release/v0.1 HEAD
$ git branch -D release/v0.1        # Removing the release branch
$ git push --all &amp;&amp; git push --tags # Finally push everything


&lt;p&gt;The real magic here is the &lt;code&gt;git merge --no-ff release/v0.1~1&lt;/code&gt; which will
merge into master the commit before the HEAD of the branch &lt;code&gt;release/v0.1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The next step would be to create a helper script that automates this and
verify that the &lt;code&gt;pom.xml&lt;/code&gt; has the right configuration options.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Edit 17:58&lt;/strong&gt; : You can take a look &lt;a href=&#34;https://github.com/vdemeester/java-config/blob/master/bin/mvn-release-flow&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jekyll Forman Guard Bundler</title>
      <link>http://vincent.demeester.fr/posts/2012-05-13-jekyll-foreman-guard-bundler/</link>
      <pubDate>Sun, 13 May 2012 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2012-05-13-jekyll-foreman-guard-bundler/</guid>
      <description>

&lt;p&gt;This post is a quick &amp;ldquo;How did I setup my Jekyll environnement ?&amp;rdquo;. We are going
all the tools that are quite awesome in Ruby.&lt;/p&gt;

&lt;h1 id=&#34;goal&#34;&gt;Goal&lt;/h1&gt;

&lt;p&gt;The goal is simple :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I want to be able to install any dependent &lt;a href=&#34;http://rubygems.org&#34;&gt;Gem&lt;/a&gt; with a
&lt;em&gt;on-liner&lt;/em&gt; command&lt;/li&gt;
&lt;li&gt;I want to be able to run a &lt;em&gt;Jekyll server&lt;/em&gt; that auto updates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We are going to play with : &lt;a href=&#34;http://gembundler.com/&#34;&gt;Bundler&lt;/a&gt;,
&lt;a href=&#34;https://github.com/guard/guard&#34;&gt;Guard&lt;/a&gt; and &lt;a href=&#34;https://github.com/ddollar/foreman&#34;&gt;foreman&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;bundler&#34;&gt;Bundler&lt;/h2&gt;

&lt;p&gt;Bundler let us run &lt;code&gt;bundle install&lt;/code&gt; to get all Ruby Gems we will need ; It use
a file name &lt;code&gt;Gemfile&lt;/code&gt;. The gems we need are simple : &lt;code&gt;jekyll&lt;/code&gt;, &lt;code&gt;guard&lt;/code&gt; and some
Guard extensions.&lt;/p&gt;


source &#34;http://rubygems.org&#34;

gem &#39;jekyll&#39;
gem &#39;guard&#39;
gem &#39;guard-jekyll2&#39;
gem &#39;guard-shell&#39;
gem &#39;guard-bundler&#39;


&lt;h2 id=&#34;guard&#34;&gt;Guard&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Guard is a command line tool to easily handle events on file system modifications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Guard will be watching file we told him and run action in consequence ; The file
is name &lt;code&gt;Guardfile&lt;/code&gt;.&lt;/p&gt;


guard &#39;jekyll2&#39; do
  watch %r{.*}
end

guard :bundler do
  watch(&#39;Gemfile&#39;)
end
# vim:filetype=ruby


&lt;h2 id=&#34;foreman&#34;&gt;Foreman&lt;/h2&gt;

&lt;p&gt;Finally, foreman will let us declare our processes and will handle the start,
forward the output and handle the shutdown. It can then export its configuration
into more &lt;em&gt;production-ready&lt;/em&gt; file (&lt;code&gt;init&lt;/code&gt;, &lt;code&gt;upstard&lt;/code&gt;, …) ; It uses a file named
&lt;code&gt;Procfile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We will tell foreman to run :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The jekyll build-in server : &lt;code&gt;jekyll --server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Guard, to handle file changes &lt;em&gt;in background&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;


web: bundle exec jekyll --server
guard: bundle exec guard


&lt;p&gt;And that&amp;rsquo;s all folk. Now, you just need to run foreman in the Jekyll-powered
directory and edit your files.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gitolite quick and dirty mirror</title>
      <link>http://vincent.demeester.fr/posts/2012-05-08-gitolite-quick-and-dirty-mirror/</link>
      <pubDate>Tue, 08 May 2012 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2012-05-08-gitolite-quick-and-dirty-mirror/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;m running a gitolite &lt;em&gt;instance&lt;/em&gt; on my personal server to manage my repositories
(personnal, private or public) ; and I am quickly going to share with you how I
setup a &lt;em&gt;quick and dirty&lt;/em&gt; mirror feature.&lt;/p&gt;

&lt;p&gt;First, I am using &lt;strong&gt;gitolite 3&lt;/strong&gt;. The mirroring we are going to setup is not the
&lt;em&gt;supported&lt;/em&gt; &lt;a href=&#34;http://sitaramc.github.com/gitolite/mirroring.html&#34;&gt;mirroring &lt;strong&gt;built-in&lt;/strong&gt;&lt;/a&gt;.
We are going to implement a simplier way to set mirror thing :&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write a custom gitolite command ; the idea is to be able to write &lt;code&gt;git-config&lt;/code&gt;
stuff.&lt;/li&gt;
&lt;li&gt;Write a hook that take a specific &lt;code&gt;git-config&lt;/code&gt; (let say &lt;code&gt;mirror.url&lt;/code&gt;) and do
a simple mirroring.&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&#34;gitolite-commands&#34;&gt;Gitolite commands&lt;/h1&gt;

&lt;p&gt;Gitolite 3 has been rewritten to be more flexible : &lt;a href=&#34;http://sitaramc.github.com/gitolite/g3why.html&#34;&gt;Why a completely new version&lt;/a&gt;.
The rewrite made it really easy to extend gitolite. &lt;del&gt;I&amp;rsquo;ve fork &lt;a href=&#34;https://github.com/vdemeester/gitolite&#34;&gt;gitolite&lt;/a&gt; on github&lt;/del&gt;
I&amp;rsquo;ve created a &lt;a href=&#34;http://github.com/vdemeester/vdemeester-gitolite-local-code&#34;&gt;repository git&lt;/a&gt;
to easily add commands to my gitolite instance via &lt;em&gt;local code&lt;/em&gt;. The gitolite command I wrote is
a quick and dirty script in shell to add &lt;code&gt;git config&lt;/code&gt;. The source should speek
for itself ; It &lt;em&gt;should&lt;/em&gt; include some way to check if the given config is not
already present in the &lt;code&gt;gitolite-admin&lt;/code&gt; configuration file — and so might be
rewritten in &lt;code&gt;Perl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The command is &lt;code&gt;write-git-config&lt;/code&gt; because a &lt;code&gt;git-config&lt;/code&gt; command already exists
in the built-in commands.&lt;/p&gt;


#!/bin/sh

# Usage:    ssh git@host write-git-config &lt;repo&gt; &lt;key&gt; &lt;value&gt;
#
# Set git-config value for user-created (&#34;wild&#34;) repo.

die() { echo &#34;$@&#34; &gt;&amp;2; exit 1; }
usage() { perl -lne &#39;print substr($_, 2) if /^# Usage/../^$/&#39; &lt; $0; exit 1; }
[ -z &#34;$1&#34; ] &amp;&amp; [ -z &#34;$2&#34; ] &amp;&amp; [ -z &#34;$3&#34; ] &amp;&amp; usage
[ &#34;$1&#34; = &#34;-h&#34; ] &amp;&amp; usage
[ -z &#34;$GL_USER&#34; ] &amp;&amp; die GL_USER not set

# ----------------------------------------------------------------------
repo=$1; shift
key=$1; shift
value=$1; shift

# this shell script takes arguments that are completely under the user&#39;s
# control, so make sure you quote those suckers!

if gitolite query-rc -q WRITER_CAN_UPDATE_DESC
then
    gitolite access -q &#34;$repo&#34; $GL_USER W any || die You are not authorised
else
    gitolite creator &#34;$repo&#34; $GL_USER || die You are not authorised
fi

# if it passes, $repo is a valid repo name so it is known to contain only sane
# characters.  This is because &#39;gitolite creator&#39; return true only if there
# *is* a repo of that name and it has a gl-creator file that contains the same
# text as $GL_USER.

configfile=`gitolite query-rc GL_REPO_BASE`/&#34;$repo&#34;.git/config

git config --file &#34;$configfile&#34; &#34;$key&#34; &#34;$value&#34;


&lt;h1 id=&#34;gitolite-hooks&#34;&gt;Gitolite hooks&lt;/h1&gt;

&lt;p&gt;The next step is to write a quick &lt;code&gt;post-receive&lt;/code&gt; hook that check if there is a
certain &lt;code&gt;git-config&lt;/code&gt; entry and run &lt;code&gt;git push --mirror&lt;/code&gt;. The file is in
&lt;code&gt;$HOME/.gitolite/hooks/common/post-receive&lt;/code&gt; ; you could add a better system to
hooks (to be able to add &amp;ldquo;dynamic&amp;rdquo; hooks, …).&lt;/p&gt;


#!/bin/sh

# Simple gitolite mirroring

# flush STDIN coming from git, because gitolite&#39;s own post-receive.mirrorpush
# script does the same thing
[ -t 0 ] || cat &gt;/dev/null

[ -z &#34;$GL_REPO&#34; ] &amp;&amp; die GL_REPO not set

target=`git config --get mirror.url`
[ -z &#34;$target&#34; ] &amp;&amp; exit 0

# Support a REPO variable for wildcard mirrors
gl_repo_escaped=$(echo $GL_REPO | sed &#39;s/\//\\\//g&#39;)
target=$(echo $target | sed -e &#34;s/REPO/$gl_repo_escaped/g&#34;)

# Do the mirror push
git push --mirror $target


&lt;p&gt;The next, and final step is to run &lt;code&gt;gitolite compile&lt;/code&gt; to update links to hooks
for every repositories.&lt;/p&gt;

&lt;h1 id=&#34;for-real&#34;&gt;For real&lt;/h1&gt;

&lt;p&gt;And finaly, this is the final step you&amp;rsquo;ll do.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh git@host write-git-config vincent/vcsh-home mirror.url git@github.com:vdemeester/vcsh-home.git
$ git push
Counting objects: 5, done.
Delta compression using up to 2 threads.
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 294 bytes, done.
Total 3 (delta 2), reused 0 (delta 0)
remote: To git@github.com:vdemeester/vcsh-home.git
remote:    65681a8..701c990  master -&amp;gt; master
To git@host:vincent/vcsh-home.git
   65681a8..701c990  master -&amp;gt; master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And that should be it !&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update 2012/10/04&lt;/strong&gt; : Moved from gitolite fork to &lt;em&gt;gitolite local code&lt;/em&gt;
repository.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
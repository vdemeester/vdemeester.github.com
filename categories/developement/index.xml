<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Developement on Vincent Demeester</title>
    <link>http://vincent.demeester.fr/categories/developement/</link>
    <description>Recent content in Developement on Vincent Demeester</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 06 Sep 2018 00:00:00 +0200</lastBuildDate>
    
	<atom:link href="http://vincent.demeester.fr/categories/developement/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang testing ‚Äî gotest.tools golden</title>
      <link>http://vincent.demeester.fr/posts/2018-09-06-gotest-tools-golden/</link>
      <pubDate>Thu, 06 Sep 2018 00:00:00 +0200</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2018-09-06-gotest-tools-golden/</guid>
      <description>Let&amp;rsquo;s continue the gotest.tools serie, this time with the golden package. This is a quick follow-up on a previous golden post, but focused on the gotest.tools implementation. I&amp;rsquo;m gonna be quicker, please read that one if golden files is a new concept for you.
 Package golden provides tools for comparing large mutli-line strings.
Golden files are files in the ./testdata/ subdirectory of the package under test.
 In the previous article, we described the problem, and how to fix it by writing a small helper.</description>
    </item>
    
    <item>
      <title>Golang testing ‚Äî gotest.tools skip</title>
      <link>http://vincent.demeester.fr/posts/2018-09-01-gotest-tools-skip/</link>
      <pubDate>Sat, 01 Sep 2018 00:00:00 +0200</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2018-09-01-gotest-tools-skip/</guid>
      <description>Let&amp;rsquo;s continue the gotest.tools serie, this time with the skip package. This is a really simple one so this should be quick.
 skip provides functions for skipping a test and printing the source code of the condition used to skip the test.
 The package consists of only one function : If. The idea comes mainly from docker/docker integration test suite, where we wanted to skip some test (or test suites) given different context.</description>
    </item>
    
    <item>
      <title>Golang testing ‚Äî gotest.tools assertions</title>
      <link>http://vincent.demeester.fr/posts/2018-08-16-gotest-tools-assertions/</link>
      <pubDate>Thu, 16 Aug 2018 00:00:00 +0200</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2018-08-16-gotest-tools-assertions/</guid>
      <description>Let&amp;rsquo;s take a closer look at gotest.tools assertions packages. This is mainly about assert, assert/cmp and assert/opt.
 Package assert provides assertions for comparing expected values to actual values. When assertion fails a helpful error message is printed.
 There is two main functions (Assert and Check) and some helpers (like NilError, ‚Ä¶). They all take a *testing.T as a first argument, pretty common across testing Go libraries. Let&amp;rsquo;s dive into those !</description>
    </item>
    
    <item>
      <title>Golang testing ‚Äî gotest.tools introduction</title>
      <link>http://vincent.demeester.fr/posts/2018-07-28-gotest-tools-intro/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0200</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2018-07-28-gotest-tools-intro/</guid>
      <description>I already wrote 2 previous posts about golang and testing. It&amp;rsquo;s something I care deeply about and I wanted to continue writing about it. It took me a bit more time than I thought, but getting back to it. Since the last post, Daniel Nephin and I worked (but mainly Daniel ü§ó) on bootstrapping a testing helper library.
Let me introduce it to you this library : gotest.tools. As described in the godoc package comment, gotest.</description>
    </item>
    
    <item>
      <title>Golang testing ‚Äî golden file</title>
      <link>http://vincent.demeester.fr/posts/2017-04-22-golang-testing-golden-file/</link>
      <pubDate>Sat, 22 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2017-04-22-golang-testing-golden-file/</guid>
      <description>Tests are all about maintainability and readability. You want the least visual noise possible and it should not be a hassle to maintain. When testing functions that output a long of string, in case of a command line output testing, readability and maintainance tend to be tricky to achieve. The problem  As an example let&#39;s say we want to test out the output of a command that displays a list as a table.</description>
    </item>
    
    <item>
      <title>Golang testing ‚Äî functional arguments for wonderful builders</title>
      <link>http://vincent.demeester.fr/posts/2017-01-01-go-testing-functionnal-builders/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2017-01-01-go-testing-functionnal-builders/</guid>
      <description>Programming is not easy; even the best programmers are incapable of writing programs that work exactly as intended every time. Therefore an important part of the software development process is testing. Writing tests for our code is a good way to ensure quality and improve reliability.   Go programs, when properly implemented, are fairly simple to test programatically. The testing built-in library and the features of the language itself offer plenty of ways to write good tests.</description>
    </item>
    
    <item>
      <title>Migration vers hugo</title>
      <link>http://vincent.demeester.fr/posts/2015-05-09-migration-to-hugo/</link>
      <pubDate>Sat, 09 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2015-05-09-migration-to-hugo/</guid>
      <description>Et voil√†, une semaine apr√®s m&#39;√™tre remis en route sur ce blog, je fais d√©j√† une migration &amp;gt;_&amp;lt;. Je me suis rendu compte que Jekyll m&#39;√©nervait un peu, et comme je suis √† fond dans go en ce moment, j&#39;ai regard√© du c√¥t√© des g√©n√©rateurs de sites static et Hugo a clairement retenu mon attention. Pourquoi Hugo ?   Make the Web Fun Again  Introducing Hugo, a new idea around making website creation simple again.</description>
    </item>
    
    <item>
      <title>Orgmode et Jekyll</title>
      <link>http://vincent.demeester.fr/posts/2015-05-01-orgmode-et-jekyll/</link>
      <pubDate>Fri, 01 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2015-05-01-orgmode-et-jekyll/</guid>
      <description>Un peu plus d&#39;un an..  .. que je n&#39;ai rien post√© ici. Le temps passe bien vite, mais c&#39;est plut√¥t une bonne chose. Je crois que quelque chose me manquait pour poster ici plus souvent.   Au niveau de mes points d&#39;entr√©es sur le web, je compte remettre un peu en route la partie blog de ce site et tourner shortbrain.org (ou autre) en un site plus &#34;documentation&#34; en me basant sur mes notes (powered by org-mode).</description>
    </item>
    
    <item>
      <title>Maven Tmpfs</title>
      <link>http://vincent.demeester.fr/posts/2013-09-08-maven-tmpfs/</link>
      <pubDate>Sun, 08 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2013-09-08-maven-tmpfs/</guid>
      <description>Je suis un utilisateur convaincu de [maven](), malgr√© ces d√©fauts, le moto &amp;ldquo;Convention over configuration&amp;rdquo; me va vraiment bien. Que ce soit au boulot ou √† la maison, j&amp;rsquo;ai plus d&amp;rsquo;ordinateurs √©quip√©s de ssd (ou de m√©moire flash) que de disque traditionnel (m√©canique ?). Pour augmenter un peu la dur√©e de vie de ces disques SSD, j&amp;rsquo;ai cherch√© √† savoir comment d√©porter le build de maven (qui, pour rappel, se passe dans le dossier target/) hors du SSD ; ici ce sera dans le dossier /tmp/ qui est mont√© en m√©moire (merci tmpfs), mais on peut imaginer d√©porter √ßa sur un autre disque, etc.</description>
    </item>
    
    <item>
      <title>Maven Release Gitflow</title>
      <link>http://vincent.demeester.fr/posts/2012-07-23-maven-release-gitflow/</link>
      <pubDate>Mon, 23 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2012-07-23-maven-release-gitflow/</guid>
      <description>I like a lot the gitflow way of managing project. When working on maven project, there is few great plugins that helps to get the work done. One of them is maven-release-plugin.
Inspired on this gist, I&amp;rsquo;ve come with a cool way of doing things (let say we want to release a 0.1 version of an artifact) :
Prepare the pom.xml. It needs &amp;lt;scm&amp;gt; entries, &amp;lt;distributionManagement&amp;gt; entries (to know where to deploy the release artifact) and few options for the maven-release-plugin :</description>
    </item>
    
    <item>
      <title>Jekyll Forman Guard Bundler</title>
      <link>http://vincent.demeester.fr/posts/2012-05-13-jekyll-foreman-guard-bundler/</link>
      <pubDate>Sun, 13 May 2012 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2012-05-13-jekyll-foreman-guard-bundler/</guid>
      <description>This post is a quick &amp;ldquo;How did I setup my Jekyll environnement ?&amp;rdquo;. We are going all the tools that are quite awesome in Ruby.
Goal The goal is simple :
 I want to be able to install any dependent Gem with a on-liner command I want to be able to run a Jekyll server that auto updates.  We are going to play with : Bundler, Guard and foreman.</description>
    </item>
    
    <item>
      <title>Gitolite quick and dirty mirror</title>
      <link>http://vincent.demeester.fr/posts/2012-05-08-gitolite-quick-and-dirty-mirror/</link>
      <pubDate>Tue, 08 May 2012 00:00:00 +0000</pubDate>
      
      <guid>http://vincent.demeester.fr/posts/2012-05-08-gitolite-quick-and-dirty-mirror/</guid>
      <description>I&amp;rsquo;m running a gitolite instance on my personal server to manage my repositories (personnal, private or public) ; and I am quickly going to share with you how I setup a quick and dirty mirror feature.
First, I am using gitolite 3. The mirroring we are going to setup is not the supported mirroring built-in. We are going to implement a simplier way to set mirror thing :
 Write a custom gitolite command ; the idea is to be able to write git-config stuff.</description>
    </item>
    
  </channel>
</rss>